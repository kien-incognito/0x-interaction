{
  "contractName": "IForwarder",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "name": "approveMakerAssetProxy",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "makerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipientAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "senderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makerAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTimeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "makerFeeAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerFeeAssetData",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "makerAssetBuyAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ethFeeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address payable[]",
          "name": "feeRecipients",
          "type": "address[]"
        }
      ],
      "name": "marketBuyOrdersWithEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wethSpentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "makerAssetAcquiredAmount",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "makerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feeRecipientAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "senderAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makerAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerAssetAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "makerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTimeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "makerFeeAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerFeeAssetData",
              "type": "bytes"
            }
          ],
          "internalType": "struct LibOrder.Order[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ethFeeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address payable[]",
          "name": "feeRecipients",
          "type": "address[]"
        }
      ],
      "name": "marketSellOrdersWithEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wethSpentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "makerAssetAcquiredAmount",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"approveMakerAssetProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"makerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"makerFeeAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerFeeAssetData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"makerAssetBuyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ethFeeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"feeRecipients\",\"type\":\"address[]\"}],\"name\":\"marketBuyOrdersWithEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wethSpentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerAssetAcquiredAmount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"makerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipientAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"senderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTimeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"makerFeeAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerFeeAssetData\",\"type\":\"bytes\"}],\"internalType\":\"struct LibOrder.Order[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ethFeeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address payable[]\",\"name\":\"feeRecipients\",\"type\":\"address[]\"}],\"name\":\"marketSellOrdersWithEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wethSpentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"makerAssetAcquiredAmount\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"approveMakerAssetProxy(bytes)\":{\"details\":\"Approves the respective proxy for a given asset to transfer tokens on the Forwarder contract's behalf.      This is necessary because an order fee denominated in the maker asset (i.e. a percentage fee) is sent by the      Forwarder contract to the fee recipient.      This method needs to be called before forwarding orders of a maker asset that hasn't      previously been approved.\",\"params\":{\"assetData\":\"Byte array encoded for the respective asset proxy.\"}},\"marketBuyOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],uint256,bytes[],uint256[],address[])\":{\"details\":\"Attempt to buy makerAssetBuyAmount of makerAsset by selling ETH provided with transaction.      The Forwarder may *fill* more than makerAssetBuyAmount of the makerAsset so that it can      pay takerFees where takerFeeAssetData == makerAssetData (i.e. percentage fees).      Any ETH not spent will be refunded to sender.\",\"params\":{\"ethFeeAmounts\":\"Amounts of ETH, denominated in Wei, that are paid to corresponding feeRecipients.\",\"feeRecipients\":\"Addresses that will receive ETH when orders are filled.\",\"makerAssetBuyAmount\":\"Desired amount of makerAsset to purchase.\",\"orders\":\"Array of order specifications used containing desired makerAsset and WETH as takerAsset.\",\"signatures\":\"Proofs that orders have been created by makers.\"},\"return\":\"wethSpentAmount Amount of WETH spent on the given set of orders.makerAssetAcquiredAmount Amount of maker asset acquired from the given set of orders.\"},\"marketSellOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],uint256[],address[])\":{\"details\":\"Purchases as much of orders' makerAssets as possible by selling as much of the ETH value sent      as possible, accounting for order and forwarder fees.\",\"params\":{\"ethFeeAmounts\":\"Amounts of ETH, denominated in Wei, that are paid to corresponding feeRecipients.\",\"feeRecipients\":\"Addresses that will receive ETH when orders are filled.\",\"orders\":\"Array of order specifications used containing desired makerAsset and WETH as takerAsset.\",\"signatures\":\"Proofs that orders have been created by makers.\"},\"return\":\"wethSpentAmount Amount of WETH spent on the given set of orders.makerAssetAcquiredAmount Amount of maker asset acquired from the given set of orders.\"},\"withdrawAsset(bytes,uint256)\":{\"details\":\"Withdraws assets from this contract. The contract requires a ZRX balance in order to      function optimally, and this function allows the ZRX to be withdrawn by owner. It may also be      used to withdraw assets that were accidentally sent to this contract.\",\"params\":{\"amount\":\"Amount of ERC20 token to withdraw.\",\"assetData\":\"Byte array encoded for the respective asset proxy.\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@0x/contracts-exchange-forwarder/contracts/src/interfaces/IForwarder.sol\":\"IForwarder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@0x/contracts-exchange-forwarder/contracts/src/interfaces/IAssets.sol\":{\"keccak256\":\"0x91e8771035869c8e40e2f1a35df3c1bcc89cf3db69bf68ee73cd1f41c64ca79b\",\"urls\":[\"bzz-raw://8c1d159406b475af003a70998dbf2c30c0d5825332d5857c4908e7faf302c6ce\",\"dweb:/ipfs/QmZvgBB1JenURXRkAtRwJRaU6fNP7BdrHxac2wrBrLVbhz\"]},\"@0x/contracts-exchange-forwarder/contracts/src/interfaces/IForwarder.sol\":{\"keccak256\":\"0x49738224245f386fa0eb480c325108ccf4576cfbb349e83d1163bb8e48474966\",\"urls\":[\"bzz-raw://24b97dad2e5fc427179d0d95ce0b0e3c6f2e213fb5ccc515c9ac2b1dca67f0fb\",\"dweb:/ipfs/QmWxUxmjiB1ngBmcnPGEKXp83ejwS5yV6DP3VXjYQkLn8F\"]},\"@0x/contracts-exchange-forwarder/contracts/src/interfaces/IForwarderCore.sol\":{\"keccak256\":\"0xe389a309ef9533bbc134e248f7c976b5831e78b972e94999543b69dd64dcb9e0\",\"urls\":[\"bzz-raw://b9c8424b362cccf711eb45a60dfb70271f44a3cc71203bebe6f09eaf68ada010\",\"dweb:/ipfs/QmSnKwhoBoiV66vm82NXTNGCEGUyX4fGxn4fbWwUAVnuJm\"]},\"@0x/contracts-exchange-libs/contracts/src/LibFillResults.sol\":{\"keccak256\":\"0xedb2f1e66e7ece2302b4dd19d0ef29a0ffeefddae7e9a81f7104155ac3cbb75b\",\"urls\":[\"bzz-raw://9a490801ffde73bb98aa3de52ef2d615894d188820ebe4c8cd340f5cd33462ad\",\"dweb:/ipfs/QmUTSaJ6GTvNoYCmpd9dv2mz25vakoLS9tQpiF1ohAUMFV\"]},\"@0x/contracts-exchange-libs/contracts/src/LibMath.sol\":{\"keccak256\":\"0xc331418f75cd832accf9dc439be811e10d99f1d2de3a9c0321fd3f127cdf1e54\",\"urls\":[\"bzz-raw://8a090ac0a55200b6f5624c41fff2ad21e5c673b7fcd0faf1bc88017087bbb1b2\",\"dweb:/ipfs/QmWhxuazHstpSCYDQJscHnAh6ngW7SHKT79t6yQHaJHgmi\"]},\"@0x/contracts-exchange-libs/contracts/src/LibMathRichErrors.sol\":{\"keccak256\":\"0xd2d047534facd6051467dd7a22d7ee9fd4e54e63bb5a5fae2511eac7332fad3d\",\"urls\":[\"bzz-raw://5e0aeedd55c996fd72004a14f5c528ed60b46631ca9599bbb7925c8342ca3be4\",\"dweb:/ipfs/QmNi1ozt4sYmn4pCobjU7FQ4KGUvK77pCyWUtbD18uQgVm\"]},\"@0x/contracts-exchange-libs/contracts/src/LibOrder.sol\":{\"keccak256\":\"0x1b7b1e1a2dff4249c6f6c500000342a805f372131797b6d7314435204a651ad4\",\"urls\":[\"bzz-raw://19c11b77022ccfa530af75f236ea00ecb92aa5476f96abbde268163660b3906b\",\"dweb:/ipfs/Qmf1MtwPLpocsBArn8Npyzu4AtMqSagYTuee8JdbMXXwHM\"]},\"@0x/contracts-utils/contracts/src/LibEIP712.sol\":{\"keccak256\":\"0xe19c3cbc71fbea0fdb45c1763306550015d940bea9dbec5f3fd2edfe2165d673\",\"urls\":[\"bzz-raw://267d263f0453352a1ac8d8085a13c4976fb8c964eff8d3aab0a84173d1438efb\",\"dweb:/ipfs/QmbaRw85MYYP3KTmQ68gYdEnFyMqD7frwjxxwsj4j4JCr1\"]},\"@0x/contracts-utils/contracts/src/LibRichErrors.sol\":{\"keccak256\":\"0xe3ce6ded2fea3cc80998ca4d364bda530e273af0ba1c78d22a6cdadb6f64186e\",\"urls\":[\"bzz-raw://8239629dbcee9797a8f8157f03c2b78827b446787b4d53b3033a3e1ab538ad0b\",\"dweb:/ipfs/QmbttkX94CxMkS6t1K4He5bNwGKCRUhKqTt9pNsAL5ynst\"]},\"@0x/contracts-utils/contracts/src/LibSafeMath.sol\":{\"keccak256\":\"0xd0da9ac1905381832f6612774cb7eced3b4b60459d6bafa59f5424955b44c935\",\"urls\":[\"bzz-raw://ede4bbe2dac43c6cc4e3b7a22285e00d55b31fb8cc00b375c6ac4714298b7e6d\",\"dweb:/ipfs/QmWbN5qbJSNYrMMZMugaH5itTVSexe9yPsCPuArQVCLUgi\"]},\"@0x/contracts-utils/contracts/src/LibSafeMathRichErrors.sol\":{\"keccak256\":\"0xcf6adae04bd7af8e41fcd40ad148cc3d1cd5596bd42b01961b735c9b416a6572\",\"urls\":[\"bzz-raw://103791140e631e9d670bbc99e5f8e546f56061c5d49de97754006ce2c252d61e\",\"dweb:/ipfs/QmeRMyYFSk7n1sLzRSGqxcoX1sKQSdAQya6bRy6nseu6xX\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\npragma experimental ABIEncoderV2;\n\nimport \"./IForwarderCore.sol\";\nimport \"./IAssets.sol\";\n\n\n// solhint-disable no-empty-blocks\ncontract IForwarder is\n    IForwarderCore,\n    IAssets\n{}\n",
  "sourcePath": "@0x/contracts-exchange-forwarder/contracts/src/interfaces/IForwarder.sol",
  "ast": {
    "absolutePath": "@0x/contracts-exchange-forwarder/contracts/src/interfaces/IForwarder.sol",
    "exportedSymbols": {
      "IForwarder": [
        3286
      ]
    },
    "id": 3287,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3278,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "580:23:9"
      },
      {
        "id": 3279,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "604:33:9"
      },
      {
        "absolutePath": "@0x/contracts-exchange-forwarder/contracts/src/interfaces/IForwarderCore.sol",
        "file": "./IForwarderCore.sol",
        "id": 3280,
        "nodeType": "ImportDirective",
        "scope": 3287,
        "sourceUnit": 3333,
        "src": "639:30:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-exchange-forwarder/contracts/src/interfaces/IAssets.sol",
        "file": "./IAssets.sol",
        "id": 3281,
        "nodeType": "ImportDirective",
        "scope": 3287,
        "sourceUnit": 3277,
        "src": "670:23:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3282,
              "name": "IForwarderCore",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3332,
              "src": "758:14:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IForwarderCore_$3332",
                "typeString": "contract IForwarderCore"
              }
            },
            "id": 3283,
            "nodeType": "InheritanceSpecifier",
            "src": "758:14:9"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3284,
              "name": "IAssets",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3276,
              "src": "778:7:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IAssets_$3276",
                "typeString": "contract IAssets"
              }
            },
            "id": 3285,
            "nodeType": "InheritanceSpecifier",
            "src": "778:7:9"
          }
        ],
        "contractDependencies": [
          3276,
          3332
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": false,
        "id": 3286,
        "linearizedBaseContracts": [
          3286,
          3276,
          3332
        ],
        "name": "IForwarder",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 3287,
        "src": "731:57:9"
      }
    ],
    "src": "580:209:9"
  },
  "legacyAST": {
    "absolutePath": "@0x/contracts-exchange-forwarder/contracts/src/interfaces/IForwarder.sol",
    "exportedSymbols": {
      "IForwarder": [
        3286
      ]
    },
    "id": 3287,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3278,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".9"
        ],
        "nodeType": "PragmaDirective",
        "src": "580:23:9"
      },
      {
        "id": 3279,
        "literals": [
          "experimental",
          "ABIEncoderV2"
        ],
        "nodeType": "PragmaDirective",
        "src": "604:33:9"
      },
      {
        "absolutePath": "@0x/contracts-exchange-forwarder/contracts/src/interfaces/IForwarderCore.sol",
        "file": "./IForwarderCore.sol",
        "id": 3280,
        "nodeType": "ImportDirective",
        "scope": 3287,
        "sourceUnit": 3333,
        "src": "639:30:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@0x/contracts-exchange-forwarder/contracts/src/interfaces/IAssets.sol",
        "file": "./IAssets.sol",
        "id": 3281,
        "nodeType": "ImportDirective",
        "scope": 3287,
        "sourceUnit": 3277,
        "src": "670:23:9",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3282,
              "name": "IForwarderCore",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3332,
              "src": "758:14:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IForwarderCore_$3332",
                "typeString": "contract IForwarderCore"
              }
            },
            "id": 3283,
            "nodeType": "InheritanceSpecifier",
            "src": "758:14:9"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3284,
              "name": "IAssets",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3276,
              "src": "778:7:9",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IAssets_$3276",
                "typeString": "contract IAssets"
              }
            },
            "id": 3285,
            "nodeType": "InheritanceSpecifier",
            "src": "778:7:9"
          }
        ],
        "contractDependencies": [
          3276,
          3332
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": false,
        "id": 3286,
        "linearizedBaseContracts": [
          3286,
          3276,
          3332
        ],
        "name": "IForwarder",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 3287,
        "src": "731:57:9"
      }
    ],
    "src": "580:209:9"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.23",
  "updatedAt": "2020-02-18T09:23:42.224Z",
  "devdoc": {
    "methods": {
      "approveMakerAssetProxy(bytes)": {
        "details": "Approves the respective proxy for a given asset to transfer tokens on the Forwarder contract's behalf.      This is necessary because an order fee denominated in the maker asset (i.e. a percentage fee) is sent by the      Forwarder contract to the fee recipient.      This method needs to be called before forwarding orders of a maker asset that hasn't      previously been approved.",
        "params": {
          "assetData": "Byte array encoded for the respective asset proxy."
        }
      },
      "marketBuyOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],uint256,bytes[],uint256[],address[])": {
        "details": "Attempt to buy makerAssetBuyAmount of makerAsset by selling ETH provided with transaction.      The Forwarder may *fill* more than makerAssetBuyAmount of the makerAsset so that it can      pay takerFees where takerFeeAssetData == makerAssetData (i.e. percentage fees).      Any ETH not spent will be refunded to sender.",
        "params": {
          "ethFeeAmounts": "Amounts of ETH, denominated in Wei, that are paid to corresponding feeRecipients.",
          "feeRecipients": "Addresses that will receive ETH when orders are filled.",
          "makerAssetBuyAmount": "Desired amount of makerAsset to purchase.",
          "orders": "Array of order specifications used containing desired makerAsset and WETH as takerAsset.",
          "signatures": "Proofs that orders have been created by makers."
        },
        "return": "wethSpentAmount Amount of WETH spent on the given set of orders.makerAssetAcquiredAmount Amount of maker asset acquired from the given set of orders."
      },
      "marketSellOrdersWithEth((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes,bytes,bytes)[],bytes[],uint256[],address[])": {
        "details": "Purchases as much of orders' makerAssets as possible by selling as much of the ETH value sent      as possible, accounting for order and forwarder fees.",
        "params": {
          "ethFeeAmounts": "Amounts of ETH, denominated in Wei, that are paid to corresponding feeRecipients.",
          "feeRecipients": "Addresses that will receive ETH when orders are filled.",
          "orders": "Array of order specifications used containing desired makerAsset and WETH as takerAsset.",
          "signatures": "Proofs that orders have been created by makers."
        },
        "return": "wethSpentAmount Amount of WETH spent on the given set of orders.makerAssetAcquiredAmount Amount of maker asset acquired from the given set of orders."
      },
      "withdrawAsset(bytes,uint256)": {
        "details": "Withdraws assets from this contract. The contract requires a ZRX balance in order to      function optimally, and this function allows the ZRX to be withdrawn by owner. It may also be      used to withdraw assets that were accidentally sent to this contract.",
        "params": {
          "amount": "Amount of ERC20 token to withdraw.",
          "assetData": "Byte array encoded for the respective asset proxy."
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}