// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package incmode

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IncmodeABI is the input ABI used to generate the binding from.
const IncmodeABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incognitoProxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prevVault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ndays\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"MoveAssets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"UpdateIncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incognito\",\"outputs\":[{\"internalType\":\"contractIncognito\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newVault\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevVault\",\"outputs\":[{\"internalType\":\"contractWithdrawable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_successor\",\"type\":\"address\"}],\"name\":\"retire\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"successor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"}],\"name\":\"depositERC20\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"heights\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"instPaths\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bool[][2]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[][2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"instRoots\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"blkData\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256[][2]\",\"name\":\"sigIdxs\",\"type\":\"uint256[][2]\"},{\"internalType\":\"uint8[][2]\",\"name\":\"sigVs\",\"type\":\"uint8[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigRs\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigSs\",\"type\":\"bytes32[][2]\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"heights\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"instPaths\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bool[][2]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[][2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"instRoots\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"blkData\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256[][2]\",\"name\":\"sigIdxs\",\"type\":\"uint256[][2]\"},{\"internalType\":\"uint8[][2]\",\"name\":\"sigVs\",\"type\":\"uint8[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigRs\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigSs\",\"type\":\"bytes32[][2]\"}],\"name\":\"submitBurnProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"sigToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_newVault\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"moveAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"updateIncognitoProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IncmodeBin is the compiled bytecode used for deploying new contracts.
var IncmodeBin = "0x60806040523480156200001157600080fd5b5060405162004bbc38038062004bbc833981810160405262000037919081019062000185565b82806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083151502179055506301e1338042016002819055505081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000229565b6000815190506200017f816200020f565b92915050565b6000806000606084860312156200019b57600080fd5b6000620001ab868287016200016e565b9350506020620001be868287016200016e565b9250506040620001d1868287016200016e565b9150509250925092565b6000620001e882620001ef565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200021a81620001db565b81146200022657600080fd5b50565b61498380620002396000396000f3fe6080604052600436106101cd5760003560e01c80637e16e6e1116100f7578063a26e118611610095578063f851a44011610064578063f851a44014610638578063f8b3974514610663578063fa84702e1461068c578063faf7f494146106b7576101cd565b8063a26e118614610579578063ce5494bb14610595578063cf54aaa0146105be578063dca40d9e146105fb576101cd565b80638a984538116100d15780638a984538146104e05780639714378c1461050b5780639e6371ba14610534578063a0c0f9b81461055d576101cd565b80637e16e6e11461045d5780638456cb591461049e57806388aaf0c8146104b5576101cd565b806358bc83371161016f5780636ff968c31161013e5780636ff968c31461038d57806370a08231146103b8578063749c5f86146103f557806379599f9614610432576101cd565b806358bc8337146102de5780635a67cb87146103095780635c975abb1461032557806365b5a00f14610350576101cd565b80633f4ba83a116101ab5780633f4ba83a1461024a5780633fec6b40146102615780634e71d92d1461029e5780635654b6c8146102b5576101cd565b80630c4f5039146101cf5780633a51913d146101f85780633cb4b58a14610221575b005b3480156101db57600080fd5b506101f660048036036101f1919081019061367b565b6106e0565b005b34801561020457600080fd5b5061021f600480360361021a919081019061342d565b610aa7565b005b34801561022d57600080fd5b506102486004803603610243919081019061374f565b610c3a565b005b34801561025657600080fd5b5061025f610e9e565b005b34801561026d57600080fd5b50610288600480360361028391908101906138d4565b610fd0565b6040516102959190613fc2565b60405180910390f35b3480156102aa57600080fd5b506102b361105e565b005b3480156102c157600080fd5b506102dc60048036036102d79190810190613969565b6111ee565b005b3480156102ea57600080fd5b506102f3611352565b6040516103009190613fc2565b60405180910390f35b610323600480360361031e9190810190613614565b611357565b005b34801561033157600080fd5b5061033a6115a6565b6040516103479190614133565b60405180910390f35b34801561035c57600080fd5b50610377600480360361037291908101906134bb565b6115b9565b6040516103849190614379565b60405180910390f35b34801561039957600080fd5b506103a26115de565b6040516103af9190613fc2565b60405180910390f35b3480156103c457600080fd5b506103df60048036036103da919081019061342d565b611604565b6040516103ec9190614379565b60405180910390f35b34801561040157600080fd5b5061041c600480360361041791908101906136e5565b6116d3565b6040516104299190614133565b60405180910390f35b34801561043e57600080fd5b50610447611817565b6040516104549190614379565b60405180910390f35b34801561046957600080fd5b50610484600480360361047f919081019061370e565b61181d565b6040516104959594939291906143af565b60405180910390f35b3480156104aa57600080fd5b506104b3611899565b005b3480156104c157600080fd5b506104ca611a0f565b6040516104d79190613ff8565b60405180910390f35b3480156104ec57600080fd5b506104f5611a35565b6040516105029190614283565b60405180910390f35b34801561051757600080fd5b50610532600480360361052d9190810190613a10565b611a5b565b005b34801561054057600080fd5b5061055b6004803603610556919081019061342d565b611bbc565b005b61057760048036036105729190810190613546565b611cd3565b005b610593600480360361058e9190810190613928565b61203e565b005b3480156105a157600080fd5b506105bc60048036036105b79190810190613456565b6120e6565b005b3480156105ca57600080fd5b506105e560048036036105e0919081019061342d565b612279565b6040516105f29190614394565b60405180910390f35b34801561060757600080fd5b50610622600480360361061d91908101906136e5565b61233d565b60405161062f9190614133565b60405180910390f35b34801561064457600080fd5b5061064d61235d565b60405161065a9190613fc2565b60405180910390f35b34801561066f57600080fd5b5061068a6004803603610685919081019061374f565b612382565b005b34801561069857600080fd5b506106a1612691565b6040516106ae919061429e565b60405180910390f35b3480156106c357600080fd5b506106de60048036036106d991908101906134f7565b6126b7565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461076f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076690614359565b60405180910390fd5b600160149054906101000a900460ff166107be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b5906142b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561081a57600080fd5b60008090505b8151811015610a6c57600073ffffffffffffffffffffffffffffffffffffffff1682828151811061084d57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156108df57600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156108d9573d6000803e3d6000fd5b50610a5f565b60008282815181106108ed57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161092d9190613fdd565b60206040518083038186803b15801561094557600080fd5b505afa158015610959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061097d9190810190613a39565b90506000811115610a5d5782828151811061099457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016109f892919061404a565b602060405180830381600087803b158015610a1257600080fd5b505af1158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a4a91908101906136bc565b50610a5361273d565b610a5c57600080fd5b5b505b8080600101915050610820565b507f492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce65881604051610a9c9190614111565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2d90614359565b60405180910390fd5b600160149054906101000a900460ff16610b85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7c906142b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bbf57600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c344681604051610c2f9190613fc2565b60405180910390a150565b600160149054906101000a900460ff1615610c8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8190614339565b60405180910390fd5b610c92612d52565b610c9b8b61277b565b90506048816020015160ff16148015610cbb57506001816040015160ff16145b610cc457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff161415610d13578060a00151471015610d0e57600080fd5b610de9565b6000610d228260600151612279565b905060098160ff161115610d4a5760098160ff1603600a0a8260a00151028260a00181815250505b8160a00151826060015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d8c9190613fdd565b60206040518083038186803b158015610da457600080fd5b505afa158015610db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ddc9190810190613a39565b1015610de757600080fd5b505b610dfb8b8b8b8b8b8b8b8b8b8b612875565b8060a0015160046000836080015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2490614359565b60405180910390fd5b600160149054906101000a900460ff16610f7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f73906142b9565b60405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051610fc69190613fdd565b60405180910390a1565b6000806000806020860151915060408601519250601b86604081518110610ff357fe5b602001015160f81c60f81b60f81c01905060018582848660405160008152602001604052604051611027949392919061423e565b6020604051602081039080840390855afa158015611049573d6000803e3d6000fd5b50505060206040510351935050505092915050565b60025442106110a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611099906142d9565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112990614319565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516111e49190613fc2565b60405180910390a1565b60006111fa8383610fd0565b905083600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561128557600080fd5b83600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e858786604051611342939291906140aa565b60405180910390a1505050505050565b600081565b600160149054906101000a900460ff16156113a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139e90614339565b60405180910390fd5b600083905060006113b785612279565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113f49190613fdd565b60206040518083038186803b15801561140c57600080fd5b505afa158015611420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114449190810190613a39565b9050600085905060098360ff1611156114825760098360ff1603600a0a818161146957fe5b04905060098360ff1603600a0a828161147e57fe5b0491505b670de0b6b3a764000081111580156114a25750670de0b6b3a76400008211155b80156114b85750670de0b6b3a764000082820111155b6114c157600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b81526004016114fe93929190614013565b602060405180830381600087803b15801561151857600080fd5b505af115801561152c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061155091908101906136bc565b5061155961273d565b61156257600080fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e878683604051611595939291906140aa565b60405180910390a150505050505050565b600160149054906101000a900460ff1681565b6004602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611642574790506116ce565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161167b9190613fdd565b60206040518083038186803b15801561169357600080fd5b505afa1580156116a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116cb9190810190613a39565b90505b919050565b60006003600083815260200190815260200160002060009054906101000a900460ff16156117045760019050611812565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117645760009050611812565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663749c5f86836040518263ffffffff1660e01b81526004016117bf9190614223565b60206040518083038186803b1580156117d757600080fd5b505afa1580156117eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061180f91908101906136bc565b90505b919050565b60025481565b6000806000806000808660008151811061183357fe5b602001015160f81c60f81b60f81c905060008760018151811061185257fe5b602001015160f81c60f81b60f81c9050600080600060228b0151925060428b0151915060628b01519050848484848499509950995099509950505050505091939590929450565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611928576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191f90614359565b60405180910390fd5b600160149054906101000a900460ff1615611978576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196f90614339565b60405180910390fd5b60025442106119bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b3906142d9565b60405180910390fd5b60018060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051611a059190613fdd565b60405180910390a1565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae190614359565b60405180910390fd5b6002544210611b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b25906142d9565b60405180910390fd5b61016e8110611b72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b69906142f9565b60405180910390fd5b620151808102600254016002819055507f02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e881604051611bb19190614379565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4290614359565b60405180910390fd5b6002544210611c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c86906142d9565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000611cdf8284610fd0565b905086600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611d6a57600080fd5b8573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415611da357600080fd5b6000349050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415611de7578781019050611f13565b878973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e219190613fdd565b60206040518083038186803b158015611e3957600080fd5b505afa158015611e4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e719190810190613a39565b1015611e7c57600080fd5b8873ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878a6040518363ffffffff1660e01b8152600401611eb79291906140e8565b602060405180830381600087803b158015611ed157600080fd5b505af1158015611ee5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f0991908101906136bc565b611f1257600080fd5b5b611f1f87828789612c0f565b87600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555087600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505050505050505050565b600160149054906101000a900460ff161561208e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208590614339565b60405180910390fd5b6b033b2e3c9fd0803ce80000004711156120a757600080fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e600082346040516120db939291906140aa565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216c90614359565b60405180910390fd5b600160149054906101000a900460ff166121c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121bb906142b9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121fe57600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a8160405161226e9190613fdd565b60405180910390a150565b60008082905060008090508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156122ca57600080fd5b505afa1580156122de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123029190810190613a39565b503d6000811461231d57602081146123265760009150612332565b60009150612332565b60206000803e60005191505b508092505050919050565b60036020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160149054906101000a900460ff16156123d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c990614339565b60405180910390fd5b60008060008060006123e38f61181d565b9450945094509450945060488560ff16148015612403575060018460ff16145b61240c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612453578047101561244e57600080fd5b612512565b600061245e84612279565b905060098160ff16111561247b5760098160ff1603600a0a820291505b818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016124b59190613fdd565b60206040518083038186803b1580156124cd57600080fd5b505afa1580156124e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506125059190810190613a39565b101561251057600080fd5b505b6125248f8f8f8f8f8f8f8f8f8f612875565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156125a5578173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561259f573d6000803e3d6000fd5b50612645565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016125e092919061404a565b602060405180830381600087803b1580156125fa57600080fd5b505af115801561260e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061263291908101906136bc565b5061263b61273d565b61264457600080fd5b5b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb83838360405161267893929190614073565b60405180910390a1505050505050505050505050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600080600090503d6000811461275a57602081146127635761276f565b6001915061276f565b60206000803e60005191505b50600081141591505090565b612783612d52565b60008260008151811061279257fe5b602001015160f81c60f81b60f81c90506000836001815181106127b157fe5b602001015160f81c60f81b60f81c90506000846002815181106127d057fe5b602001015160f81c60f81b60f81c90506000806000602388015192506043880151915060638801519050612802612d52565b6040518060c001604052808860ff1681526020018760ff1681526020018660ff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815250905080975050505050505050919050565b60008a80519060200120905060008b8b60006002811061289157fe5b60200201516040516020016128a7929190613f9a565b60405160208183030381529060405280519060200120905060008c8c6001600281106128cf57fe5b60200201516040516020016128e5929190613f9a565b604051602081830303815290604052805190602001209050612906836116d3565b1561291057600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166001848f60006002811061295e57fe5b60200201518f60006002811061297057fe5b60200201518f60006002811061298257fe5b60200201518f60006002811061299457fe5b60200201518f6000600281106129a657fe5b60200201518f6000600281106129b857fe5b60200201518f6000600281106129ca57fe5b60200201518f6000600281106129dc57fe5b60200201518f6000600281106129ee57fe5b60200201516040518c63ffffffff1660e01b8152600401612a199b9a9998979695949392919061414e565b60206040518083038186803b158015612a3157600080fd5b505afa158015612a45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a6991908101906136bc565b612a7257600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166000838f600160028110612ac057fe5b60200201518f600160028110612ad257fe5b60200201518f600160028110612ae457fe5b60200201518f600160028110612af657fe5b60200201518f600160028110612b0857fe5b60200201518f600160028110612b1a57fe5b60200201518f600160028110612b2c57fe5b60200201518f600160028110612b3e57fe5b60200201518f600160028110612b5057fe5b60200201516040518c63ffffffff1660e01b8152600401612b7b9b9a9998979695949392919061414e565b60206040518083038186803b158015612b9357600080fd5b505afa158015612ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612bcb91908101906136bc565b612bd457600080fd5b60016003600085815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050505050505050505050565b6000612c1a85611604565b9050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612c575734810390505b83471015612c6457600080fd5b600060608373ffffffffffffffffffffffffffffffffffffffff168686604051612c8e9190613f83565b60006040518083038185875af1925050503d8060008114612ccb576040519150601f19603f3d011682016040523d82523d6000602084013e612cd0565b606091505b509150915081612cdf57600080fd5b60008082806020019051612cf6919081019061347f565b915091508873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148015612d3e57508085612d3b8b611604565b03145b612d4757600080fd5b505050505050505050565b6040518060c00160405280600060ff168152602001600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600081359050612dcc816148b6565b92915050565b600081359050612de1816148cd565b92915050565b600081519050612df6816148cd565b92915050565b600082601f830112612e0d57600080fd5b8135612e20612e1b8261442f565b614402565b91508181835260208401935060208101905083856020840282011115612e4557600080fd5b60005b83811015612e755781612e5b8882612dbd565b845260208401935060208301925050600181019050612e48565b5050505092915050565b600082601f830112612e9057600080fd5b6002612ea3612e9e82614457565b614402565b9150818360005b83811015612eda5781358601612ec08882613013565b845260208401935060208301925050600181019050612eaa565b5050505092915050565b600082601f830112612ef557600080fd5b6002612f08612f0382614479565b614402565b9150818360005b83811015612f3f5781358601612f25888261310a565b845260208401935060208301925050600181019050612f0f565b5050505092915050565b600082601f830112612f5a57600080fd5b6002612f6d612f688261449b565b614402565b9150818360005b83811015612fa45781358601612f8a8882613201565b845260208401935060208301925050600181019050612f74565b5050505092915050565b600082601f830112612fbf57600080fd5b6002612fd2612fcd826144bd565b614402565b9150818360005b838110156130095781358601612fef8882613284565b845260208401935060208301925050600181019050612fd9565b5050505092915050565b600082601f83011261302457600080fd5b8135613037613032826144df565b614402565b9150818183526020840193506020810190508385602084028201111561305c57600080fd5b60005b8381101561308c57816130728882613307565b84526020840193506020830192505060018101905061305f565b5050505092915050565b600082601f8301126130a757600080fd5b60026130ba6130b582614507565b614402565b915081838560208402820111156130d057600080fd5b60005b8381101561310057816130e68882613331565b8452602084019350602083019250506001810190506130d3565b5050505092915050565b600082601f83011261311b57600080fd5b813561312e61312982614529565b614402565b9150818183526020840193506020810190508385602084028201111561315357600080fd5b60005b8381101561318357816131698882613331565b845260208401935060208301925050600181019050613156565b5050505092915050565b600082601f83011261319e57600080fd5b60026131b16131ac82614551565b614402565b915081838560208402820111156131c757600080fd5b60005b838110156131f757816131dd88826133ee565b8452602084019350602083019250506001810190506131ca565b5050505092915050565b600082601f83011261321257600080fd5b813561322561322082614573565b614402565b9150818183526020840193506020810190508385602084028201111561324a57600080fd5b60005b8381101561327a578161326088826133ee565b84526020840193506020830192505060018101905061324d565b5050505092915050565b600082601f83011261329557600080fd5b81356132a86132a38261459b565b614402565b915081818352602084019350602081019050838560208402820111156132cd57600080fd5b60005b838110156132fd57816132e38882613418565b8452602084019350602083019250506001810190506132d0565b5050505092915050565b600081359050613316816148e4565b92915050565b60008151905061332b816148e4565b92915050565b600081359050613340816148fb565b92915050565b600082601f83011261335757600080fd5b813561336a613365826145c3565b614402565b9150808252602083016020830185838301111561338657600080fd5b613391838284614859565b50505092915050565b600082601f8301126133ab57600080fd5b81356133be6133b9826145ef565b614402565b915080825260208301602083018583830111156133da57600080fd5b6133e5838284614859565b50505092915050565b6000813590506133fd81614912565b92915050565b60008151905061341281614912565b92915050565b60008135905061342781614929565b92915050565b60006020828403121561343f57600080fd5b600061344d84828501612dbd565b91505092915050565b60006020828403121561346857600080fd5b600061347684828501612dd2565b91505092915050565b6000806040838503121561349257600080fd5b60006134a085828601612de7565b92505060206134b185828601613403565b9150509250929050565b600080604083850312156134ce57600080fd5b60006134dc85828601612dbd565b92505060206134ed85828601612dbd565b9150509250929050565b60008060006060848603121561350c57600080fd5b600061351a86828701612dbd565b935050602061352b86828701612dbd565b925050604061353c868287016133ee565b9150509250925092565b600080600080600080600060e0888a03121561356157600080fd5b600061356f8a828b01612dbd565b97505060206135808a828b016133ee565b96505060406135918a828b01612dbd565b95505060606135a28a828b01612dbd565b945050608088013567ffffffffffffffff8111156135bf57600080fd5b6135cb8a828b01613346565b93505060a06135dc8a828b01613331565b92505060c088013567ffffffffffffffff8111156135f957600080fd5b6136058a828b01613346565b91505092959891949750929550565b60008060006060848603121561362957600080fd5b600061363786828701612dbd565b9350506020613648868287016133ee565b925050604084013567ffffffffffffffff81111561366557600080fd5b6136718682870161339a565b9150509250925092565b60006020828403121561368d57600080fd5b600082013567ffffffffffffffff8111156136a757600080fd5b6136b384828501612dfc565b91505092915050565b6000602082840312156136ce57600080fd5b60006136dc8482850161331c565b91505092915050565b6000602082840312156136f757600080fd5b600061370584828501613331565b91505092915050565b60006020828403121561372057600080fd5b600082013567ffffffffffffffff81111561373a57600080fd5b61374684828501613346565b91505092915050565b6000806000806000806000806000806101a08b8d03121561376f57600080fd5b60008b013567ffffffffffffffff81111561378957600080fd5b6137958d828e01613346565b9a505060206137a68d828e0161318d565b99505060608b013567ffffffffffffffff8111156137c357600080fd5b6137cf8d828e01612ee4565b98505060808b013567ffffffffffffffff8111156137ec57600080fd5b6137f88d828e01612e7f565b97505060a06138098d828e01613096565b96505060e061381a8d828e01613096565b9550506101208b013567ffffffffffffffff81111561383857600080fd5b6138448d828e01612f49565b9450506101408b013567ffffffffffffffff81111561386257600080fd5b61386e8d828e01612fae565b9350506101608b013567ffffffffffffffff81111561388c57600080fd5b6138988d828e01612ee4565b9250506101808b013567ffffffffffffffff8111156138b657600080fd5b6138c28d828e01612ee4565b9150509295989b9194979a5092959850565b600080604083850312156138e757600080fd5b600083013567ffffffffffffffff81111561390157600080fd5b61390d85828601613346565b925050602061391e85828601613331565b9150509250929050565b60006020828403121561393a57600080fd5b600082013567ffffffffffffffff81111561395457600080fd5b6139608482850161339a565b91505092915050565b600080600080600060a0868803121561398157600080fd5b600086013567ffffffffffffffff81111561399b57600080fd5b6139a78882890161339a565b95505060206139b888828901612dbd565b94505060406139c9888289016133ee565b935050606086013567ffffffffffffffff8111156139e657600080fd5b6139f288828901613346565b9250506080613a0388828901613331565b9150509295509295909350565b600060208284031215613a2257600080fd5b6000613a30848285016133ee565b91505092915050565b600060208284031215613a4b57600080fd5b6000613a5984828501613403565b91505092915050565b6000613a6e8383613af8565b60208301905092915050565b6000613a868383613cec565b60208301905092915050565b6000613a9e8383613d0a565b60208301905092915050565b6000613ab68383613f30565b60208301905092915050565b6000613ace8383613f65565b60208301905092915050565b613ae3816147db565b82525050565b613af28161477c565b82525050565b613b018161476a565b82525050565b613b108161476a565b82525050565b6000613b218261466b565b613b2b81856146f9565b9350613b368361461b565b8060005b83811015613b67578151613b4e8882613a62565b9750613b59836146b8565b925050600181019050613b3a565b5085935050505092915050565b6000613b7f82614676565b613b89818561470a565b9350613b948361462b565b8060005b83811015613bc5578151613bac8882613a7a565b9750613bb7836146c5565b925050600181019050613b98565b5085935050505092915050565b6000613bdd82614681565b613be7818561471b565b9350613bf28361463b565b8060005b83811015613c23578151613c0a8882613a92565b9750613c15836146d2565b925050600181019050613bf6565b5085935050505092915050565b6000613c3b8261468c565b613c45818561472c565b9350613c508361464b565b8060005b83811015613c81578151613c688882613aaa565b9750613c73836146df565b925050600181019050613c54565b5085935050505092915050565b6000613c9982614697565b613ca3818561473d565b9350613cae8361465b565b8060005b83811015613cdf578151613cc68882613ac2565b9750613cd1836146ec565b925050600181019050613cb2565b5085935050505092915050565b613cf58161478e565b82525050565b613d048161478e565b82525050565b613d138161479a565b82525050565b613d228161479a565b82525050565b6000613d33826146a2565b613d3d818561474e565b9350613d4d818560208601614868565b80840191505092915050565b613d62816147ed565b82525050565b613d7181614811565b82525050565b6000613d82826146ad565b613d8c8185614759565b9350613d9c818560208601614868565b613da5816148a5565b840191505092915050565b6000613dbd601483614759565b91507f6e6f7420706175736564207269676874206e6f770000000000000000000000006000830152602082019050919050565b6000613dfd600783614759565b91507f65787069726564000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613e3d601a83614759565b91507f63616e6e6f7420657874656e6420666f7220746f6f206c6f6e670000000000006000830152602082019050919050565b6000613e7d600c83614759565b91507f756e617574686f72697a656400000000000000000000000000000000000000006000830152602082019050919050565b6000613ebd601083614759565b91507f706175736564207269676874206e6f77000000000000000000000000000000006000830152602082019050919050565b6000613efd600983614759565b91507f6e6f742061646d696e00000000000000000000000000000000000000000000006000830152602082019050919050565b613f39816147c4565b82525050565b613f48816147c4565b82525050565b613f5f613f5a826147c4565b61489b565b82525050565b613f6e816147ce565b82525050565b613f7d816147ce565b82525050565b6000613f8f8284613d28565b915081905092915050565b6000613fa68285613d28565b9150613fb28284613f4e565b6020820191508190509392505050565b6000602082019050613fd76000830184613b07565b92915050565b6000602082019050613ff26000830184613ada565b92915050565b600060208201905061400d6000830184613ae9565b92915050565b60006060820190506140286000830186613ada565b6140356020830185613ada565b6140426040830184613f3f565b949350505050565b600060408201905061405f6000830185613ada565b61406c6020830184613f3f565b9392505050565b60006060820190506140886000830186613b07565b6140956020830185613ada565b6140a26040830184613f3f565b949350505050565b60006060820190506140bf6000830186613b07565b81810360208301526140d18185613d77565b90506140e06040830184613f3f565b949350505050565b60006040820190506140fd6000830185613b07565b61410a6020830184613f3f565b9392505050565b6000602082019050818103600083015261412b8184613b16565b905092915050565b60006020820190506141486000830184613cfb565b92915050565b600061016082019050614164600083018e613cfb565b614171602083018d613d19565b61417e604083018c613f3f565b8181036060830152614190818b613bd2565b905081810360808301526141a4818a613b74565b90506141b360a0830189613d19565b6141c060c0830188613d19565b81810360e08301526141d28187613c30565b90508181036101008301526141e78186613c8e565b90508181036101208301526141fc8185613bd2565b90508181036101408301526142118184613bd2565b90509c9b505050505050505050505050565b60006020820190506142386000830184613d19565b92915050565b60006080820190506142536000830187613d19565b6142606020830186613f74565b61426d6040830185613d19565b61427a6060830184613d19565b95945050505050565b60006020820190506142986000830184613d59565b92915050565b60006020820190506142b36000830184613d68565b92915050565b600060208201905081810360008301526142d281613db0565b9050919050565b600060208201905081810360008301526142f281613df0565b9050919050565b6000602082019050818103600083015261431281613e30565b9050919050565b6000602082019050818103600083015261433281613e70565b9050919050565b6000602082019050818103600083015261435281613eb0565b9050919050565b6000602082019050818103600083015261437281613ef0565b9050919050565b600060208201905061438e6000830184613f3f565b92915050565b60006020820190506143a96000830184613f74565b92915050565b600060a0820190506143c46000830188613f74565b6143d16020830187613f74565b6143de6040830186613b07565b6143eb6060830185613ae9565b6143f86080830184613f3f565b9695505050505050565b6000604051905081810181811067ffffffffffffffff8211171561442557600080fd5b8060405250919050565b600067ffffffffffffffff82111561444657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561446e57600080fd5b602082029050919050565b600067ffffffffffffffff82111561449057600080fd5b602082029050919050565b600067ffffffffffffffff8211156144b257600080fd5b602082029050919050565b600067ffffffffffffffff8211156144d457600080fd5b602082029050919050565b600067ffffffffffffffff8211156144f657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561451e57600080fd5b602082029050919050565b600067ffffffffffffffff82111561454057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561456857600080fd5b602082029050919050565b600067ffffffffffffffff82111561458a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156145b257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156145da57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561460657600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000614775826147a4565b9050919050565b6000614787826147a4565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006147e682614835565b9050919050565b60006147f8826147ff565b9050919050565b600061480a826147a4565b9050919050565b600061481c82614823565b9050919050565b600061482e826147a4565b9050919050565b600061484082614847565b9050919050565b6000614852826147a4565b9050919050565b82818337600083830152505050565b60005b8381101561488657808201518184015260208101905061486b565b83811115614895576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b6148bf8161476a565b81146148ca57600080fd5b50565b6148d68161477c565b81146148e157600080fd5b50565b6148ed8161478e565b81146148f857600080fd5b50565b6149048161479a565b811461490f57600080fd5b50565b61491b816147c4565b811461492657600080fd5b50565b614932816147ce565b811461493d57600080fd5b5056fea365627a7a72315820aad0ccde6b2357c938ffcf8375c46649b34aae598c618c522be4a7213103ed506c6578706572696d656e74616cf564736f6c63430005100040"

// DeployIncmode deploys a new Ethereum contract, binding an instance of Incmode to it.
func DeployIncmode(auth *bind.TransactOpts, backend bind.ContractBackend, admin common.Address, incognitoProxyAddress common.Address, _prevVault common.Address) (common.Address, *types.Transaction, *Incmode, error) {
	parsed, err := abi.JSON(strings.NewReader(IncmodeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IncmodeBin), backend, admin, incognitoProxyAddress, _prevVault)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Incmode{IncmodeCaller: IncmodeCaller{contract: contract}, IncmodeTransactor: IncmodeTransactor{contract: contract}, IncmodeFilterer: IncmodeFilterer{contract: contract}}, nil
}

// Incmode is an auto generated Go binding around an Ethereum contract.
type Incmode struct {
	IncmodeCaller     // Read-only binding to the contract
	IncmodeTransactor // Write-only binding to the contract
	IncmodeFilterer   // Log filterer for contract events
}

// IncmodeCaller is an auto generated read-only Go binding around an Ethereum contract.
type IncmodeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IncmodeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IncmodeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IncmodeSession struct {
	Contract     *Incmode          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IncmodeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IncmodeCallerSession struct {
	Contract *IncmodeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IncmodeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IncmodeTransactorSession struct {
	Contract     *IncmodeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IncmodeRaw is an auto generated low-level Go binding around an Ethereum contract.
type IncmodeRaw struct {
	Contract *Incmode // Generic contract binding to access the raw methods on
}

// IncmodeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IncmodeCallerRaw struct {
	Contract *IncmodeCaller // Generic read-only contract binding to access the raw methods on
}

// IncmodeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IncmodeTransactorRaw struct {
	Contract *IncmodeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIncmode creates a new instance of Incmode, bound to a specific deployed contract.
func NewIncmode(address common.Address, backend bind.ContractBackend) (*Incmode, error) {
	contract, err := bindIncmode(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Incmode{IncmodeCaller: IncmodeCaller{contract: contract}, IncmodeTransactor: IncmodeTransactor{contract: contract}, IncmodeFilterer: IncmodeFilterer{contract: contract}}, nil
}

// NewIncmodeCaller creates a new read-only instance of Incmode, bound to a specific deployed contract.
func NewIncmodeCaller(address common.Address, caller bind.ContractCaller) (*IncmodeCaller, error) {
	contract, err := bindIncmode(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IncmodeCaller{contract: contract}, nil
}

// NewIncmodeTransactor creates a new write-only instance of Incmode, bound to a specific deployed contract.
func NewIncmodeTransactor(address common.Address, transactor bind.ContractTransactor) (*IncmodeTransactor, error) {
	contract, err := bindIncmode(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IncmodeTransactor{contract: contract}, nil
}

// NewIncmodeFilterer creates a new log filterer instance of Incmode, bound to a specific deployed contract.
func NewIncmodeFilterer(address common.Address, filterer bind.ContractFilterer) (*IncmodeFilterer, error) {
	contract, err := bindIncmode(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IncmodeFilterer{contract: contract}, nil
}

// bindIncmode binds a generic wrapper to an already deployed contract.
func bindIncmode(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IncmodeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incmode *IncmodeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Incmode.Contract.IncmodeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incmode *IncmodeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.Contract.IncmodeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incmode *IncmodeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incmode.Contract.IncmodeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incmode *IncmodeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Incmode.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incmode *IncmodeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incmode *IncmodeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incmode.Contract.contract.Transact(opts, method, params...)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeCaller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "ETH_TOKEN")
	return *ret0, err
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeSession) ETHTOKEN() (common.Address, error) {
	return _Incmode.Contract.ETHTOKEN(&_Incmode.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeCallerSession) ETHTOKEN() (common.Address, error) {
	return _Incmode.Contract.ETHTOKEN(&_Incmode.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "admin")
	return *ret0, err
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeSession) Admin() (common.Address, error) {
	return _Incmode.Contract.Admin(&_Incmode.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeCallerSession) Admin() (common.Address, error) {
	return _Incmode.Contract.Admin(&_Incmode.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) constant returns(uint256)
func (_Incmode *IncmodeCaller) BalanceOf(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "balanceOf", token)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) constant returns(uint256)
func (_Incmode *IncmodeSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Incmode.Contract.BalanceOf(&_Incmode.CallOpts, token)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) constant returns(uint256)
func (_Incmode *IncmodeCallerSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Incmode.Contract.BalanceOf(&_Incmode.CallOpts, token)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeCaller) Expire(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "expire")
	return *ret0, err
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeSession) Expire() (*big.Int, error) {
	return _Incmode.Contract.Expire(&_Incmode.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeCallerSession) Expire() (*big.Int, error) {
	return _Incmode.Contract.Expire(&_Incmode.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeCaller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "getDecimals", token)
	return *ret0, err
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeSession) GetDecimals(token common.Address) (uint8, error) {
	return _Incmode.Contract.GetDecimals(&_Incmode.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeCallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _Incmode.Contract.GetDecimals(&_Incmode.CallOpts, token)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeCaller) Incognito(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "incognito")
	return *ret0, err
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeSession) Incognito() (common.Address, error) {
	return _Incmode.Contract.Incognito(&_Incmode.CallOpts)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeCallerSession) Incognito() (common.Address, error) {
	return _Incmode.Contract.Incognito(&_Incmode.CallOpts)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeCaller) IsWithdrawed(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "isWithdrawed", hash)
	return *ret0, err
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Incmode.Contract.IsWithdrawed(&_Incmode.CallOpts, hash)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeCallerSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Incmode.Contract.IsWithdrawed(&_Incmode.CallOpts, hash)
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeCaller) NewVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "newVault")
	return *ret0, err
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeSession) NewVault() (common.Address, error) {
	return _Incmode.Contract.NewVault(&_Incmode.CallOpts)
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeCallerSession) NewVault() (common.Address, error) {
	return _Incmode.Contract.NewVault(&_Incmode.CallOpts)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeCaller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (uint8, uint8, common.Address, common.Address, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(common.Address)
		ret3 = new(common.Address)
		ret4 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
	}
	err := _Incmode.contract.Call(opts, out, "parseBurnInst", inst)
	return *ret0, *ret1, *ret2, *ret3, *ret4, err
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeSession) ParseBurnInst(inst []byte) (uint8, uint8, common.Address, common.Address, *big.Int, error) {
	return _Incmode.Contract.ParseBurnInst(&_Incmode.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeCallerSession) ParseBurnInst(inst []byte) (uint8, uint8, common.Address, common.Address, *big.Int, error) {
	return _Incmode.Contract.ParseBurnInst(&_Incmode.CallOpts, inst)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeSession) Paused() (bool, error) {
	return _Incmode.Contract.Paused(&_Incmode.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeCallerSession) Paused() (bool, error) {
	return _Incmode.Contract.Paused(&_Incmode.CallOpts)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeCaller) PrevVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "prevVault")
	return *ret0, err
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeSession) PrevVault() (common.Address, error) {
	return _Incmode.Contract.PrevVault(&_Incmode.CallOpts)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeCallerSession) PrevVault() (common.Address, error) {
	return _Incmode.Contract.PrevVault(&_Incmode.CallOpts)
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) constant returns(address)
func (_Incmode *IncmodeCaller) SigToAddress(opts *bind.CallOpts, signData []byte, hash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "sigToAddress", signData, hash)
	return *ret0, err
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) constant returns(address)
func (_Incmode *IncmodeSession) SigToAddress(signData []byte, hash [32]byte) (common.Address, error) {
	return _Incmode.Contract.SigToAddress(&_Incmode.CallOpts, signData, hash)
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) constant returns(address)
func (_Incmode *IncmodeCallerSession) SigToAddress(signData []byte, hash [32]byte) (common.Address, error) {
	return _Incmode.Contract.SigToAddress(&_Incmode.CallOpts, signData, hash)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeCaller) Successor(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "successor")
	return *ret0, err
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeSession) Successor() (common.Address, error) {
	return _Incmode.Contract.Successor(&_Incmode.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeCallerSession) Successor() (common.Address, error) {
	return _Incmode.Contract.Successor(&_Incmode.CallOpts)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeCaller) WithdrawRequests(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "withdrawRequests", arg0, arg1)
	return *ret0, err
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Incmode.Contract.WithdrawRequests(&_Incmode.CallOpts, arg0, arg1)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeCallerSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Incmode.Contract.WithdrawRequests(&_Incmode.CallOpts, arg0, arg1)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeCaller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "withdrawed", arg0)
	return *ret0, err
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Incmode.Contract.Withdrawed(&_Incmode.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeCallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Incmode.Contract.Withdrawed(&_Incmode.CallOpts, arg0)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeTransactor) Claim(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "claim")
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeSession) Claim() (*types.Transaction, error) {
	return _Incmode.Contract.Claim(&_Incmode.TransactOpts)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeTransactorSession) Claim() (*types.Transaction, error) {
	return _Incmode.Contract.Claim(&_Incmode.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeTransactor) Deposit(opts *bind.TransactOpts, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "deposit", incognitoAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeSession) Deposit(incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.Deposit(&_Incmode.TransactOpts, incognitoAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeTransactorSession) Deposit(incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.Deposit(&_Incmode.TransactOpts, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeTransactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "depositERC20", token, amount, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.DepositERC20(&_Incmode.TransactOpts, token, amount, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeTransactorSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.DepositERC20(&_Incmode.TransactOpts, token, amount, incognitoAddress)
}

// Execute is a paid mutator transaction binding the contract method 0xa0c0f9b8.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes32 hash, bytes signData) returns()
func (_Incmode *IncmodeTransactor) Execute(opts *bind.TransactOpts, token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, hash [32]byte, signData []byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "execute", token, amount, recipientToken, exchangeAddress, callData, hash, signData)
}

// Execute is a paid mutator transaction binding the contract method 0xa0c0f9b8.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes32 hash, bytes signData) returns()
func (_Incmode *IncmodeSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, hash [32]byte, signData []byte) (*types.Transaction, error) {
	return _Incmode.Contract.Execute(&_Incmode.TransactOpts, token, amount, recipientToken, exchangeAddress, callData, hash, signData)
}

// Execute is a paid mutator transaction binding the contract method 0xa0c0f9b8.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes32 hash, bytes signData) returns()
func (_Incmode *IncmodeTransactorSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, hash [32]byte, signData []byte) (*types.Transaction, error) {
	return _Incmode.Contract.Execute(&_Incmode.TransactOpts, token, amount, recipientToken, exchangeAddress, callData, hash, signData)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeTransactor) Extend(opts *bind.TransactOpts, n *big.Int) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "extend", n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.Extend(&_Incmode.TransactOpts, n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeTransactorSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.Extend(&_Incmode.TransactOpts, n)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeTransactor) Migrate(opts *bind.TransactOpts, _newVault common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "migrate", _newVault)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeSession) Migrate(_newVault common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Migrate(&_Incmode.TransactOpts, _newVault)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeTransactorSession) Migrate(_newVault common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Migrate(&_Incmode.TransactOpts, _newVault)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeTransactor) MoveAssets(opts *bind.TransactOpts, assets []common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "moveAssets", assets)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeSession) MoveAssets(assets []common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.MoveAssets(&_Incmode.TransactOpts, assets)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeTransactorSession) MoveAssets(assets []common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.MoveAssets(&_Incmode.TransactOpts, assets)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeSession) Pause() (*types.Transaction, error) {
	return _Incmode.Contract.Pause(&_Incmode.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeTransactorSession) Pause() (*types.Transaction, error) {
	return _Incmode.Contract.Pause(&_Incmode.TransactOpts)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x5654b6c8.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes32 hash) returns()
func (_Incmode *IncmodeTransactor) RequestWithdraw(opts *bind.TransactOpts, incognitoAddress string, token common.Address, amount *big.Int, signData []byte, hash [32]byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "requestWithdraw", incognitoAddress, token, amount, signData, hash)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x5654b6c8.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes32 hash) returns()
func (_Incmode *IncmodeSession) RequestWithdraw(incognitoAddress string, token common.Address, amount *big.Int, signData []byte, hash [32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.RequestWithdraw(&_Incmode.TransactOpts, incognitoAddress, token, amount, signData, hash)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x5654b6c8.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes32 hash) returns()
func (_Incmode *IncmodeTransactorSession) RequestWithdraw(incognitoAddress string, token common.Address, amount *big.Int, signData []byte, hash [32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.RequestWithdraw(&_Incmode.TransactOpts, incognitoAddress, token, amount, signData, hash)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeTransactor) Retire(opts *bind.TransactOpts, _successor common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "retire", _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeSession) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Retire(&_Incmode.TransactOpts, _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeTransactorSession) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Retire(&_Incmode.TransactOpts, _successor)
}

// SetAmount is a paid mutator transaction binding the contract method 0xfaf7f494.
//
// Solidity: function setAmount(address verifier, address sellToken, uint256 amount) returns()
func (_Incmode *IncmodeTransactor) SetAmount(opts *bind.TransactOpts, verifier common.Address, sellToken common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "setAmount", verifier, sellToken, amount)
}

// SetAmount is a paid mutator transaction binding the contract method 0xfaf7f494.
//
// Solidity: function setAmount(address verifier, address sellToken, uint256 amount) returns()
func (_Incmode *IncmodeSession) SetAmount(verifier common.Address, sellToken common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.SetAmount(&_Incmode.TransactOpts, verifier, sellToken, amount)
}

// SetAmount is a paid mutator transaction binding the contract method 0xfaf7f494.
//
// Solidity: function setAmount(address verifier, address sellToken, uint256 amount) returns()
func (_Incmode *IncmodeTransactorSession) SetAmount(verifier common.Address, sellToken common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.SetAmount(&_Incmode.TransactOpts, verifier, sellToken, amount)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactor) SubmitBurnProof(opts *bind.TransactOpts, inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "submitBurnProof", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeSession) SubmitBurnProof(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.SubmitBurnProof(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactorSession) SubmitBurnProof(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.SubmitBurnProof(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeSession) Unpause() (*types.Transaction, error) {
	return _Incmode.Contract.Unpause(&_Incmode.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeTransactorSession) Unpause() (*types.Transaction, error) {
	return _Incmode.Contract.Unpause(&_Incmode.TransactOpts)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeTransactor) UpdateIncognitoProxy(opts *bind.TransactOpts, newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "updateIncognitoProxy", newIncognitoProxy)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeSession) UpdateIncognitoProxy(newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.UpdateIncognitoProxy(&_Incmode.TransactOpts, newIncognitoProxy)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeTransactorSession) UpdateIncognitoProxy(newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.UpdateIncognitoProxy(&_Incmode.TransactOpts, newIncognitoProxy)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactor) Withdraw(opts *bind.TransactOpts, inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "withdraw", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeSession) Withdraw(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.Withdraw(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactorSession) Withdraw(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.Withdraw(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// IncmodeClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the Incmode contract.
type IncmodeClaimIterator struct {
	Event *IncmodeClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeClaim represents a Claim event raised by the Incmode contract.
type IncmodeClaim struct {
	Claimer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Incmode *IncmodeFilterer) FilterClaim(opts *bind.FilterOpts) (*IncmodeClaimIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return &IncmodeClaimIterator{contract: _Incmode.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Incmode *IncmodeFilterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *IncmodeClaim) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeClaim)
				if err := _Incmode.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaim is a log parse operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Incmode *IncmodeFilterer) ParseClaim(log types.Log) (*IncmodeClaim, error) {
	event := new(IncmodeClaim)
	if err := _Incmode.contract.UnpackLog(event, "Claim", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Incmode contract.
type IncmodeDepositIterator struct {
	Event *IncmodeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeDeposit represents a Deposit event raised by the Incmode contract.
type IncmodeDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterDeposit(opts *bind.FilterOpts) (*IncmodeDepositIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &IncmodeDepositIterator{contract: _Incmode.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *IncmodeDeposit) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeDeposit)
				if err := _Incmode.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) ParseDeposit(log types.Log) (*IncmodeDeposit, error) {
	event := new(IncmodeDeposit)
	if err := _Incmode.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeExtendIterator is returned from FilterExtend and is used to iterate over the raw logs and unpacked data for Extend events raised by the Incmode contract.
type IncmodeExtendIterator struct {
	Event *IncmodeExtend // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeExtendIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeExtend)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeExtend)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeExtendIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeExtendIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeExtend represents a Extend event raised by the Incmode contract.
type IncmodeExtend struct {
	Ndays *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterExtend is a free log retrieval operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Incmode *IncmodeFilterer) FilterExtend(opts *bind.FilterOpts) (*IncmodeExtendIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return &IncmodeExtendIterator{contract: _Incmode.contract, event: "Extend", logs: logs, sub: sub}, nil
}

// WatchExtend is a free log subscription operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Incmode *IncmodeFilterer) WatchExtend(opts *bind.WatchOpts, sink chan<- *IncmodeExtend) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeExtend)
				if err := _Incmode.contract.UnpackLog(event, "Extend", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExtend is a log parse operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Incmode *IncmodeFilterer) ParseExtend(log types.Log) (*IncmodeExtend, error) {
	event := new(IncmodeExtend)
	if err := _Incmode.contract.UnpackLog(event, "Extend", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeMigrateIterator is returned from FilterMigrate and is used to iterate over the raw logs and unpacked data for Migrate events raised by the Incmode contract.
type IncmodeMigrateIterator struct {
	Event *IncmodeMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeMigrate represents a Migrate event raised by the Incmode contract.
type IncmodeMigrate struct {
	NewVault common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMigrate is a free log retrieval operation binding the contract event 0xd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a.
//
// Solidity: event Migrate(address newVault)
func (_Incmode *IncmodeFilterer) FilterMigrate(opts *bind.FilterOpts) (*IncmodeMigrateIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return &IncmodeMigrateIterator{contract: _Incmode.contract, event: "Migrate", logs: logs, sub: sub}, nil
}

// WatchMigrate is a free log subscription operation binding the contract event 0xd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a.
//
// Solidity: event Migrate(address newVault)
func (_Incmode *IncmodeFilterer) WatchMigrate(opts *bind.WatchOpts, sink chan<- *IncmodeMigrate) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeMigrate)
				if err := _Incmode.contract.UnpackLog(event, "Migrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMigrate is a log parse operation binding the contract event 0xd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a.
//
// Solidity: event Migrate(address newVault)
func (_Incmode *IncmodeFilterer) ParseMigrate(log types.Log) (*IncmodeMigrate, error) {
	event := new(IncmodeMigrate)
	if err := _Incmode.contract.UnpackLog(event, "Migrate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeMoveAssetsIterator is returned from FilterMoveAssets and is used to iterate over the raw logs and unpacked data for MoveAssets events raised by the Incmode contract.
type IncmodeMoveAssetsIterator struct {
	Event *IncmodeMoveAssets // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeMoveAssetsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeMoveAssets)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeMoveAssets)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeMoveAssetsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeMoveAssetsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeMoveAssets represents a MoveAssets event raised by the Incmode contract.
type IncmodeMoveAssets struct {
	Assets []common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMoveAssets is a free log retrieval operation binding the contract event 0x492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce658.
//
// Solidity: event MoveAssets(address[] assets)
func (_Incmode *IncmodeFilterer) FilterMoveAssets(opts *bind.FilterOpts) (*IncmodeMoveAssetsIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "MoveAssets")
	if err != nil {
		return nil, err
	}
	return &IncmodeMoveAssetsIterator{contract: _Incmode.contract, event: "MoveAssets", logs: logs, sub: sub}, nil
}

// WatchMoveAssets is a free log subscription operation binding the contract event 0x492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce658.
//
// Solidity: event MoveAssets(address[] assets)
func (_Incmode *IncmodeFilterer) WatchMoveAssets(opts *bind.WatchOpts, sink chan<- *IncmodeMoveAssets) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "MoveAssets")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeMoveAssets)
				if err := _Incmode.contract.UnpackLog(event, "MoveAssets", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMoveAssets is a log parse operation binding the contract event 0x492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce658.
//
// Solidity: event MoveAssets(address[] assets)
func (_Incmode *IncmodeFilterer) ParseMoveAssets(log types.Log) (*IncmodeMoveAssets, error) {
	event := new(IncmodeMoveAssets)
	if err := _Incmode.contract.UnpackLog(event, "MoveAssets", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Incmode contract.
type IncmodePausedIterator struct {
	Event *IncmodePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodePaused represents a Paused event raised by the Incmode contract.
type IncmodePaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Incmode *IncmodeFilterer) FilterPaused(opts *bind.FilterOpts) (*IncmodePausedIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &IncmodePausedIterator{contract: _Incmode.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Incmode *IncmodeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *IncmodePaused) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodePaused)
				if err := _Incmode.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Incmode *IncmodeFilterer) ParsePaused(log types.Log) (*IncmodePaused, error) {
	event := new(IncmodePaused)
	if err := _Incmode.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeTradeIterator is returned from FilterTrade and is used to iterate over the raw logs and unpacked data for Trade events raised by the Incmode contract.
type IncmodeTradeIterator struct {
	Event *IncmodeTrade // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeTradeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeTrade)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeTrade)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeTradeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeTradeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeTrade represents a Trade event raised by the Incmode contract.
type IncmodeTrade struct {
	IncognitoAddress string
	Token            common.Address
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterTrade is a free log retrieval operation binding the contract event 0x68ae6030d8e5a42e79b7dd481f18c425a779d1b6816487681116ffca8356ac49.
//
// Solidity: event Trade(string incognitoAddress, address token, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterTrade(opts *bind.FilterOpts) (*IncmodeTradeIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Trade")
	if err != nil {
		return nil, err
	}
	return &IncmodeTradeIterator{contract: _Incmode.contract, event: "Trade", logs: logs, sub: sub}, nil
}

// WatchTrade is a free log subscription operation binding the contract event 0x68ae6030d8e5a42e79b7dd481f18c425a779d1b6816487681116ffca8356ac49.
//
// Solidity: event Trade(string incognitoAddress, address token, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchTrade(opts *bind.WatchOpts, sink chan<- *IncmodeTrade) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Trade")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeTrade)
				if err := _Incmode.contract.UnpackLog(event, "Trade", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrade is a log parse operation binding the contract event 0x68ae6030d8e5a42e79b7dd481f18c425a779d1b6816487681116ffca8356ac49.
//
// Solidity: event Trade(string incognitoAddress, address token, uint256 amount)
func (_Incmode *IncmodeFilterer) ParseTrade(log types.Log) (*IncmodeTrade, error) {
	event := new(IncmodeTrade)
	if err := _Incmode.contract.UnpackLog(event, "Trade", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Incmode contract.
type IncmodeUnpausedIterator struct {
	Event *IncmodeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeUnpaused represents a Unpaused event raised by the Incmode contract.
type IncmodeUnpaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Incmode *IncmodeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*IncmodeUnpausedIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &IncmodeUnpausedIterator{contract: _Incmode.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Incmode *IncmodeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *IncmodeUnpaused) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeUnpaused)
				if err := _Incmode.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Incmode *IncmodeFilterer) ParseUnpaused(log types.Log) (*IncmodeUnpaused, error) {
	event := new(IncmodeUnpaused)
	if err := _Incmode.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeUpdateIncognitoProxyIterator is returned from FilterUpdateIncognitoProxy and is used to iterate over the raw logs and unpacked data for UpdateIncognitoProxy events raised by the Incmode contract.
type IncmodeUpdateIncognitoProxyIterator struct {
	Event *IncmodeUpdateIncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeUpdateIncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeUpdateIncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeUpdateIncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeUpdateIncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeUpdateIncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeUpdateIncognitoProxy represents a UpdateIncognitoProxy event raised by the Incmode contract.
type IncmodeUpdateIncognitoProxy struct {
	NewIncognitoProxy common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUpdateIncognitoProxy is a free log retrieval operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Incmode *IncmodeFilterer) FilterUpdateIncognitoProxy(opts *bind.FilterOpts) (*IncmodeUpdateIncognitoProxyIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &IncmodeUpdateIncognitoProxyIterator{contract: _Incmode.contract, event: "UpdateIncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchUpdateIncognitoProxy is a free log subscription operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Incmode *IncmodeFilterer) WatchUpdateIncognitoProxy(opts *bind.WatchOpts, sink chan<- *IncmodeUpdateIncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeUpdateIncognitoProxy)
				if err := _Incmode.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateIncognitoProxy is a log parse operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Incmode *IncmodeFilterer) ParseUpdateIncognitoProxy(log types.Log) (*IncmodeUpdateIncognitoProxy, error) {
	event := new(IncmodeUpdateIncognitoProxy)
	if err := _Incmode.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Incmode contract.
type IncmodeWithdrawIterator struct {
	Event *IncmodeWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeWithdraw represents a Withdraw event raised by the Incmode contract.
type IncmodeWithdraw struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterWithdraw(opts *bind.FilterOpts) (*IncmodeWithdrawIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &IncmodeWithdrawIterator{contract: _Incmode.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *IncmodeWithdraw) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeWithdraw)
				if err := _Incmode.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Incmode *IncmodeFilterer) ParseWithdraw(log types.Log) (*IncmodeWithdraw, error) {
	event := new(IncmodeWithdraw)
	if err := _Incmode.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeWithdrawRequestIterator is returned from FilterWithdrawRequest and is used to iterate over the raw logs and unpacked data for WithdrawRequest events raised by the Incmode contract.
type IncmodeWithdrawRequestIterator struct {
	Event *IncmodeWithdrawRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeWithdrawRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeWithdrawRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeWithdrawRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeWithdrawRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeWithdrawRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeWithdrawRequest represents a WithdrawRequest event raised by the Incmode contract.
type IncmodeWithdrawRequest struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterWithdrawRequest is a free log retrieval operation binding the contract event 0x392a40e1ff76f04543dc851cc0c7ad40bb9db5d3f672f27d1aa3e5c089533af5.
//
// Solidity: event WithdrawRequest(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterWithdrawRequest(opts *bind.FilterOpts) (*IncmodeWithdrawRequestIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "WithdrawRequest")
	if err != nil {
		return nil, err
	}
	return &IncmodeWithdrawRequestIterator{contract: _Incmode.contract, event: "WithdrawRequest", logs: logs, sub: sub}, nil
}

// WatchWithdrawRequest is a free log subscription operation binding the contract event 0x392a40e1ff76f04543dc851cc0c7ad40bb9db5d3f672f27d1aa3e5c089533af5.
//
// Solidity: event WithdrawRequest(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchWithdrawRequest(opts *bind.WatchOpts, sink chan<- *IncmodeWithdrawRequest) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "WithdrawRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeWithdrawRequest)
				if err := _Incmode.contract.UnpackLog(event, "WithdrawRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawRequest is a log parse operation binding the contract event 0x392a40e1ff76f04543dc851cc0c7ad40bb9db5d3f672f27d1aa3e5c089533af5.
//
// Solidity: event WithdrawRequest(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) ParseWithdrawRequest(log types.Log) (*IncmodeWithdrawRequest, error) {
	event := new(IncmodeWithdrawRequest)
	if err := _Incmode.contract.UnpackLog(event, "WithdrawRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}
