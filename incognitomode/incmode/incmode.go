// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package incmode

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IncmodeABI is the input ABI used to generate the binding from.
const IncmodeABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incognitoProxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prevVault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ndays\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"MoveAssets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"UpdateIncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incognito\",\"outputs\":[{\"internalType\":\"contractIncognito\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newVault\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevVault\",\"outputs\":[{\"internalType\":\"contractWithdrawable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_successor\",\"type\":\"address\"}],\"name\":\"retire\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"successor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"}],\"name\":\"depositERC20\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"heights\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"instPaths\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bool[][2]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[][2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"instRoots\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"blkData\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256[][2]\",\"name\":\"sigIdxs\",\"type\":\"uint256[][2]\"},{\"internalType\":\"uint8[][2]\",\"name\":\"sigVs\",\"type\":\"uint8[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigRs\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigSs\",\"type\":\"bytes32[][2]\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"heights\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"instPaths\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bool[][2]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[][2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"instRoots\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"blkData\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256[][2]\",\"name\":\"sigIdxs\",\"type\":\"uint256[][2]\"},{\"internalType\":\"uint8[][2]\",\"name\":\"sigVs\",\"type\":\"uint8[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigRs\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigSs\",\"type\":\"bytes32[][2]\"}],\"name\":\"submitBurnProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_newVault\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"moveAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"updateIncognitoProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IncmodeBin is the compiled bytecode used for deploying new contracts.
const IncmodeBin = `0x60806040523480156200001157600080fd5b506040516200479c3803806200479c833981810160405262000037919081019062000185565b82806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083151502179055506301e1338042016002819055505081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000229565b6000815190506200017f816200020f565b92915050565b6000806000606084860312156200019b57600080fd5b6000620001ab868287016200016e565b9350506020620001be868287016200016e565b9250506040620001d1868287016200016e565b9150509250925092565b6000620001e882620001ef565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200021a81620001db565b81146200022657600080fd5b50565b61456380620002396000396000f3fe6080604052600436106101b75760003560e01c80638456cb59116100ec578063cf54aaa01161008a578063ef074bd511610064578063ef074bd5146105bc578063f851a440146105e5578063f8b3974514610610578063fa84702e14610639576101b7565b8063cf54aaa014610526578063dca40d9e14610563578063e7edbc02146105a0576101b7565b80639714378c116100c65780639714378c1461048f5780639e6371ba146104b8578063a26e1186146104e1578063ce5494bb146104fd576101b7565b80638456cb591461042257806388aaf0c8146104395780638a98453814610464576101b7565b80635c975abb1161015957806370a082311161013357806370a082311461033c578063749c5f861461037957806379599f96146103b65780637e16e6e1146103e1576101b7565b80635c975abb146102a957806365b5a00f146102d45780636ff968c314610311576101b7565b80633f4ba83a116101955780633f4ba83a146102345780634e71d92d1461024b57806358bc8337146102625780635a67cb871461028d576101b7565b80630c4f5039146101b95780633a51913d146101e25780633cb4b58a1461020b575b005b3480156101c557600080fd5b506101e060048036036101db919081019061339b565b610664565b005b3480156101ee57600080fd5b5061020960048036036102049190810190613174565b610a42565b005b34801561021757600080fd5b50610232600480360361022d919081019061346f565b610bd5565b005b34801561024057600080fd5b50610249610e29565b005b34801561025757600080fd5b50610260610f5b565b005b34801561026e57600080fd5b506102776110eb565b6040516102849190613be7565b60405180910390f35b6102a760048036036102a29190810190613334565b6110f0565b005b3480156102b557600080fd5b506102be61133f565b6040516102cb9190613d58565b60405180910390f35b3480156102e057600080fd5b506102fb60048036036102f69190810190613202565b611352565b6040516103089190613f59565b60405180910390f35b34801561031d57600080fd5b50610326611377565b6040516103339190613be7565b60405180910390f35b34801561034857600080fd5b50610363600480360361035e9190810190613174565b61139d565b6040516103709190613f59565b60405180910390f35b34801561038557600080fd5b506103a0600480360361039b9190810190613405565b611483565b6040516103ad9190613d58565b60405180910390f35b3480156103c257600080fd5b506103cb6115c7565b6040516103d89190613f59565b60405180910390f35b3480156103ed57600080fd5b506104086004803603610403919081019061342e565b6115cd565b604051610419959493929190613f8f565b60405180910390f35b34801561042e57600080fd5b50610437611649565b005b34801561044557600080fd5b5061044e6117bf565b60405161045b9190613c1d565b60405180910390f35b34801561047057600080fd5b506104796117e5565b6040516104869190613e63565b60405180910390f35b34801561049b57600080fd5b506104b660048036036104b19190810190613635565b61180b565b005b3480156104c457600080fd5b506104df60048036036104da9190810190613174565b61196c565b005b6104fb60048036036104f691908101906135f4565b611a83565b005b34801561050957600080fd5b50610524600480360361051f919081019061319d565b611b42565b005b34801561053257600080fd5b5061054d60048036036105489190810190613174565b611cd5565b60405161055a9190613f74565b60405180910390f35b34801561056f57600080fd5b5061058a60048036036105859190810190613405565b611d99565b6040516105979190613d58565b60405180910390f35b6105ba60048036036105b591908101906132a5565b611db9565b005b3480156105c857600080fd5b506105e360048036036105de919081019061323e565b612268565b005b3480156105f157600080fd5b506105fa6123bb565b6040516106079190613be7565b60405180910390f35b34801561061c57600080fd5b506106376004803603610632919081019061346f565b6123e0565b005b34801561064557600080fd5b5061064e612706565b60405161065b9190613e7e565b60405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ea90613f39565b60405180910390fd5b600160149054906101000a900460ff16610742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073990613e99565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561079e57600080fd5b60008090505b8151811015610a0757600073ffffffffffffffffffffffffffffffffffffffff168282815181106107d157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561087a57600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015610874573d6000803e3d6000fd5b506109fa565b600082828151811061088857fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108c89190613c02565b60206040518083038186803b1580156108e057600080fd5b505afa1580156108f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610918919081019061365e565b905060008111156109f85782828151811061092f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610993929190613c6f565b602060405180830381600087803b1580156109ad57600080fd5b505af11580156109c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109e591908101906133dc565b506109ee61272c565b6109f757600080fd5b5b505b80806001019150506107a4565b507f492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce65881604051610a379190613d36565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac890613f39565b60405180910390fd5b600160149054906101000a900460ff16610b20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1790613e99565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b5a57600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c344681604051610bca9190613be7565b60405180910390a150565b600160149054906101000a900460ff1615610c25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1c90613f19565b60405180910390fd5b6000806000806000610c368f6115cd565b9450945094509450945060488560ff16148015610c56575060018460ff16145b610c5f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cbd57803073ffffffffffffffffffffffffffffffffffffffff16311015610cb857600080fd5b610d7c565b6000610cc884611cd5565b905060098160ff161115610ce55760098160ff1603600a0a820291505b818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d1f9190613c02565b60206040518083038186803b158015610d3757600080fd5b505afa158015610d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d6f919081019061365e565b1015610d7a57600080fd5b505b610d8e8f8f8f8f8f8f8f8f8f8f61276a565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505050505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610eb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eaf90613f39565b60405180910390fd5b600160149054906101000a900460ff16610f07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efe90613e99565b60405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051610f519190613c02565b60405180910390a1565b6002544210610f9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9690613eb9565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461102f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102690613ef9565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516110e19190613be7565b60405180910390a1565b600081565b600160149054906101000a900460ff1615611140576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113790613f19565b60405180910390fd5b6000839050600061115085611cd5565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161118d9190613c02565b60206040518083038186803b1580156111a557600080fd5b505afa1580156111b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506111dd919081019061365e565b9050600085905060098360ff16111561121b5760098360ff1603600a0a818161120257fe5b04905060098360ff1603600a0a828161121757fe5b0491505b670de0b6b3a7640000811115801561123b5750670de0b6b3a76400008211155b80156112515750670de0b6b3a764000082820111155b61125a57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161129793929190613c38565b602060405180830381600087803b1580156112b157600080fd5b505af11580156112c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112e991908101906133dc565b506112f261272c565b6112fb57600080fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e87868360405161132e93929190613ccf565b60405180910390a150505050505050565b600160149054906101000a900460ff1681565b6004602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156113f2573073ffffffffffffffffffffffffffffffffffffffff1631905061147e565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161142b9190613c02565b60206040518083038186803b15801561144357600080fd5b505afa158015611457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061147b919081019061365e565b90505b919050565b60006003600083815260200190815260200160002060009054906101000a900460ff16156114b457600190506115c2565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561151457600090506115c2565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663749c5f86836040518263ffffffff1660e01b815260040161156f9190613e48565b60206040518083038186803b15801561158757600080fd5b505afa15801561159b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115bf91908101906133dc565b90505b919050565b60025481565b600080600080600080866000815181106115e357fe5b602001015160f81c60f81b60f81c905060008760018151811061160257fe5b602001015160f81c60f81b60f81c9050600080600060228b0151925060428b0151915060628b01519050848484848499509950995099509950505050505091939590929450565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116cf90613f39565b60405180910390fd5b600160149054906101000a900460ff1615611728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171f90613f19565b60405180910390fd5b600254421061176c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176390613eb9565b60405180910390fd5b60018060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336040516117b59190613c02565b60405180910390a1565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461189a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189190613f39565b60405180910390fd5b60025442106118de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d590613eb9565b60405180910390fd5b61016e8110611922576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191990613ed9565b60405180910390fd5b620151808102600254016002819055507f02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8816040516119619190613f59565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146119fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f290613f39565b60405180910390fd5b6002544210611a3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3690613eb9565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160149054906101000a900460ff1615611ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aca90613f19565b60405180910390fd5b6b033b2e3c9fd0803ce80000003073ffffffffffffffffffffffffffffffffffffffff16311115611b0357600080fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e60008234604051611b3793929190613ccf565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bc890613f39565b60405180910390fd5b600160149054906101000a900460ff16611c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1790613e99565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c5a57600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a81604051611cca9190613c02565b60405180910390a150565b60008082905060008090508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d2657600080fd5b505afa158015611d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d5e919081019061365e565b503d60008114611d795760208114611d825760009150611d8e565b60009150611d8e565b60206000803e60005191505b508092505050919050565b60036020528060005260406000206000915054906101000a900460ff1681565b83600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611e4257600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415611e7b57600080fd5b6000611e868461139d565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611ec35734810390505b6000349050600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611f07578581019050612033565b858773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611f419190613c02565b60206040518083038186803b158015611f5957600080fd5b505afa158015611f6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f91919081019061365e565b1015611f9c57600080fd5b8673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85886040518363ffffffff1660e01b8152600401611fd7929190613d0d565b602060405180830381600087803b158015611ff157600080fd5b505af1158015612005573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061202991908101906133dc565b61203257600080fd5b5b803073ffffffffffffffffffffffffffffffffffffffff1631101561205757600080fd5b600060608573ffffffffffffffffffffffffffffffffffffffff1683866040516120819190613ba8565b60006040518083038185875af1925050503d80600081146120be576040519150601f19603f3d011682016040523d82523d6000602084013e6120c3565b606091505b5091509150816120d257600080fd5b600080828060200190516120e991908101906131c6565b915091508873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461212557600080fd5b60006121308a61139d565b90506000878203905082811461214557600080fd5b8b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555050505050505050505050505050565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156122f157600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e8383836040516123ae93929190613ccf565b60405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160149054906101000a900460ff1615612430576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242790613f19565b60405180910390fd5b60008060008060006124418f6115cd565b9450945094509450945060488560ff16148015612461575060018460ff16145b61246a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156124c857803073ffffffffffffffffffffffffffffffffffffffff163110156124c357600080fd5b612587565b60006124d384611cd5565b905060098160ff1611156124f05760098160ff1603600a0a820291505b818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161252a9190613c02565b60206040518083038186803b15801561254257600080fd5b505afa158015612556573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061257a919081019061365e565b101561258557600080fd5b505b6125998f8f8f8f8f8f8f8f8f8f61276a565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561261a578173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612614573d6000803e3d6000fd5b506126ba565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401612655929190613c6f565b602060405180830381600087803b15801561266f57600080fd5b505af1158015612683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126a791908101906133dc565b506126b061272c565b6126b957600080fd5b5b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8383836040516126ed93929190613c98565b60405180910390a1505050505050505050505050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090503d6000811461274957602081146127525761275e565b6001915061275e565b60206000803e60005191505b50600081141591505090565b60008a80519060200120905060008b8b60006002811061278657fe5b602002015160405160200161279c929190613bbf565b60405160208183030381529060405280519060200120905060008c8c6001600281106127c457fe5b60200201516040516020016127da929190613bbf565b6040516020818303038152906040528051906020012090506127fb83611483565b1561280557600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166001848f60006002811061285357fe5b60200201518f60006002811061286557fe5b60200201518f60006002811061287757fe5b60200201518f60006002811061288957fe5b60200201518f60006002811061289b57fe5b60200201518f6000600281106128ad57fe5b60200201518f6000600281106128bf57fe5b60200201518f6000600281106128d157fe5b60200201518f6000600281106128e357fe5b60200201516040518c63ffffffff1660e01b815260040161290e9b9a99989796959493929190613d73565b60206040518083038186803b15801561292657600080fd5b505afa15801561293a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061295e91908101906133dc565b61296757600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166000838f6001600281106129b557fe5b60200201518f6001600281106129c757fe5b60200201518f6001600281106129d957fe5b60200201518f6001600281106129eb57fe5b60200201518f6001600281106129fd57fe5b60200201518f600160028110612a0f57fe5b60200201518f600160028110612a2157fe5b60200201518f600160028110612a3357fe5b60200201518f600160028110612a4557fe5b60200201516040518c63ffffffff1660e01b8152600401612a709b9a99989796959493929190613d73565b60206040518083038186803b158015612a8857600080fd5b505afa158015612a9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ac091908101906133dc565b612ac957600080fd5b60016003600085815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050505050505050505050565b600081359050612b1381614496565b92915050565b600081359050612b28816144ad565b92915050565b600081519050612b3d816144ad565b92915050565b600082601f830112612b5457600080fd5b8135612b67612b628261400f565b613fe2565b91508181835260208401935060208101905083856020840282011115612b8c57600080fd5b60005b83811015612bbc5781612ba28882612b04565b845260208401935060208301925050600181019050612b8f565b5050505092915050565b600082601f830112612bd757600080fd5b6002612bea612be582614037565b613fe2565b9150818360005b83811015612c215781358601612c078882612d5a565b845260208401935060208301925050600181019050612bf1565b5050505092915050565b600082601f830112612c3c57600080fd5b6002612c4f612c4a82614059565b613fe2565b9150818360005b83811015612c865781358601612c6c8882612e51565b845260208401935060208301925050600181019050612c56565b5050505092915050565b600082601f830112612ca157600080fd5b6002612cb4612caf8261407b565b613fe2565b9150818360005b83811015612ceb5781358601612cd18882612f48565b845260208401935060208301925050600181019050612cbb565b5050505092915050565b600082601f830112612d0657600080fd5b6002612d19612d148261409d565b613fe2565b9150818360005b83811015612d505781358601612d368882612fcb565b845260208401935060208301925050600181019050612d20565b5050505092915050565b600082601f830112612d6b57600080fd5b8135612d7e612d79826140bf565b613fe2565b91508181835260208401935060208101905083856020840282011115612da357600080fd5b60005b83811015612dd35781612db9888261304e565b845260208401935060208301925050600181019050612da6565b5050505092915050565b600082601f830112612dee57600080fd5b6002612e01612dfc826140e7565b613fe2565b91508183856020840282011115612e1757600080fd5b60005b83811015612e475781612e2d8882613078565b845260208401935060208301925050600181019050612e1a565b5050505092915050565b600082601f830112612e6257600080fd5b8135612e75612e7082614109565b613fe2565b91508181835260208401935060208101905083856020840282011115612e9a57600080fd5b60005b83811015612eca5781612eb08882613078565b845260208401935060208301925050600181019050612e9d565b5050505092915050565b600082601f830112612ee557600080fd5b6002612ef8612ef382614131565b613fe2565b91508183856020840282011115612f0e57600080fd5b60005b83811015612f3e5781612f248882613135565b845260208401935060208301925050600181019050612f11565b5050505092915050565b600082601f830112612f5957600080fd5b8135612f6c612f6782614153565b613fe2565b91508181835260208401935060208101905083856020840282011115612f9157600080fd5b60005b83811015612fc15781612fa78882613135565b845260208401935060208301925050600181019050612f94565b5050505092915050565b600082601f830112612fdc57600080fd5b8135612fef612fea8261417b565b613fe2565b9150818183526020840193506020810190508385602084028201111561301457600080fd5b60005b83811015613044578161302a888261315f565b845260208401935060208301925050600181019050613017565b5050505092915050565b60008135905061305d816144c4565b92915050565b600081519050613072816144c4565b92915050565b600081359050613087816144db565b92915050565b600082601f83011261309e57600080fd5b81356130b16130ac826141a3565b613fe2565b915080825260208301602083018583830111156130cd57600080fd5b6130d8838284614439565b50505092915050565b600082601f8301126130f257600080fd5b8135613105613100826141cf565b613fe2565b9150808252602083016020830185838301111561312157600080fd5b61312c838284614439565b50505092915050565b600081359050613144816144f2565b92915050565b600081519050613159816144f2565b92915050565b60008135905061316e81614509565b92915050565b60006020828403121561318657600080fd5b600061319484828501612b04565b91505092915050565b6000602082840312156131af57600080fd5b60006131bd84828501612b19565b91505092915050565b600080604083850312156131d957600080fd5b60006131e785828601612b2e565b92505060206131f88582860161314a565b9150509250929050565b6000806040838503121561321557600080fd5b600061322385828601612b04565b925050602061323485828601612b04565b9150509250929050565b60008060006060848603121561325357600080fd5b600061326186828701612b04565b935050602084013567ffffffffffffffff81111561327e57600080fd5b61328a868287016130e1565b925050604061329b86828701613135565b9150509250925092565b600080600080600060a086880312156132bd57600080fd5b60006132cb88828901612b04565b95505060206132dc88828901613135565b94505060406132ed88828901612b04565b93505060606132fe88828901612b04565b925050608086013567ffffffffffffffff81111561331b57600080fd5b6133278882890161308d565b9150509295509295909350565b60008060006060848603121561334957600080fd5b600061335786828701612b04565b935050602061336886828701613135565b925050604084013567ffffffffffffffff81111561338557600080fd5b613391868287016130e1565b9150509250925092565b6000602082840312156133ad57600080fd5b600082013567ffffffffffffffff8111156133c757600080fd5b6133d384828501612b43565b91505092915050565b6000602082840312156133ee57600080fd5b60006133fc84828501613063565b91505092915050565b60006020828403121561341757600080fd5b600061342584828501613078565b91505092915050565b60006020828403121561344057600080fd5b600082013567ffffffffffffffff81111561345a57600080fd5b6134668482850161308d565b91505092915050565b6000806000806000806000806000806101a08b8d03121561348f57600080fd5b60008b013567ffffffffffffffff8111156134a957600080fd5b6134b58d828e0161308d565b9a505060206134c68d828e01612ed4565b99505060608b013567ffffffffffffffff8111156134e357600080fd5b6134ef8d828e01612c2b565b98505060808b013567ffffffffffffffff81111561350c57600080fd5b6135188d828e01612bc6565b97505060a06135298d828e01612ddd565b96505060e061353a8d828e01612ddd565b9550506101208b013567ffffffffffffffff81111561355857600080fd5b6135648d828e01612c90565b9450506101408b013567ffffffffffffffff81111561358257600080fd5b61358e8d828e01612cf5565b9350506101608b013567ffffffffffffffff8111156135ac57600080fd5b6135b88d828e01612c2b565b9250506101808b013567ffffffffffffffff8111156135d657600080fd5b6135e28d828e01612c2b565b9150509295989b9194979a5092959850565b60006020828403121561360657600080fd5b600082013567ffffffffffffffff81111561362057600080fd5b61362c848285016130e1565b91505092915050565b60006020828403121561364757600080fd5b600061365584828501613135565b91505092915050565b60006020828403121561367057600080fd5b600061367e8482850161314a565b91505092915050565b6000613693838361371d565b60208301905092915050565b60006136ab8383613911565b60208301905092915050565b60006136c3838361392f565b60208301905092915050565b60006136db8383613b55565b60208301905092915050565b60006136f38383613b8a565b60208301905092915050565b613708816143bb565b82525050565b6137178161435c565b82525050565b6137268161434a565b82525050565b6137358161434a565b82525050565b60006137468261424b565b61375081856142d9565b935061375b836141fb565b8060005b8381101561378c5781516137738882613687565b975061377e83614298565b92505060018101905061375f565b5085935050505092915050565b60006137a482614256565b6137ae81856142ea565b93506137b98361420b565b8060005b838110156137ea5781516137d1888261369f565b97506137dc836142a5565b9250506001810190506137bd565b5085935050505092915050565b600061380282614261565b61380c81856142fb565b93506138178361421b565b8060005b8381101561384857815161382f88826136b7565b975061383a836142b2565b92505060018101905061381b565b5085935050505092915050565b60006138608261426c565b61386a818561430c565b93506138758361422b565b8060005b838110156138a657815161388d88826136cf565b9750613898836142bf565b925050600181019050613879565b5085935050505092915050565b60006138be82614277565b6138c8818561431d565b93506138d38361423b565b8060005b838110156139045781516138eb88826136e7565b97506138f6836142cc565b9250506001810190506138d7565b5085935050505092915050565b61391a8161436e565b82525050565b6139298161436e565b82525050565b6139388161437a565b82525050565b6139478161437a565b82525050565b600061395882614282565b613962818561432e565b9350613972818560208601614448565b80840191505092915050565b613987816143cd565b82525050565b613996816143f1565b82525050565b60006139a78261428d565b6139b18185614339565b93506139c1818560208601614448565b6139ca81614485565b840191505092915050565b60006139e2601483614339565b91507f6e6f7420706175736564207269676874206e6f770000000000000000000000006000830152602082019050919050565b6000613a22600783614339565b91507f65787069726564000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613a62601a83614339565b91507f63616e6e6f7420657874656e6420666f7220746f6f206c6f6e670000000000006000830152602082019050919050565b6000613aa2600c83614339565b91507f756e617574686f72697a656400000000000000000000000000000000000000006000830152602082019050919050565b6000613ae2601083614339565b91507f706175736564207269676874206e6f77000000000000000000000000000000006000830152602082019050919050565b6000613b22600983614339565b91507f6e6f742061646d696e00000000000000000000000000000000000000000000006000830152602082019050919050565b613b5e816143a4565b82525050565b613b6d816143a4565b82525050565b613b84613b7f826143a4565b61447b565b82525050565b613b93816143ae565b82525050565b613ba2816143ae565b82525050565b6000613bb4828461394d565b915081905092915050565b6000613bcb828561394d565b9150613bd78284613b73565b6020820191508190509392505050565b6000602082019050613bfc600083018461372c565b92915050565b6000602082019050613c1760008301846136ff565b92915050565b6000602082019050613c32600083018461370e565b92915050565b6000606082019050613c4d60008301866136ff565b613c5a60208301856136ff565b613c676040830184613b64565b949350505050565b6000604082019050613c8460008301856136ff565b613c916020830184613b64565b9392505050565b6000606082019050613cad600083018661372c565b613cba60208301856136ff565b613cc76040830184613b64565b949350505050565b6000606082019050613ce4600083018661372c565b8181036020830152613cf6818561399c565b9050613d056040830184613b64565b949350505050565b6000604082019050613d22600083018561372c565b613d2f6020830184613b64565b9392505050565b60006020820190508181036000830152613d50818461373b565b905092915050565b6000602082019050613d6d6000830184613920565b92915050565b600061016082019050613d89600083018e613920565b613d96602083018d61393e565b613da3604083018c613b64565b8181036060830152613db5818b6137f7565b90508181036080830152613dc9818a613799565b9050613dd860a083018961393e565b613de560c083018861393e565b81810360e0830152613df78187613855565b9050818103610100830152613e0c81866138b3565b9050818103610120830152613e2181856137f7565b9050818103610140830152613e3681846137f7565b90509c9b505050505050505050505050565b6000602082019050613e5d600083018461393e565b92915050565b6000602082019050613e78600083018461397e565b92915050565b6000602082019050613e93600083018461398d565b92915050565b60006020820190508181036000830152613eb2816139d5565b9050919050565b60006020820190508181036000830152613ed281613a15565b9050919050565b60006020820190508181036000830152613ef281613a55565b9050919050565b60006020820190508181036000830152613f1281613a95565b9050919050565b60006020820190508181036000830152613f3281613ad5565b9050919050565b60006020820190508181036000830152613f5281613b15565b9050919050565b6000602082019050613f6e6000830184613b64565b92915050565b6000602082019050613f896000830184613b99565b92915050565b600060a082019050613fa46000830188613b99565b613fb16020830187613b99565b613fbe604083018661372c565b613fcb606083018561370e565b613fd86080830184613b64565b9695505050505050565b6000604051905081810181811067ffffffffffffffff8211171561400557600080fd5b8060405250919050565b600067ffffffffffffffff82111561402657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561404e57600080fd5b602082029050919050565b600067ffffffffffffffff82111561407057600080fd5b602082029050919050565b600067ffffffffffffffff82111561409257600080fd5b602082029050919050565b600067ffffffffffffffff8211156140b457600080fd5b602082029050919050565b600067ffffffffffffffff8211156140d657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156140fe57600080fd5b602082029050919050565b600067ffffffffffffffff82111561412057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561414857600080fd5b602082029050919050565b600067ffffffffffffffff82111561416a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561419257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156141ba57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156141e657600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061435582614384565b9050919050565b600061436782614384565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006143c682614415565b9050919050565b60006143d8826143df565b9050919050565b60006143ea82614384565b9050919050565b60006143fc82614403565b9050919050565b600061440e82614384565b9050919050565b600061442082614427565b9050919050565b600061443282614384565b9050919050565b82818337600083830152505050565b60005b8381101561446657808201518184015260208101905061444b565b83811115614475576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b61449f8161434a565b81146144aa57600080fd5b50565b6144b68161435c565b81146144c157600080fd5b50565b6144cd8161436e565b81146144d857600080fd5b50565b6144e48161437a565b81146144ef57600080fd5b50565b6144fb816143a4565b811461450657600080fd5b50565b614512816143ae565b811461451d57600080fd5b5056fea365627a7a7231582098f9f8ada77aa9d5729737c30457692d8dbee47a07854b084adc0645033f4b116c6578706572696d656e74616cf564736f6c634300050c0040`

// DeployIncmode deploys a new Ethereum contract, binding an instance of Incmode to it.
func DeployIncmode(auth *bind.TransactOpts, backend bind.ContractBackend, admin common.Address, incognitoProxyAddress common.Address, _prevVault common.Address) (common.Address, *types.Transaction, *Incmode, error) {
	parsed, err := abi.JSON(strings.NewReader(IncmodeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IncmodeBin), backend, admin, incognitoProxyAddress, _prevVault)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Incmode{IncmodeCaller: IncmodeCaller{contract: contract}, IncmodeTransactor: IncmodeTransactor{contract: contract}, IncmodeFilterer: IncmodeFilterer{contract: contract}}, nil
}

// Incmode is an auto generated Go binding around an Ethereum contract.
type Incmode struct {
	IncmodeCaller     // Read-only binding to the contract
	IncmodeTransactor // Write-only binding to the contract
	IncmodeFilterer   // Log filterer for contract events
}

// IncmodeCaller is an auto generated read-only Go binding around an Ethereum contract.
type IncmodeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IncmodeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IncmodeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IncmodeSession struct {
	Contract     *Incmode          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IncmodeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IncmodeCallerSession struct {
	Contract *IncmodeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IncmodeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IncmodeTransactorSession struct {
	Contract     *IncmodeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IncmodeRaw is an auto generated low-level Go binding around an Ethereum contract.
type IncmodeRaw struct {
	Contract *Incmode // Generic contract binding to access the raw methods on
}

// IncmodeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IncmodeCallerRaw struct {
	Contract *IncmodeCaller // Generic read-only contract binding to access the raw methods on
}

// IncmodeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IncmodeTransactorRaw struct {
	Contract *IncmodeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIncmode creates a new instance of Incmode, bound to a specific deployed contract.
func NewIncmode(address common.Address, backend bind.ContractBackend) (*Incmode, error) {
	contract, err := bindIncmode(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Incmode{IncmodeCaller: IncmodeCaller{contract: contract}, IncmodeTransactor: IncmodeTransactor{contract: contract}, IncmodeFilterer: IncmodeFilterer{contract: contract}}, nil
}

// NewIncmodeCaller creates a new read-only instance of Incmode, bound to a specific deployed contract.
func NewIncmodeCaller(address common.Address, caller bind.ContractCaller) (*IncmodeCaller, error) {
	contract, err := bindIncmode(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IncmodeCaller{contract: contract}, nil
}

// NewIncmodeTransactor creates a new write-only instance of Incmode, bound to a specific deployed contract.
func NewIncmodeTransactor(address common.Address, transactor bind.ContractTransactor) (*IncmodeTransactor, error) {
	contract, err := bindIncmode(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IncmodeTransactor{contract: contract}, nil
}

// NewIncmodeFilterer creates a new log filterer instance of Incmode, bound to a specific deployed contract.
func NewIncmodeFilterer(address common.Address, filterer bind.ContractFilterer) (*IncmodeFilterer, error) {
	contract, err := bindIncmode(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IncmodeFilterer{contract: contract}, nil
}

// bindIncmode binds a generic wrapper to an already deployed contract.
func bindIncmode(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IncmodeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incmode *IncmodeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Incmode.Contract.IncmodeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incmode *IncmodeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.Contract.IncmodeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incmode *IncmodeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incmode.Contract.IncmodeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incmode *IncmodeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Incmode.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incmode *IncmodeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incmode *IncmodeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incmode.Contract.contract.Transact(opts, method, params...)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeCaller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "ETH_TOKEN")
	return *ret0, err
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeSession) ETHTOKEN() (common.Address, error) {
	return _Incmode.Contract.ETHTOKEN(&_Incmode.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeCallerSession) ETHTOKEN() (common.Address, error) {
	return _Incmode.Contract.ETHTOKEN(&_Incmode.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "admin")
	return *ret0, err
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeSession) Admin() (common.Address, error) {
	return _Incmode.Contract.Admin(&_Incmode.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeCallerSession) Admin() (common.Address, error) {
	return _Incmode.Contract.Admin(&_Incmode.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeCaller) Expire(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "expire")
	return *ret0, err
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeSession) Expire() (*big.Int, error) {
	return _Incmode.Contract.Expire(&_Incmode.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeCallerSession) Expire() (*big.Int, error) {
	return _Incmode.Contract.Expire(&_Incmode.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeCaller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "getDecimals", token)
	return *ret0, err
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeSession) GetDecimals(token common.Address) (uint8, error) {
	return _Incmode.Contract.GetDecimals(&_Incmode.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeCallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _Incmode.Contract.GetDecimals(&_Incmode.CallOpts, token)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeCaller) Incognito(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "incognito")
	return *ret0, err
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeSession) Incognito() (common.Address, error) {
	return _Incmode.Contract.Incognito(&_Incmode.CallOpts)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeCallerSession) Incognito() (common.Address, error) {
	return _Incmode.Contract.Incognito(&_Incmode.CallOpts)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeCaller) IsWithdrawed(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "isWithdrawed", hash)
	return *ret0, err
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Incmode.Contract.IsWithdrawed(&_Incmode.CallOpts, hash)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeCallerSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Incmode.Contract.IsWithdrawed(&_Incmode.CallOpts, hash)
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeCaller) NewVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "newVault")
	return *ret0, err
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeSession) NewVault() (common.Address, error) {
	return _Incmode.Contract.NewVault(&_Incmode.CallOpts)
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeCallerSession) NewVault() (common.Address, error) {
	return _Incmode.Contract.NewVault(&_Incmode.CallOpts)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeCaller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (uint8, uint8, common.Address, common.Address, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(common.Address)
		ret3 = new(common.Address)
		ret4 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
	}
	err := _Incmode.contract.Call(opts, out, "parseBurnInst", inst)
	return *ret0, *ret1, *ret2, *ret3, *ret4, err
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeSession) ParseBurnInst(inst []byte) (uint8, uint8, common.Address, common.Address, *big.Int, error) {
	return _Incmode.Contract.ParseBurnInst(&_Incmode.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeCallerSession) ParseBurnInst(inst []byte) (uint8, uint8, common.Address, common.Address, *big.Int, error) {
	return _Incmode.Contract.ParseBurnInst(&_Incmode.CallOpts, inst)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeSession) Paused() (bool, error) {
	return _Incmode.Contract.Paused(&_Incmode.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeCallerSession) Paused() (bool, error) {
	return _Incmode.Contract.Paused(&_Incmode.CallOpts)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeCaller) PrevVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "prevVault")
	return *ret0, err
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeSession) PrevVault() (common.Address, error) {
	return _Incmode.Contract.PrevVault(&_Incmode.CallOpts)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeCallerSession) PrevVault() (common.Address, error) {
	return _Incmode.Contract.PrevVault(&_Incmode.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeCaller) Successor(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "successor")
	return *ret0, err
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeSession) Successor() (common.Address, error) {
	return _Incmode.Contract.Successor(&_Incmode.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeCallerSession) Successor() (common.Address, error) {
	return _Incmode.Contract.Successor(&_Incmode.CallOpts)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeCaller) WithdrawRequests(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "withdrawRequests", arg0, arg1)
	return *ret0, err
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Incmode.Contract.WithdrawRequests(&_Incmode.CallOpts, arg0, arg1)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeCallerSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Incmode.Contract.WithdrawRequests(&_Incmode.CallOpts, arg0, arg1)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeCaller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "withdrawed", arg0)
	return *ret0, err
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Incmode.Contract.Withdrawed(&_Incmode.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeCallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Incmode.Contract.Withdrawed(&_Incmode.CallOpts, arg0)
}

// BalanceOf is a paid mutator transaction binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) returns(uint256)
func (_Incmode *IncmodeTransactor) BalanceOf(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "balanceOf", token)
}

// BalanceOf is a paid mutator transaction binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) returns(uint256)
func (_Incmode *IncmodeSession) BalanceOf(token common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.BalanceOf(&_Incmode.TransactOpts, token)
}

// BalanceOf is a paid mutator transaction binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) returns(uint256)
func (_Incmode *IncmodeTransactorSession) BalanceOf(token common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.BalanceOf(&_Incmode.TransactOpts, token)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeTransactor) Claim(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "claim")
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeSession) Claim() (*types.Transaction, error) {
	return _Incmode.Contract.Claim(&_Incmode.TransactOpts)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeTransactorSession) Claim() (*types.Transaction, error) {
	return _Incmode.Contract.Claim(&_Incmode.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeTransactor) Deposit(opts *bind.TransactOpts, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "deposit", incognitoAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeSession) Deposit(incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.Deposit(&_Incmode.TransactOpts, incognitoAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeTransactorSession) Deposit(incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.Deposit(&_Incmode.TransactOpts, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeTransactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "depositERC20", token, amount, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.DepositERC20(&_Incmode.TransactOpts, token, amount, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeTransactorSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.DepositERC20(&_Incmode.TransactOpts, token, amount, incognitoAddress)
}

// Execute is a paid mutator transaction binding the contract method 0xe7edbc02.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData) returns()
func (_Incmode *IncmodeTransactor) Execute(opts *bind.TransactOpts, token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "execute", token, amount, recipientToken, exchangeAddress, callData)
}

// Execute is a paid mutator transaction binding the contract method 0xe7edbc02.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData) returns()
func (_Incmode *IncmodeSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte) (*types.Transaction, error) {
	return _Incmode.Contract.Execute(&_Incmode.TransactOpts, token, amount, recipientToken, exchangeAddress, callData)
}

// Execute is a paid mutator transaction binding the contract method 0xe7edbc02.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData) returns()
func (_Incmode *IncmodeTransactorSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte) (*types.Transaction, error) {
	return _Incmode.Contract.Execute(&_Incmode.TransactOpts, token, amount, recipientToken, exchangeAddress, callData)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeTransactor) Extend(opts *bind.TransactOpts, n *big.Int) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "extend", n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.Extend(&_Incmode.TransactOpts, n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeTransactorSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.Extend(&_Incmode.TransactOpts, n)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeTransactor) Migrate(opts *bind.TransactOpts, _newVault common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "migrate", _newVault)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeSession) Migrate(_newVault common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Migrate(&_Incmode.TransactOpts, _newVault)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeTransactorSession) Migrate(_newVault common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Migrate(&_Incmode.TransactOpts, _newVault)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeTransactor) MoveAssets(opts *bind.TransactOpts, assets []common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "moveAssets", assets)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeSession) MoveAssets(assets []common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.MoveAssets(&_Incmode.TransactOpts, assets)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeTransactorSession) MoveAssets(assets []common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.MoveAssets(&_Incmode.TransactOpts, assets)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeSession) Pause() (*types.Transaction, error) {
	return _Incmode.Contract.Pause(&_Incmode.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeTransactorSession) Pause() (*types.Transaction, error) {
	return _Incmode.Contract.Pause(&_Incmode.TransactOpts)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0xef074bd5.
//
// Solidity: function requestWithdraw(address token, string incognitoAddress, uint256 amount) returns()
func (_Incmode *IncmodeTransactor) RequestWithdraw(opts *bind.TransactOpts, token common.Address, incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "requestWithdraw", token, incognitoAddress, amount)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0xef074bd5.
//
// Solidity: function requestWithdraw(address token, string incognitoAddress, uint256 amount) returns()
func (_Incmode *IncmodeSession) RequestWithdraw(token common.Address, incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.RequestWithdraw(&_Incmode.TransactOpts, token, incognitoAddress, amount)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0xef074bd5.
//
// Solidity: function requestWithdraw(address token, string incognitoAddress, uint256 amount) returns()
func (_Incmode *IncmodeTransactorSession) RequestWithdraw(token common.Address, incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.RequestWithdraw(&_Incmode.TransactOpts, token, incognitoAddress, amount)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeTransactor) Retire(opts *bind.TransactOpts, _successor common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "retire", _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeSession) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Retire(&_Incmode.TransactOpts, _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeTransactorSession) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Retire(&_Incmode.TransactOpts, _successor)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactor) SubmitBurnProof(opts *bind.TransactOpts, inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "submitBurnProof", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeSession) SubmitBurnProof(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.SubmitBurnProof(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactorSession) SubmitBurnProof(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.SubmitBurnProof(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeSession) Unpause() (*types.Transaction, error) {
	return _Incmode.Contract.Unpause(&_Incmode.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeTransactorSession) Unpause() (*types.Transaction, error) {
	return _Incmode.Contract.Unpause(&_Incmode.TransactOpts)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeTransactor) UpdateIncognitoProxy(opts *bind.TransactOpts, newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "updateIncognitoProxy", newIncognitoProxy)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeSession) UpdateIncognitoProxy(newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.UpdateIncognitoProxy(&_Incmode.TransactOpts, newIncognitoProxy)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeTransactorSession) UpdateIncognitoProxy(newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.UpdateIncognitoProxy(&_Incmode.TransactOpts, newIncognitoProxy)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactor) Withdraw(opts *bind.TransactOpts, inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "withdraw", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeSession) Withdraw(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.Withdraw(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactorSession) Withdraw(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.Withdraw(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// IncmodeClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the Incmode contract.
type IncmodeClaimIterator struct {
	Event *IncmodeClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeClaim represents a Claim event raised by the Incmode contract.
type IncmodeClaim struct {
	Claimer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Incmode *IncmodeFilterer) FilterClaim(opts *bind.FilterOpts) (*IncmodeClaimIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return &IncmodeClaimIterator{contract: _Incmode.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Incmode *IncmodeFilterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *IncmodeClaim) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeClaim)
				if err := _Incmode.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Incmode contract.
type IncmodeDepositIterator struct {
	Event *IncmodeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeDeposit represents a Deposit event raised by the Incmode contract.
type IncmodeDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterDeposit(opts *bind.FilterOpts) (*IncmodeDepositIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &IncmodeDepositIterator{contract: _Incmode.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *IncmodeDeposit) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeDeposit)
				if err := _Incmode.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeExtendIterator is returned from FilterExtend and is used to iterate over the raw logs and unpacked data for Extend events raised by the Incmode contract.
type IncmodeExtendIterator struct {
	Event *IncmodeExtend // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeExtendIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeExtend)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeExtend)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeExtendIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeExtendIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeExtend represents a Extend event raised by the Incmode contract.
type IncmodeExtend struct {
	Ndays *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterExtend is a free log retrieval operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Incmode *IncmodeFilterer) FilterExtend(opts *bind.FilterOpts) (*IncmodeExtendIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return &IncmodeExtendIterator{contract: _Incmode.contract, event: "Extend", logs: logs, sub: sub}, nil
}

// WatchExtend is a free log subscription operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Incmode *IncmodeFilterer) WatchExtend(opts *bind.WatchOpts, sink chan<- *IncmodeExtend) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeExtend)
				if err := _Incmode.contract.UnpackLog(event, "Extend", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeMigrateIterator is returned from FilterMigrate and is used to iterate over the raw logs and unpacked data for Migrate events raised by the Incmode contract.
type IncmodeMigrateIterator struct {
	Event *IncmodeMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeMigrate represents a Migrate event raised by the Incmode contract.
type IncmodeMigrate struct {
	NewVault common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMigrate is a free log retrieval operation binding the contract event 0xd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a.
//
// Solidity: event Migrate(address newVault)
func (_Incmode *IncmodeFilterer) FilterMigrate(opts *bind.FilterOpts) (*IncmodeMigrateIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return &IncmodeMigrateIterator{contract: _Incmode.contract, event: "Migrate", logs: logs, sub: sub}, nil
}

// WatchMigrate is a free log subscription operation binding the contract event 0xd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a.
//
// Solidity: event Migrate(address newVault)
func (_Incmode *IncmodeFilterer) WatchMigrate(opts *bind.WatchOpts, sink chan<- *IncmodeMigrate) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeMigrate)
				if err := _Incmode.contract.UnpackLog(event, "Migrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeMoveAssetsIterator is returned from FilterMoveAssets and is used to iterate over the raw logs and unpacked data for MoveAssets events raised by the Incmode contract.
type IncmodeMoveAssetsIterator struct {
	Event *IncmodeMoveAssets // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeMoveAssetsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeMoveAssets)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeMoveAssets)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeMoveAssetsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeMoveAssetsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeMoveAssets represents a MoveAssets event raised by the Incmode contract.
type IncmodeMoveAssets struct {
	Assets []common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMoveAssets is a free log retrieval operation binding the contract event 0x492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce658.
//
// Solidity: event MoveAssets(address[] assets)
func (_Incmode *IncmodeFilterer) FilterMoveAssets(opts *bind.FilterOpts) (*IncmodeMoveAssetsIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "MoveAssets")
	if err != nil {
		return nil, err
	}
	return &IncmodeMoveAssetsIterator{contract: _Incmode.contract, event: "MoveAssets", logs: logs, sub: sub}, nil
}

// WatchMoveAssets is a free log subscription operation binding the contract event 0x492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce658.
//
// Solidity: event MoveAssets(address[] assets)
func (_Incmode *IncmodeFilterer) WatchMoveAssets(opts *bind.WatchOpts, sink chan<- *IncmodeMoveAssets) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "MoveAssets")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeMoveAssets)
				if err := _Incmode.contract.UnpackLog(event, "MoveAssets", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Incmode contract.
type IncmodePausedIterator struct {
	Event *IncmodePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodePaused represents a Paused event raised by the Incmode contract.
type IncmodePaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Incmode *IncmodeFilterer) FilterPaused(opts *bind.FilterOpts) (*IncmodePausedIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &IncmodePausedIterator{contract: _Incmode.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Incmode *IncmodeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *IncmodePaused) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodePaused)
				if err := _Incmode.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeTradeIterator is returned from FilterTrade and is used to iterate over the raw logs and unpacked data for Trade events raised by the Incmode contract.
type IncmodeTradeIterator struct {
	Event *IncmodeTrade // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeTradeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeTrade)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeTrade)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeTradeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeTradeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeTrade represents a Trade event raised by the Incmode contract.
type IncmodeTrade struct {
	IncognitoAddress string
	Token            common.Address
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterTrade is a free log retrieval operation binding the contract event 0x68ae6030d8e5a42e79b7dd481f18c425a779d1b6816487681116ffca8356ac49.
//
// Solidity: event Trade(string incognitoAddress, address token, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterTrade(opts *bind.FilterOpts) (*IncmodeTradeIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Trade")
	if err != nil {
		return nil, err
	}
	return &IncmodeTradeIterator{contract: _Incmode.contract, event: "Trade", logs: logs, sub: sub}, nil
}

// WatchTrade is a free log subscription operation binding the contract event 0x68ae6030d8e5a42e79b7dd481f18c425a779d1b6816487681116ffca8356ac49.
//
// Solidity: event Trade(string incognitoAddress, address token, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchTrade(opts *bind.WatchOpts, sink chan<- *IncmodeTrade) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Trade")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeTrade)
				if err := _Incmode.contract.UnpackLog(event, "Trade", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Incmode contract.
type IncmodeUnpausedIterator struct {
	Event *IncmodeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeUnpaused represents a Unpaused event raised by the Incmode contract.
type IncmodeUnpaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Incmode *IncmodeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*IncmodeUnpausedIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &IncmodeUnpausedIterator{contract: _Incmode.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Incmode *IncmodeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *IncmodeUnpaused) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeUnpaused)
				if err := _Incmode.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeUpdateIncognitoProxyIterator is returned from FilterUpdateIncognitoProxy and is used to iterate over the raw logs and unpacked data for UpdateIncognitoProxy events raised by the Incmode contract.
type IncmodeUpdateIncognitoProxyIterator struct {
	Event *IncmodeUpdateIncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeUpdateIncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeUpdateIncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeUpdateIncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeUpdateIncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeUpdateIncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeUpdateIncognitoProxy represents a UpdateIncognitoProxy event raised by the Incmode contract.
type IncmodeUpdateIncognitoProxy struct {
	NewIncognitoProxy common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUpdateIncognitoProxy is a free log retrieval operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Incmode *IncmodeFilterer) FilterUpdateIncognitoProxy(opts *bind.FilterOpts) (*IncmodeUpdateIncognitoProxyIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &IncmodeUpdateIncognitoProxyIterator{contract: _Incmode.contract, event: "UpdateIncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchUpdateIncognitoProxy is a free log subscription operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Incmode *IncmodeFilterer) WatchUpdateIncognitoProxy(opts *bind.WatchOpts, sink chan<- *IncmodeUpdateIncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeUpdateIncognitoProxy)
				if err := _Incmode.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Incmode contract.
type IncmodeWithdrawIterator struct {
	Event *IncmodeWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeWithdraw represents a Withdraw event raised by the Incmode contract.
type IncmodeWithdraw struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterWithdraw(opts *bind.FilterOpts) (*IncmodeWithdrawIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &IncmodeWithdrawIterator{contract: _Incmode.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *IncmodeWithdraw) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeWithdraw)
				if err := _Incmode.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeWithdrawRequestIterator is returned from FilterWithdrawRequest and is used to iterate over the raw logs and unpacked data for WithdrawRequest events raised by the Incmode contract.
type IncmodeWithdrawRequestIterator struct {
	Event *IncmodeWithdrawRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeWithdrawRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeWithdrawRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeWithdrawRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeWithdrawRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeWithdrawRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeWithdrawRequest represents a WithdrawRequest event raised by the Incmode contract.
type IncmodeWithdrawRequest struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterWithdrawRequest is a free log retrieval operation binding the contract event 0x392a40e1ff76f04543dc851cc0c7ad40bb9db5d3f672f27d1aa3e5c089533af5.
//
// Solidity: event WithdrawRequest(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterWithdrawRequest(opts *bind.FilterOpts) (*IncmodeWithdrawRequestIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "WithdrawRequest")
	if err != nil {
		return nil, err
	}
	return &IncmodeWithdrawRequestIterator{contract: _Incmode.contract, event: "WithdrawRequest", logs: logs, sub: sub}, nil
}

// WatchWithdrawRequest is a free log subscription operation binding the contract event 0x392a40e1ff76f04543dc851cc0c7ad40bb9db5d3f672f27d1aa3e5c089533af5.
//
// Solidity: event WithdrawRequest(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchWithdrawRequest(opts *bind.WatchOpts, sink chan<- *IncmodeWithdrawRequest) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "WithdrawRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeWithdrawRequest)
				if err := _Incmode.contract.UnpackLog(event, "WithdrawRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
