// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package incmode

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IncmodeABI is the input ABI used to generate the binding from.
const IncmodeABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incognitoProxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prevVault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ndays\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"MoveAssets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"UpdateIncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incognito\",\"outputs\":[{\"internalType\":\"contractIncognito\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newVault\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevVault\",\"outputs\":[{\"internalType\":\"contractWithdrawable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_successor\",\"type\":\"address\"}],\"name\":\"retire\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"successor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"}],\"name\":\"depositERC20\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"heights\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"instPaths\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bool[][2]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[][2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"instRoots\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"blkData\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256[][2]\",\"name\":\"sigIdxs\",\"type\":\"uint256[][2]\"},{\"internalType\":\"uint8[][2]\",\"name\":\"sigVs\",\"type\":\"uint8[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigRs\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigSs\",\"type\":\"bytes32[][2]\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"heights\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"instPaths\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bool[][2]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[][2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"instRoots\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"blkData\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256[][2]\",\"name\":\"sigIdxs\",\"type\":\"uint256[][2]\"},{\"internalType\":\"uint8[][2]\",\"name\":\"sigVs\",\"type\":\"uint8[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigRs\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigSs\",\"type\":\"bytes32[][2]\"}],\"name\":\"submitBurnProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"sigToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_newVault\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"moveAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"updateIncognitoProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IncmodeBin is the compiled bytecode used for deploying new contracts.
var IncmodeBin = "0x60806040523480156200001157600080fd5b5060405162004bd638038062004bd6833981810160405262000037919081019062000185565b82806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083151502179055506301e1338042016002819055505081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000229565b6000815190506200017f816200020f565b92915050565b6000806000606084860312156200019b57600080fd5b6000620001ab868287016200016e565b9350506020620001be868287016200016e565b9250506040620001d1868287016200016e565b9150509250925092565b6000620001e882620001ef565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200021a81620001db565b81146200022657600080fd5b50565b61499d80620002396000396000f3fe6080604052600436106101cd5760003560e01c80637e16e6e1116100f7578063a26e118611610095578063f851a44011610064578063f851a44014610639578063f8b3974514610664578063fa84702e1461068d578063faf7f494146106b8576101cd565b8063a26e11861461057a578063ce5494bb14610596578063cf54aaa0146105bf578063dca40d9e146105fc576101cd565b80638a984538116100d15780638a984538146104e15780639714378c1461050c5780639e6371ba14610535578063a0c0f9b81461055e576101cd565b80637e16e6e11461045d5780638456cb591461049f57806388aaf0c8146104b6576101cd565b806358bc83371161016f5780636ff968c31161013e5780636ff968c31461038d57806370a08231146103b8578063749c5f86146103f557806379599f9614610432576101cd565b806358bc8337146102de5780635a67cb87146103095780635c975abb1461032557806365b5a00f14610350576101cd565b80633f4ba83a116101ab5780633f4ba83a1461024a5780633fec6b40146102615780634e71d92d1461029e5780635654b6c8146102b5576101cd565b80630c4f5039146101cf5780633a51913d146101f85780633cb4b58a14610221575b005b3480156101db57600080fd5b506101f660048036036101f19190810190613687565b6106e1565b005b34801561020457600080fd5b5061021f600480360361021a9190810190613439565b610aa8565b005b34801561022d57600080fd5b506102486004803603610243919081019061375b565b610c3b565b005b34801561025657600080fd5b5061025f610e9f565b005b34801561026d57600080fd5b50610288600480360361028391908101906138e0565b610fd1565b6040516102959190613fce565b60405180910390f35b3480156102aa57600080fd5b506102b361105f565b005b3480156102c157600080fd5b506102dc60048036036102d79190810190613975565b6111ef565b005b3480156102ea57600080fd5b506102f3611353565b6040516103009190613fce565b60405180910390f35b610323600480360361031e9190810190613620565b611358565b005b34801561033157600080fd5b5061033a6115a7565b604051610347919061413f565b60405180910390f35b34801561035c57600080fd5b50610377600480360361037291908101906134c7565b6115ba565b6040516103849190614385565b60405180910390f35b34801561039957600080fd5b506103a26115df565b6040516103af9190613fce565b60405180910390f35b3480156103c457600080fd5b506103df60048036036103da9190810190613439565b611605565b6040516103ec9190614385565b60405180910390f35b34801561040157600080fd5b5061041c600480360361041791908101906136f1565b6116d4565b604051610429919061413f565b60405180910390f35b34801561043e57600080fd5b50610447611818565b6040516104549190614385565b60405180910390f35b34801561046957600080fd5b50610484600480360361047f919081019061371a565b61181e565b604051610496969594939291906143bb565b60405180910390f35b3480156104ab57600080fd5b506104b46118bf565b005b3480156104c257600080fd5b506104cb611a35565b6040516104d89190614004565b60405180910390f35b3480156104ed57600080fd5b506104f6611a5b565b604051610503919061428f565b60405180910390f35b34801561051857600080fd5b50610533600480360361052e9190810190613a1c565b611a81565b005b34801561054157600080fd5b5061055c60048036036105579190810190613439565b611be2565b005b61057860048036036105739190810190613552565b611cf9565b005b610594600480360361058f9190810190613934565b612064565b005b3480156105a257600080fd5b506105bd60048036036105b89190810190613462565b61210c565b005b3480156105cb57600080fd5b506105e660048036036105e19190810190613439565b61229f565b6040516105f391906143a0565b60405180910390f35b34801561060857600080fd5b50610623600480360361061e91908101906136f1565b612363565b604051610630919061413f565b60405180910390f35b34801561064557600080fd5b5061064e612383565b60405161065b9190613fce565b60405180910390f35b34801561067057600080fd5b5061068b6004803603610686919081019061375b565b6123a8565b005b34801561069957600080fd5b506106a26126f6565b6040516106af91906142aa565b60405180910390f35b3480156106c457600080fd5b506106df60048036036106da9190810190613503565b61271c565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610770576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076790614365565b60405180910390fd5b600160149054906101000a900460ff166107bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b6906142c5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561081b57600080fd5b60008090505b8151811015610a6d57600073ffffffffffffffffffffffffffffffffffffffff1682828151811061084e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156108e057600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156108da573d6000803e3d6000fd5b50610a60565b60008282815181106108ee57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161092e9190613fe9565b60206040518083038186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061097e9190810190613a45565b90506000811115610a5e5782828151811061099557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016109f9929190614056565b602060405180830381600087803b158015610a1357600080fd5b505af1158015610a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a4b91908101906136c8565b50610a546127a2565b610a5d57600080fd5b5b505b8080600101915050610821565b507f492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce65881604051610a9d919061411d565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2e90614365565b60405180910390fd5b600160149054906101000a900460ff16610b86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7d906142c5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610bc057600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c344681604051610c309190613fce565b60405180910390a150565b600160149054906101000a900460ff1615610c8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8290614345565b60405180910390fd5b610c93612d5e565b610c9c8b6127e0565b90506048816020015160ff16148015610cbc57506001816040015160ff16145b610cc557600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff161415610d14578060a00151471015610d0f57600080fd5b610dea565b6000610d23826060015161229f565b905060098160ff161115610d4b5760098160ff1603600a0a8260a00151028260a00181815250505b8160a00151826060015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d8d9190613fe9565b60206040518083038186803b158015610da557600080fd5b505afa158015610db9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ddd9190810190613a45565b1015610de857600080fd5b505b610dfc8b8b8b8b8b8b8b8b8b8b612881565b8060a0015160046000836080015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000836060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2590614365565b60405180910390fd5b600160149054906101000a900460ff16610f7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f74906142c5565b60405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051610fc79190613fe9565b60405180910390a1565b6000806000806020860151915060408601519250601b86604081518110610ff457fe5b602001015160f81c60f81b60f81c01905060018582848660405160008152602001604052604051611028949392919061424a565b6020604051602081039080840390855afa15801561104a573d6000803e3d6000fd5b50505060206040510351935050505092915050565b60025442106110a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109a906142e5565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611133576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112a90614325565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516111e59190613fce565b60405180910390a1565b60006111fb8383610fd1565b905083600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561128657600080fd5b83600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e858786604051611343939291906140b6565b60405180910390a1505050505050565b600081565b600160149054906101000a900460ff16156113a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139f90614345565b60405180910390fd5b600083905060006113b88561229f565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113f59190613fe9565b60206040518083038186803b15801561140d57600080fd5b505afa158015611421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114459190810190613a45565b9050600085905060098360ff1611156114835760098360ff1603600a0a818161146a57fe5b04905060098360ff1603600a0a828161147f57fe5b0491505b670de0b6b3a764000081111580156114a35750670de0b6b3a76400008211155b80156114b95750670de0b6b3a764000082820111155b6114c257600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b81526004016114ff9392919061401f565b602060405180830381600087803b15801561151957600080fd5b505af115801561152d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061155191908101906136c8565b5061155a6127a2565b61156357600080fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e878683604051611596939291906140b6565b60405180910390a150505050505050565b600160149054906101000a900460ff1681565b6004602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611643574790506116cf565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161167c9190613fe9565b60206040518083038186803b15801561169457600080fd5b505afa1580156116a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506116cc9190810190613a45565b90505b919050565b60006003600083815260200190815260200160002060009054906101000a900460ff16156117055760019050611813565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156117655760009050611813565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663749c5f86836040518263ffffffff1660e01b81526004016117c0919061422f565b60206040518083038186803b1580156117d857600080fd5b505afa1580156117ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061181091908101906136c8565b90505b919050565b60025481565b60008060008060008060008760008151811061183657fe5b602001015160f81c60f81b60f81c905060008860018151811061185557fe5b602001015160f81c60f81b60f81c905060008960028151811061187457fe5b602001015160f81c60f81b60f81c9050600080600060238d0151925060438d0151915060638d015190508585858585859b509b509b509b509b509b5050505050505091939550919395565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461194e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194590614365565b60405180910390fd5b600160149054906101000a900460ff161561199e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199590614345565b60405180910390fd5b60025442106119e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d9906142e5565b60405180910390fd5b60018060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051611a2b9190613fe9565b60405180910390a1565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0790614365565b60405180910390fd5b6002544210611b54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4b906142e5565b60405180910390fd5b61016e8110611b98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8f90614305565b60405180910390fd5b620151808102600254016002819055507f02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e881604051611bd79190614385565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6890614365565b60405180910390fd5b6002544210611cb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cac906142e5565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000611d058284610fd1565b905086600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611d9057600080fd5b8573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415611dc957600080fd5b6000349050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415611e0d578781019050611f39565b878973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e479190613fe9565b60206040518083038186803b158015611e5f57600080fd5b505afa158015611e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611e979190810190613a45565b1015611ea257600080fd5b8873ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878a6040518363ffffffff1660e01b8152600401611edd9291906140f4565b602060405180830381600087803b158015611ef757600080fd5b505af1158015611f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611f2f91908101906136c8565b611f3857600080fd5b5b611f4587828789612c1b565b87600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555087600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505050505050505050565b600160149054906101000a900460ff16156120b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ab90614345565b60405180910390fd5b6b033b2e3c9fd0803ce80000004711156120cd57600080fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e60008234604051612101939291906140b6565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461219b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219290614365565b60405180910390fd5b600160149054906101000a900460ff166121ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121e1906142c5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561222457600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a816040516122949190613fe9565b60405180910390a150565b60008082905060008090508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156122f057600080fd5b505afa158015612304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506123289190810190613a45565b503d60008114612343576020811461234c5760009150612358565b60009150612358565b60206000803e60005191505b508092505050919050565b60036020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160149054906101000a900460ff16156123f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ef90614345565b60405180910390fd5b612400612d5e565b6124098b6127e0565b90506048816020015160ff1614801561242957506001816040015160ff16145b61243257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff161415612481578060a0015147101561247c57600080fd5b612557565b6000612490826060015161229f565b905060098160ff1611156124b85760098160ff1603600a0a8260a00151028260a00181815250505b8160a00151826060015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016124fa9190613fe9565b60206040518083038186803b15801561251257600080fd5b505afa158015612526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061254a9190810190613a45565b101561255557600080fd5b505b6125698b8b8b8b8b8b8b8b8b8b612881565b600073ffffffffffffffffffffffffffffffffffffffff16816060015173ffffffffffffffffffffffffffffffffffffffff1614156125f657806080015173ffffffffffffffffffffffffffffffffffffffff166108fc8260a001519081150290604051600060405180830381858888f193505050501580156125f0573d6000803e3d6000fd5b506126a2565b806060015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb82608001518360a001516040518363ffffffff1660e01b815260040161263d929190614056565b602060405180830381600087803b15801561265757600080fd5b505af115801561266b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061268f91908101906136c8565b506126986127a2565b6126a157600080fd5b5b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb816060015182608001518360a001516040516126e19392919061407f565b60405180910390a15050505050505050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600080600090503d600081146127bf57602081146127c8576127d4565b600191506127d4565b60206000803e60005191505b50600081141591505090565b6127e8612d5e565b6000806000806000806127fa8861181e565b95509550955095509550955061280e612d5e565b6040518060c001604052808860ff1681526020018760ff1681526020018660ff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815250905080975050505050505050919050565b60008a80519060200120905060008b8b60006002811061289d57fe5b60200201516040516020016128b3929190613fa6565b60405160208183030381529060405280519060200120905060008c8c6001600281106128db57fe5b60200201516040516020016128f1929190613fa6565b604051602081830303815290604052805190602001209050612912836116d4565b1561291c57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166001848f60006002811061296a57fe5b60200201518f60006002811061297c57fe5b60200201518f60006002811061298e57fe5b60200201518f6000600281106129a057fe5b60200201518f6000600281106129b257fe5b60200201518f6000600281106129c457fe5b60200201518f6000600281106129d657fe5b60200201518f6000600281106129e857fe5b60200201518f6000600281106129fa57fe5b60200201516040518c63ffffffff1660e01b8152600401612a259b9a9998979695949392919061415a565b60206040518083038186803b158015612a3d57600080fd5b505afa158015612a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a7591908101906136c8565b612a7e57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166000838f600160028110612acc57fe5b60200201518f600160028110612ade57fe5b60200201518f600160028110612af057fe5b60200201518f600160028110612b0257fe5b60200201518f600160028110612b1457fe5b60200201518f600160028110612b2657fe5b60200201518f600160028110612b3857fe5b60200201518f600160028110612b4a57fe5b60200201518f600160028110612b5c57fe5b60200201516040518c63ffffffff1660e01b8152600401612b879b9a9998979695949392919061415a565b60206040518083038186803b158015612b9f57600080fd5b505afa158015612bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612bd791908101906136c8565b612be057600080fd5b60016003600085815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050505050505050505050565b6000612c2685611605565b9050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415612c635734810390505b83471015612c7057600080fd5b600060608373ffffffffffffffffffffffffffffffffffffffff168686604051612c9a9190613f8f565b60006040518083038185875af1925050503d8060008114612cd7576040519150601f19603f3d011682016040523d82523d6000602084013e612cdc565b606091505b509150915081612ceb57600080fd5b60008082806020019051612d02919081019061348b565b915091508873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148015612d4a57508085612d478b611605565b03145b612d5357600080fd5b505050505050505050565b6040518060c00160405280600060ff168152602001600060ff168152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600081359050612dd8816148d0565b92915050565b600081359050612ded816148e7565b92915050565b600081519050612e02816148e7565b92915050565b600082601f830112612e1957600080fd5b8135612e2c612e2782614449565b61441c565b91508181835260208401935060208101905083856020840282011115612e5157600080fd5b60005b83811015612e815781612e678882612dc9565b845260208401935060208301925050600181019050612e54565b5050505092915050565b600082601f830112612e9c57600080fd5b6002612eaf612eaa82614471565b61441c565b9150818360005b83811015612ee65781358601612ecc888261301f565b845260208401935060208301925050600181019050612eb6565b5050505092915050565b600082601f830112612f0157600080fd5b6002612f14612f0f82614493565b61441c565b9150818360005b83811015612f4b5781358601612f318882613116565b845260208401935060208301925050600181019050612f1b565b5050505092915050565b600082601f830112612f6657600080fd5b6002612f79612f74826144b5565b61441c565b9150818360005b83811015612fb05781358601612f96888261320d565b845260208401935060208301925050600181019050612f80565b5050505092915050565b600082601f830112612fcb57600080fd5b6002612fde612fd9826144d7565b61441c565b9150818360005b838110156130155781358601612ffb8882613290565b845260208401935060208301925050600181019050612fe5565b5050505092915050565b600082601f83011261303057600080fd5b813561304361303e826144f9565b61441c565b9150818183526020840193506020810190508385602084028201111561306857600080fd5b60005b83811015613098578161307e8882613313565b84526020840193506020830192505060018101905061306b565b5050505092915050565b600082601f8301126130b357600080fd5b60026130c66130c182614521565b61441c565b915081838560208402820111156130dc57600080fd5b60005b8381101561310c57816130f2888261333d565b8452602084019350602083019250506001810190506130df565b5050505092915050565b600082601f83011261312757600080fd5b813561313a61313582614543565b61441c565b9150818183526020840193506020810190508385602084028201111561315f57600080fd5b60005b8381101561318f5781613175888261333d565b845260208401935060208301925050600181019050613162565b5050505092915050565b600082601f8301126131aa57600080fd5b60026131bd6131b88261456b565b61441c565b915081838560208402820111156131d357600080fd5b60005b8381101561320357816131e988826133fa565b8452602084019350602083019250506001810190506131d6565b5050505092915050565b600082601f83011261321e57600080fd5b813561323161322c8261458d565b61441c565b9150818183526020840193506020810190508385602084028201111561325657600080fd5b60005b83811015613286578161326c88826133fa565b845260208401935060208301925050600181019050613259565b5050505092915050565b600082601f8301126132a157600080fd5b81356132b46132af826145b5565b61441c565b915081818352602084019350602081019050838560208402820111156132d957600080fd5b60005b8381101561330957816132ef8882613424565b8452602084019350602083019250506001810190506132dc565b5050505092915050565b600081359050613322816148fe565b92915050565b600081519050613337816148fe565b92915050565b60008135905061334c81614915565b92915050565b600082601f83011261336357600080fd5b8135613376613371826145dd565b61441c565b9150808252602083016020830185838301111561339257600080fd5b61339d838284614873565b50505092915050565b600082601f8301126133b757600080fd5b81356133ca6133c582614609565b61441c565b915080825260208301602083018583830111156133e657600080fd5b6133f1838284614873565b50505092915050565b6000813590506134098161492c565b92915050565b60008151905061341e8161492c565b92915050565b60008135905061343381614943565b92915050565b60006020828403121561344b57600080fd5b600061345984828501612dc9565b91505092915050565b60006020828403121561347457600080fd5b600061348284828501612dde565b91505092915050565b6000806040838503121561349e57600080fd5b60006134ac85828601612df3565b92505060206134bd8582860161340f565b9150509250929050565b600080604083850312156134da57600080fd5b60006134e885828601612dc9565b92505060206134f985828601612dc9565b9150509250929050565b60008060006060848603121561351857600080fd5b600061352686828701612dc9565b935050602061353786828701612dc9565b9250506040613548868287016133fa565b9150509250925092565b600080600080600080600060e0888a03121561356d57600080fd5b600061357b8a828b01612dc9565b975050602061358c8a828b016133fa565b965050604061359d8a828b01612dc9565b95505060606135ae8a828b01612dc9565b945050608088013567ffffffffffffffff8111156135cb57600080fd5b6135d78a828b01613352565b93505060a06135e88a828b0161333d565b92505060c088013567ffffffffffffffff81111561360557600080fd5b6136118a828b01613352565b91505092959891949750929550565b60008060006060848603121561363557600080fd5b600061364386828701612dc9565b9350506020613654868287016133fa565b925050604084013567ffffffffffffffff81111561367157600080fd5b61367d868287016133a6565b9150509250925092565b60006020828403121561369957600080fd5b600082013567ffffffffffffffff8111156136b357600080fd5b6136bf84828501612e08565b91505092915050565b6000602082840312156136da57600080fd5b60006136e884828501613328565b91505092915050565b60006020828403121561370357600080fd5b60006137118482850161333d565b91505092915050565b60006020828403121561372c57600080fd5b600082013567ffffffffffffffff81111561374657600080fd5b61375284828501613352565b91505092915050565b6000806000806000806000806000806101a08b8d03121561377b57600080fd5b60008b013567ffffffffffffffff81111561379557600080fd5b6137a18d828e01613352565b9a505060206137b28d828e01613199565b99505060608b013567ffffffffffffffff8111156137cf57600080fd5b6137db8d828e01612ef0565b98505060808b013567ffffffffffffffff8111156137f857600080fd5b6138048d828e01612e8b565b97505060a06138158d828e016130a2565b96505060e06138268d828e016130a2565b9550506101208b013567ffffffffffffffff81111561384457600080fd5b6138508d828e01612f55565b9450506101408b013567ffffffffffffffff81111561386e57600080fd5b61387a8d828e01612fba565b9350506101608b013567ffffffffffffffff81111561389857600080fd5b6138a48d828e01612ef0565b9250506101808b013567ffffffffffffffff8111156138c257600080fd5b6138ce8d828e01612ef0565b9150509295989b9194979a5092959850565b600080604083850312156138f357600080fd5b600083013567ffffffffffffffff81111561390d57600080fd5b61391985828601613352565b925050602061392a8582860161333d565b9150509250929050565b60006020828403121561394657600080fd5b600082013567ffffffffffffffff81111561396057600080fd5b61396c848285016133a6565b91505092915050565b600080600080600060a0868803121561398d57600080fd5b600086013567ffffffffffffffff8111156139a757600080fd5b6139b3888289016133a6565b95505060206139c488828901612dc9565b94505060406139d5888289016133fa565b935050606086013567ffffffffffffffff8111156139f257600080fd5b6139fe88828901613352565b9250506080613a0f8882890161333d565b9150509295509295909350565b600060208284031215613a2e57600080fd5b6000613a3c848285016133fa565b91505092915050565b600060208284031215613a5757600080fd5b6000613a658482850161340f565b91505092915050565b6000613a7a8383613b04565b60208301905092915050565b6000613a928383613cf8565b60208301905092915050565b6000613aaa8383613d16565b60208301905092915050565b6000613ac28383613f3c565b60208301905092915050565b6000613ada8383613f71565b60208301905092915050565b613aef816147f5565b82525050565b613afe81614796565b82525050565b613b0d81614784565b82525050565b613b1c81614784565b82525050565b6000613b2d82614685565b613b378185614713565b9350613b4283614635565b8060005b83811015613b73578151613b5a8882613a6e565b9750613b65836146d2565b925050600181019050613b46565b5085935050505092915050565b6000613b8b82614690565b613b958185614724565b9350613ba083614645565b8060005b83811015613bd1578151613bb88882613a86565b9750613bc3836146df565b925050600181019050613ba4565b5085935050505092915050565b6000613be98261469b565b613bf38185614735565b9350613bfe83614655565b8060005b83811015613c2f578151613c168882613a9e565b9750613c21836146ec565b925050600181019050613c02565b5085935050505092915050565b6000613c47826146a6565b613c518185614746565b9350613c5c83614665565b8060005b83811015613c8d578151613c748882613ab6565b9750613c7f836146f9565b925050600181019050613c60565b5085935050505092915050565b6000613ca5826146b1565b613caf8185614757565b9350613cba83614675565b8060005b83811015613ceb578151613cd28882613ace565b9750613cdd83614706565b925050600181019050613cbe565b5085935050505092915050565b613d01816147a8565b82525050565b613d10816147a8565b82525050565b613d1f816147b4565b82525050565b613d2e816147b4565b82525050565b6000613d3f826146bc565b613d498185614768565b9350613d59818560208601614882565b80840191505092915050565b613d6e81614807565b82525050565b613d7d8161482b565b82525050565b6000613d8e826146c7565b613d988185614773565b9350613da8818560208601614882565b613db1816148bf565b840191505092915050565b6000613dc9601483614773565b91507f6e6f7420706175736564207269676874206e6f770000000000000000000000006000830152602082019050919050565b6000613e09600783614773565b91507f65787069726564000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613e49601a83614773565b91507f63616e6e6f7420657874656e6420666f7220746f6f206c6f6e670000000000006000830152602082019050919050565b6000613e89600c83614773565b91507f756e617574686f72697a656400000000000000000000000000000000000000006000830152602082019050919050565b6000613ec9601083614773565b91507f706175736564207269676874206e6f77000000000000000000000000000000006000830152602082019050919050565b6000613f09600983614773565b91507f6e6f742061646d696e00000000000000000000000000000000000000000000006000830152602082019050919050565b613f45816147de565b82525050565b613f54816147de565b82525050565b613f6b613f66826147de565b6148b5565b82525050565b613f7a816147e8565b82525050565b613f89816147e8565b82525050565b6000613f9b8284613d34565b915081905092915050565b6000613fb28285613d34565b9150613fbe8284613f5a565b6020820191508190509392505050565b6000602082019050613fe36000830184613b13565b92915050565b6000602082019050613ffe6000830184613ae6565b92915050565b60006020820190506140196000830184613af5565b92915050565b60006060820190506140346000830186613ae6565b6140416020830185613ae6565b61404e6040830184613f4b565b949350505050565b600060408201905061406b6000830185613ae6565b6140786020830184613f4b565b9392505050565b60006060820190506140946000830186613b13565b6140a16020830185613ae6565b6140ae6040830184613f4b565b949350505050565b60006060820190506140cb6000830186613b13565b81810360208301526140dd8185613d83565b90506140ec6040830184613f4b565b949350505050565b60006040820190506141096000830185613b13565b6141166020830184613f4b565b9392505050565b600060208201905081810360008301526141378184613b22565b905092915050565b60006020820190506141546000830184613d07565b92915050565b600061016082019050614170600083018e613d07565b61417d602083018d613d25565b61418a604083018c613f4b565b818103606083015261419c818b613bde565b905081810360808301526141b0818a613b80565b90506141bf60a0830189613d25565b6141cc60c0830188613d25565b81810360e08301526141de8187613c3c565b90508181036101008301526141f38186613c9a565b90508181036101208301526142088185613bde565b905081810361014083015261421d8184613bde565b90509c9b505050505050505050505050565b60006020820190506142446000830184613d25565b92915050565b600060808201905061425f6000830187613d25565b61426c6020830186613f80565b6142796040830185613d25565b6142866060830184613d25565b95945050505050565b60006020820190506142a46000830184613d65565b92915050565b60006020820190506142bf6000830184613d74565b92915050565b600060208201905081810360008301526142de81613dbc565b9050919050565b600060208201905081810360008301526142fe81613dfc565b9050919050565b6000602082019050818103600083015261431e81613e3c565b9050919050565b6000602082019050818103600083015261433e81613e7c565b9050919050565b6000602082019050818103600083015261435e81613ebc565b9050919050565b6000602082019050818103600083015261437e81613efc565b9050919050565b600060208201905061439a6000830184613f4b565b92915050565b60006020820190506143b56000830184613f80565b92915050565b600060c0820190506143d06000830189613f80565b6143dd6020830188613f80565b6143ea6040830187613f80565b6143f76060830186613b13565b6144046080830185613af5565b61441160a0830184613f4b565b979650505050505050565b6000604051905081810181811067ffffffffffffffff8211171561443f57600080fd5b8060405250919050565b600067ffffffffffffffff82111561446057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561448857600080fd5b602082029050919050565b600067ffffffffffffffff8211156144aa57600080fd5b602082029050919050565b600067ffffffffffffffff8211156144cc57600080fd5b602082029050919050565b600067ffffffffffffffff8211156144ee57600080fd5b602082029050919050565b600067ffffffffffffffff82111561451057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561453857600080fd5b602082029050919050565b600067ffffffffffffffff82111561455a57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561458257600080fd5b602082029050919050565b600067ffffffffffffffff8211156145a457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156145cc57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156145f457600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561462057600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061478f826147be565b9050919050565b60006147a1826147be565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006148008261484f565b9050919050565b600061481282614819565b9050919050565b6000614824826147be565b9050919050565b60006148368261483d565b9050919050565b6000614848826147be565b9050919050565b600061485a82614861565b9050919050565b600061486c826147be565b9050919050565b82818337600083830152505050565b60005b838110156148a0578082015181840152602081019050614885565b838111156148af576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b6148d981614784565b81146148e457600080fd5b50565b6148f081614796565b81146148fb57600080fd5b50565b614907816147a8565b811461491257600080fd5b50565b61491e816147b4565b811461492957600080fd5b50565b614935816147de565b811461494057600080fd5b50565b61494c816147e8565b811461495757600080fd5b5056fea365627a7a723158200a87e5f336a642721edca69d5e2094c8ec210fd84c5d05673e34a9ef31e931d26c6578706572696d656e74616cf564736f6c63430005100040"

// DeployIncmode deploys a new Ethereum contract, binding an instance of Incmode to it.
func DeployIncmode(auth *bind.TransactOpts, backend bind.ContractBackend, admin common.Address, incognitoProxyAddress common.Address, _prevVault common.Address) (common.Address, *types.Transaction, *Incmode, error) {
	parsed, err := abi.JSON(strings.NewReader(IncmodeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IncmodeBin), backend, admin, incognitoProxyAddress, _prevVault)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Incmode{IncmodeCaller: IncmodeCaller{contract: contract}, IncmodeTransactor: IncmodeTransactor{contract: contract}, IncmodeFilterer: IncmodeFilterer{contract: contract}}, nil
}

// Incmode is an auto generated Go binding around an Ethereum contract.
type Incmode struct {
	IncmodeCaller     // Read-only binding to the contract
	IncmodeTransactor // Write-only binding to the contract
	IncmodeFilterer   // Log filterer for contract events
}

// IncmodeCaller is an auto generated read-only Go binding around an Ethereum contract.
type IncmodeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IncmodeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IncmodeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IncmodeSession struct {
	Contract     *Incmode          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IncmodeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IncmodeCallerSession struct {
	Contract *IncmodeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IncmodeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IncmodeTransactorSession struct {
	Contract     *IncmodeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IncmodeRaw is an auto generated low-level Go binding around an Ethereum contract.
type IncmodeRaw struct {
	Contract *Incmode // Generic contract binding to access the raw methods on
}

// IncmodeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IncmodeCallerRaw struct {
	Contract *IncmodeCaller // Generic read-only contract binding to access the raw methods on
}

// IncmodeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IncmodeTransactorRaw struct {
	Contract *IncmodeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIncmode creates a new instance of Incmode, bound to a specific deployed contract.
func NewIncmode(address common.Address, backend bind.ContractBackend) (*Incmode, error) {
	contract, err := bindIncmode(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Incmode{IncmodeCaller: IncmodeCaller{contract: contract}, IncmodeTransactor: IncmodeTransactor{contract: contract}, IncmodeFilterer: IncmodeFilterer{contract: contract}}, nil
}

// NewIncmodeCaller creates a new read-only instance of Incmode, bound to a specific deployed contract.
func NewIncmodeCaller(address common.Address, caller bind.ContractCaller) (*IncmodeCaller, error) {
	contract, err := bindIncmode(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IncmodeCaller{contract: contract}, nil
}

// NewIncmodeTransactor creates a new write-only instance of Incmode, bound to a specific deployed contract.
func NewIncmodeTransactor(address common.Address, transactor bind.ContractTransactor) (*IncmodeTransactor, error) {
	contract, err := bindIncmode(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IncmodeTransactor{contract: contract}, nil
}

// NewIncmodeFilterer creates a new log filterer instance of Incmode, bound to a specific deployed contract.
func NewIncmodeFilterer(address common.Address, filterer bind.ContractFilterer) (*IncmodeFilterer, error) {
	contract, err := bindIncmode(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IncmodeFilterer{contract: contract}, nil
}

// bindIncmode binds a generic wrapper to an already deployed contract.
func bindIncmode(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IncmodeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incmode *IncmodeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Incmode.Contract.IncmodeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incmode *IncmodeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.Contract.IncmodeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incmode *IncmodeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incmode.Contract.IncmodeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incmode *IncmodeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Incmode.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incmode *IncmodeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incmode *IncmodeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incmode.Contract.contract.Transact(opts, method, params...)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeCaller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "ETH_TOKEN")
	return *ret0, err
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeSession) ETHTOKEN() (common.Address, error) {
	return _Incmode.Contract.ETHTOKEN(&_Incmode.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeCallerSession) ETHTOKEN() (common.Address, error) {
	return _Incmode.Contract.ETHTOKEN(&_Incmode.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "admin")
	return *ret0, err
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeSession) Admin() (common.Address, error) {
	return _Incmode.Contract.Admin(&_Incmode.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeCallerSession) Admin() (common.Address, error) {
	return _Incmode.Contract.Admin(&_Incmode.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) constant returns(uint256)
func (_Incmode *IncmodeCaller) BalanceOf(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "balanceOf", token)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) constant returns(uint256)
func (_Incmode *IncmodeSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Incmode.Contract.BalanceOf(&_Incmode.CallOpts, token)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) constant returns(uint256)
func (_Incmode *IncmodeCallerSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Incmode.Contract.BalanceOf(&_Incmode.CallOpts, token)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeCaller) Expire(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "expire")
	return *ret0, err
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeSession) Expire() (*big.Int, error) {
	return _Incmode.Contract.Expire(&_Incmode.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeCallerSession) Expire() (*big.Int, error) {
	return _Incmode.Contract.Expire(&_Incmode.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeCaller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "getDecimals", token)
	return *ret0, err
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeSession) GetDecimals(token common.Address) (uint8, error) {
	return _Incmode.Contract.GetDecimals(&_Incmode.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeCallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _Incmode.Contract.GetDecimals(&_Incmode.CallOpts, token)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeCaller) Incognito(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "incognito")
	return *ret0, err
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeSession) Incognito() (common.Address, error) {
	return _Incmode.Contract.Incognito(&_Incmode.CallOpts)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeCallerSession) Incognito() (common.Address, error) {
	return _Incmode.Contract.Incognito(&_Incmode.CallOpts)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeCaller) IsWithdrawed(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "isWithdrawed", hash)
	return *ret0, err
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Incmode.Contract.IsWithdrawed(&_Incmode.CallOpts, hash)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeCallerSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Incmode.Contract.IsWithdrawed(&_Incmode.CallOpts, hash)
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeCaller) NewVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "newVault")
	return *ret0, err
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeSession) NewVault() (common.Address, error) {
	return _Incmode.Contract.NewVault(&_Incmode.CallOpts)
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeCallerSession) NewVault() (common.Address, error) {
	return _Incmode.Contract.NewVault(&_Incmode.CallOpts)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeCaller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (uint8, uint8, uint8, common.Address, common.Address, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(uint8)
		ret3 = new(common.Address)
		ret4 = new(common.Address)
		ret5 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
		ret5,
	}
	err := _Incmode.contract.Call(opts, out, "parseBurnInst", inst)
	return *ret0, *ret1, *ret2, *ret3, *ret4, *ret5, err
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeSession) ParseBurnInst(inst []byte) (uint8, uint8, uint8, common.Address, common.Address, *big.Int, error) {
	return _Incmode.Contract.ParseBurnInst(&_Incmode.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeCallerSession) ParseBurnInst(inst []byte) (uint8, uint8, uint8, common.Address, common.Address, *big.Int, error) {
	return _Incmode.Contract.ParseBurnInst(&_Incmode.CallOpts, inst)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeSession) Paused() (bool, error) {
	return _Incmode.Contract.Paused(&_Incmode.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeCallerSession) Paused() (bool, error) {
	return _Incmode.Contract.Paused(&_Incmode.CallOpts)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeCaller) PrevVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "prevVault")
	return *ret0, err
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeSession) PrevVault() (common.Address, error) {
	return _Incmode.Contract.PrevVault(&_Incmode.CallOpts)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeCallerSession) PrevVault() (common.Address, error) {
	return _Incmode.Contract.PrevVault(&_Incmode.CallOpts)
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) constant returns(address)
func (_Incmode *IncmodeCaller) SigToAddress(opts *bind.CallOpts, signData []byte, hash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "sigToAddress", signData, hash)
	return *ret0, err
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) constant returns(address)
func (_Incmode *IncmodeSession) SigToAddress(signData []byte, hash [32]byte) (common.Address, error) {
	return _Incmode.Contract.SigToAddress(&_Incmode.CallOpts, signData, hash)
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) constant returns(address)
func (_Incmode *IncmodeCallerSession) SigToAddress(signData []byte, hash [32]byte) (common.Address, error) {
	return _Incmode.Contract.SigToAddress(&_Incmode.CallOpts, signData, hash)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeCaller) Successor(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "successor")
	return *ret0, err
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeSession) Successor() (common.Address, error) {
	return _Incmode.Contract.Successor(&_Incmode.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeCallerSession) Successor() (common.Address, error) {
	return _Incmode.Contract.Successor(&_Incmode.CallOpts)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeCaller) WithdrawRequests(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "withdrawRequests", arg0, arg1)
	return *ret0, err
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Incmode.Contract.WithdrawRequests(&_Incmode.CallOpts, arg0, arg1)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeCallerSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Incmode.Contract.WithdrawRequests(&_Incmode.CallOpts, arg0, arg1)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeCaller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "withdrawed", arg0)
	return *ret0, err
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Incmode.Contract.Withdrawed(&_Incmode.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeCallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Incmode.Contract.Withdrawed(&_Incmode.CallOpts, arg0)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeTransactor) Claim(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "claim")
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeSession) Claim() (*types.Transaction, error) {
	return _Incmode.Contract.Claim(&_Incmode.TransactOpts)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeTransactorSession) Claim() (*types.Transaction, error) {
	return _Incmode.Contract.Claim(&_Incmode.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeTransactor) Deposit(opts *bind.TransactOpts, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "deposit", incognitoAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeSession) Deposit(incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.Deposit(&_Incmode.TransactOpts, incognitoAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeTransactorSession) Deposit(incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.Deposit(&_Incmode.TransactOpts, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeTransactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "depositERC20", token, amount, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.DepositERC20(&_Incmode.TransactOpts, token, amount, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeTransactorSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.DepositERC20(&_Incmode.TransactOpts, token, amount, incognitoAddress)
}

// Execute is a paid mutator transaction binding the contract method 0xa0c0f9b8.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes32 hash, bytes signData) returns()
func (_Incmode *IncmodeTransactor) Execute(opts *bind.TransactOpts, token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, hash [32]byte, signData []byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "execute", token, amount, recipientToken, exchangeAddress, callData, hash, signData)
}

// Execute is a paid mutator transaction binding the contract method 0xa0c0f9b8.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes32 hash, bytes signData) returns()
func (_Incmode *IncmodeSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, hash [32]byte, signData []byte) (*types.Transaction, error) {
	return _Incmode.Contract.Execute(&_Incmode.TransactOpts, token, amount, recipientToken, exchangeAddress, callData, hash, signData)
}

// Execute is a paid mutator transaction binding the contract method 0xa0c0f9b8.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes32 hash, bytes signData) returns()
func (_Incmode *IncmodeTransactorSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, hash [32]byte, signData []byte) (*types.Transaction, error) {
	return _Incmode.Contract.Execute(&_Incmode.TransactOpts, token, amount, recipientToken, exchangeAddress, callData, hash, signData)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeTransactor) Extend(opts *bind.TransactOpts, n *big.Int) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "extend", n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.Extend(&_Incmode.TransactOpts, n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeTransactorSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.Extend(&_Incmode.TransactOpts, n)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeTransactor) Migrate(opts *bind.TransactOpts, _newVault common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "migrate", _newVault)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeSession) Migrate(_newVault common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Migrate(&_Incmode.TransactOpts, _newVault)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeTransactorSession) Migrate(_newVault common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Migrate(&_Incmode.TransactOpts, _newVault)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeTransactor) MoveAssets(opts *bind.TransactOpts, assets []common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "moveAssets", assets)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeSession) MoveAssets(assets []common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.MoveAssets(&_Incmode.TransactOpts, assets)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeTransactorSession) MoveAssets(assets []common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.MoveAssets(&_Incmode.TransactOpts, assets)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeSession) Pause() (*types.Transaction, error) {
	return _Incmode.Contract.Pause(&_Incmode.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeTransactorSession) Pause() (*types.Transaction, error) {
	return _Incmode.Contract.Pause(&_Incmode.TransactOpts)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x5654b6c8.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes32 hash) returns()
func (_Incmode *IncmodeTransactor) RequestWithdraw(opts *bind.TransactOpts, incognitoAddress string, token common.Address, amount *big.Int, signData []byte, hash [32]byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "requestWithdraw", incognitoAddress, token, amount, signData, hash)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x5654b6c8.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes32 hash) returns()
func (_Incmode *IncmodeSession) RequestWithdraw(incognitoAddress string, token common.Address, amount *big.Int, signData []byte, hash [32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.RequestWithdraw(&_Incmode.TransactOpts, incognitoAddress, token, amount, signData, hash)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x5654b6c8.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes32 hash) returns()
func (_Incmode *IncmodeTransactorSession) RequestWithdraw(incognitoAddress string, token common.Address, amount *big.Int, signData []byte, hash [32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.RequestWithdraw(&_Incmode.TransactOpts, incognitoAddress, token, amount, signData, hash)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeTransactor) Retire(opts *bind.TransactOpts, _successor common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "retire", _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeSession) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Retire(&_Incmode.TransactOpts, _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeTransactorSession) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Retire(&_Incmode.TransactOpts, _successor)
}

// SetAmount is a paid mutator transaction binding the contract method 0xfaf7f494.
//
// Solidity: function setAmount(address verifier, address sellToken, uint256 amount) returns()
func (_Incmode *IncmodeTransactor) SetAmount(opts *bind.TransactOpts, verifier common.Address, sellToken common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "setAmount", verifier, sellToken, amount)
}

// SetAmount is a paid mutator transaction binding the contract method 0xfaf7f494.
//
// Solidity: function setAmount(address verifier, address sellToken, uint256 amount) returns()
func (_Incmode *IncmodeSession) SetAmount(verifier common.Address, sellToken common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.SetAmount(&_Incmode.TransactOpts, verifier, sellToken, amount)
}

// SetAmount is a paid mutator transaction binding the contract method 0xfaf7f494.
//
// Solidity: function setAmount(address verifier, address sellToken, uint256 amount) returns()
func (_Incmode *IncmodeTransactorSession) SetAmount(verifier common.Address, sellToken common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.SetAmount(&_Incmode.TransactOpts, verifier, sellToken, amount)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactor) SubmitBurnProof(opts *bind.TransactOpts, inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "submitBurnProof", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeSession) SubmitBurnProof(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.SubmitBurnProof(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactorSession) SubmitBurnProof(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.SubmitBurnProof(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeSession) Unpause() (*types.Transaction, error) {
	return _Incmode.Contract.Unpause(&_Incmode.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeTransactorSession) Unpause() (*types.Transaction, error) {
	return _Incmode.Contract.Unpause(&_Incmode.TransactOpts)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeTransactor) UpdateIncognitoProxy(opts *bind.TransactOpts, newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "updateIncognitoProxy", newIncognitoProxy)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeSession) UpdateIncognitoProxy(newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.UpdateIncognitoProxy(&_Incmode.TransactOpts, newIncognitoProxy)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeTransactorSession) UpdateIncognitoProxy(newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.UpdateIncognitoProxy(&_Incmode.TransactOpts, newIncognitoProxy)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactor) Withdraw(opts *bind.TransactOpts, inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "withdraw", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeSession) Withdraw(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.Withdraw(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactorSession) Withdraw(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.Withdraw(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// IncmodeClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the Incmode contract.
type IncmodeClaimIterator struct {
	Event *IncmodeClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeClaim represents a Claim event raised by the Incmode contract.
type IncmodeClaim struct {
	Claimer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Incmode *IncmodeFilterer) FilterClaim(opts *bind.FilterOpts) (*IncmodeClaimIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return &IncmodeClaimIterator{contract: _Incmode.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Incmode *IncmodeFilterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *IncmodeClaim) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeClaim)
				if err := _Incmode.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaim is a log parse operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Incmode *IncmodeFilterer) ParseClaim(log types.Log) (*IncmodeClaim, error) {
	event := new(IncmodeClaim)
	if err := _Incmode.contract.UnpackLog(event, "Claim", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Incmode contract.
type IncmodeDepositIterator struct {
	Event *IncmodeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeDeposit represents a Deposit event raised by the Incmode contract.
type IncmodeDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterDeposit(opts *bind.FilterOpts) (*IncmodeDepositIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &IncmodeDepositIterator{contract: _Incmode.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *IncmodeDeposit) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeDeposit)
				if err := _Incmode.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) ParseDeposit(log types.Log) (*IncmodeDeposit, error) {
	event := new(IncmodeDeposit)
	if err := _Incmode.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeExtendIterator is returned from FilterExtend and is used to iterate over the raw logs and unpacked data for Extend events raised by the Incmode contract.
type IncmodeExtendIterator struct {
	Event *IncmodeExtend // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeExtendIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeExtend)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeExtend)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeExtendIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeExtendIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeExtend represents a Extend event raised by the Incmode contract.
type IncmodeExtend struct {
	Ndays *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterExtend is a free log retrieval operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Incmode *IncmodeFilterer) FilterExtend(opts *bind.FilterOpts) (*IncmodeExtendIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return &IncmodeExtendIterator{contract: _Incmode.contract, event: "Extend", logs: logs, sub: sub}, nil
}

// WatchExtend is a free log subscription operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Incmode *IncmodeFilterer) WatchExtend(opts *bind.WatchOpts, sink chan<- *IncmodeExtend) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeExtend)
				if err := _Incmode.contract.UnpackLog(event, "Extend", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExtend is a log parse operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Incmode *IncmodeFilterer) ParseExtend(log types.Log) (*IncmodeExtend, error) {
	event := new(IncmodeExtend)
	if err := _Incmode.contract.UnpackLog(event, "Extend", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeMigrateIterator is returned from FilterMigrate and is used to iterate over the raw logs and unpacked data for Migrate events raised by the Incmode contract.
type IncmodeMigrateIterator struct {
	Event *IncmodeMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeMigrate represents a Migrate event raised by the Incmode contract.
type IncmodeMigrate struct {
	NewVault common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMigrate is a free log retrieval operation binding the contract event 0xd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a.
//
// Solidity: event Migrate(address newVault)
func (_Incmode *IncmodeFilterer) FilterMigrate(opts *bind.FilterOpts) (*IncmodeMigrateIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return &IncmodeMigrateIterator{contract: _Incmode.contract, event: "Migrate", logs: logs, sub: sub}, nil
}

// WatchMigrate is a free log subscription operation binding the contract event 0xd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a.
//
// Solidity: event Migrate(address newVault)
func (_Incmode *IncmodeFilterer) WatchMigrate(opts *bind.WatchOpts, sink chan<- *IncmodeMigrate) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeMigrate)
				if err := _Incmode.contract.UnpackLog(event, "Migrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMigrate is a log parse operation binding the contract event 0xd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a.
//
// Solidity: event Migrate(address newVault)
func (_Incmode *IncmodeFilterer) ParseMigrate(log types.Log) (*IncmodeMigrate, error) {
	event := new(IncmodeMigrate)
	if err := _Incmode.contract.UnpackLog(event, "Migrate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeMoveAssetsIterator is returned from FilterMoveAssets and is used to iterate over the raw logs and unpacked data for MoveAssets events raised by the Incmode contract.
type IncmodeMoveAssetsIterator struct {
	Event *IncmodeMoveAssets // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeMoveAssetsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeMoveAssets)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeMoveAssets)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeMoveAssetsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeMoveAssetsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeMoveAssets represents a MoveAssets event raised by the Incmode contract.
type IncmodeMoveAssets struct {
	Assets []common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMoveAssets is a free log retrieval operation binding the contract event 0x492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce658.
//
// Solidity: event MoveAssets(address[] assets)
func (_Incmode *IncmodeFilterer) FilterMoveAssets(opts *bind.FilterOpts) (*IncmodeMoveAssetsIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "MoveAssets")
	if err != nil {
		return nil, err
	}
	return &IncmodeMoveAssetsIterator{contract: _Incmode.contract, event: "MoveAssets", logs: logs, sub: sub}, nil
}

// WatchMoveAssets is a free log subscription operation binding the contract event 0x492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce658.
//
// Solidity: event MoveAssets(address[] assets)
func (_Incmode *IncmodeFilterer) WatchMoveAssets(opts *bind.WatchOpts, sink chan<- *IncmodeMoveAssets) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "MoveAssets")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeMoveAssets)
				if err := _Incmode.contract.UnpackLog(event, "MoveAssets", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMoveAssets is a log parse operation binding the contract event 0x492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce658.
//
// Solidity: event MoveAssets(address[] assets)
func (_Incmode *IncmodeFilterer) ParseMoveAssets(log types.Log) (*IncmodeMoveAssets, error) {
	event := new(IncmodeMoveAssets)
	if err := _Incmode.contract.UnpackLog(event, "MoveAssets", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Incmode contract.
type IncmodePausedIterator struct {
	Event *IncmodePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodePaused represents a Paused event raised by the Incmode contract.
type IncmodePaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Incmode *IncmodeFilterer) FilterPaused(opts *bind.FilterOpts) (*IncmodePausedIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &IncmodePausedIterator{contract: _Incmode.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Incmode *IncmodeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *IncmodePaused) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodePaused)
				if err := _Incmode.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Incmode *IncmodeFilterer) ParsePaused(log types.Log) (*IncmodePaused, error) {
	event := new(IncmodePaused)
	if err := _Incmode.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeTradeIterator is returned from FilterTrade and is used to iterate over the raw logs and unpacked data for Trade events raised by the Incmode contract.
type IncmodeTradeIterator struct {
	Event *IncmodeTrade // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeTradeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeTrade)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeTrade)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeTradeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeTradeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeTrade represents a Trade event raised by the Incmode contract.
type IncmodeTrade struct {
	IncognitoAddress string
	Token            common.Address
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterTrade is a free log retrieval operation binding the contract event 0x68ae6030d8e5a42e79b7dd481f18c425a779d1b6816487681116ffca8356ac49.
//
// Solidity: event Trade(string incognitoAddress, address token, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterTrade(opts *bind.FilterOpts) (*IncmodeTradeIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Trade")
	if err != nil {
		return nil, err
	}
	return &IncmodeTradeIterator{contract: _Incmode.contract, event: "Trade", logs: logs, sub: sub}, nil
}

// WatchTrade is a free log subscription operation binding the contract event 0x68ae6030d8e5a42e79b7dd481f18c425a779d1b6816487681116ffca8356ac49.
//
// Solidity: event Trade(string incognitoAddress, address token, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchTrade(opts *bind.WatchOpts, sink chan<- *IncmodeTrade) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Trade")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeTrade)
				if err := _Incmode.contract.UnpackLog(event, "Trade", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrade is a log parse operation binding the contract event 0x68ae6030d8e5a42e79b7dd481f18c425a779d1b6816487681116ffca8356ac49.
//
// Solidity: event Trade(string incognitoAddress, address token, uint256 amount)
func (_Incmode *IncmodeFilterer) ParseTrade(log types.Log) (*IncmodeTrade, error) {
	event := new(IncmodeTrade)
	if err := _Incmode.contract.UnpackLog(event, "Trade", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Incmode contract.
type IncmodeUnpausedIterator struct {
	Event *IncmodeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeUnpaused represents a Unpaused event raised by the Incmode contract.
type IncmodeUnpaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Incmode *IncmodeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*IncmodeUnpausedIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &IncmodeUnpausedIterator{contract: _Incmode.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Incmode *IncmodeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *IncmodeUnpaused) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeUnpaused)
				if err := _Incmode.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Incmode *IncmodeFilterer) ParseUnpaused(log types.Log) (*IncmodeUnpaused, error) {
	event := new(IncmodeUnpaused)
	if err := _Incmode.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeUpdateIncognitoProxyIterator is returned from FilterUpdateIncognitoProxy and is used to iterate over the raw logs and unpacked data for UpdateIncognitoProxy events raised by the Incmode contract.
type IncmodeUpdateIncognitoProxyIterator struct {
	Event *IncmodeUpdateIncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeUpdateIncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeUpdateIncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeUpdateIncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeUpdateIncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeUpdateIncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeUpdateIncognitoProxy represents a UpdateIncognitoProxy event raised by the Incmode contract.
type IncmodeUpdateIncognitoProxy struct {
	NewIncognitoProxy common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUpdateIncognitoProxy is a free log retrieval operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Incmode *IncmodeFilterer) FilterUpdateIncognitoProxy(opts *bind.FilterOpts) (*IncmodeUpdateIncognitoProxyIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &IncmodeUpdateIncognitoProxyIterator{contract: _Incmode.contract, event: "UpdateIncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchUpdateIncognitoProxy is a free log subscription operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Incmode *IncmodeFilterer) WatchUpdateIncognitoProxy(opts *bind.WatchOpts, sink chan<- *IncmodeUpdateIncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeUpdateIncognitoProxy)
				if err := _Incmode.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateIncognitoProxy is a log parse operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Incmode *IncmodeFilterer) ParseUpdateIncognitoProxy(log types.Log) (*IncmodeUpdateIncognitoProxy, error) {
	event := new(IncmodeUpdateIncognitoProxy)
	if err := _Incmode.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Incmode contract.
type IncmodeWithdrawIterator struct {
	Event *IncmodeWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeWithdraw represents a Withdraw event raised by the Incmode contract.
type IncmodeWithdraw struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterWithdraw(opts *bind.FilterOpts) (*IncmodeWithdrawIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &IncmodeWithdrawIterator{contract: _Incmode.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *IncmodeWithdraw) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeWithdraw)
				if err := _Incmode.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Incmode *IncmodeFilterer) ParseWithdraw(log types.Log) (*IncmodeWithdraw, error) {
	event := new(IncmodeWithdraw)
	if err := _Incmode.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeWithdrawRequestIterator is returned from FilterWithdrawRequest and is used to iterate over the raw logs and unpacked data for WithdrawRequest events raised by the Incmode contract.
type IncmodeWithdrawRequestIterator struct {
	Event *IncmodeWithdrawRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeWithdrawRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeWithdrawRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeWithdrawRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeWithdrawRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeWithdrawRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeWithdrawRequest represents a WithdrawRequest event raised by the Incmode contract.
type IncmodeWithdrawRequest struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterWithdrawRequest is a free log retrieval operation binding the contract event 0x392a40e1ff76f04543dc851cc0c7ad40bb9db5d3f672f27d1aa3e5c089533af5.
//
// Solidity: event WithdrawRequest(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterWithdrawRequest(opts *bind.FilterOpts) (*IncmodeWithdrawRequestIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "WithdrawRequest")
	if err != nil {
		return nil, err
	}
	return &IncmodeWithdrawRequestIterator{contract: _Incmode.contract, event: "WithdrawRequest", logs: logs, sub: sub}, nil
}

// WatchWithdrawRequest is a free log subscription operation binding the contract event 0x392a40e1ff76f04543dc851cc0c7ad40bb9db5d3f672f27d1aa3e5c089533af5.
//
// Solidity: event WithdrawRequest(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchWithdrawRequest(opts *bind.WatchOpts, sink chan<- *IncmodeWithdrawRequest) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "WithdrawRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeWithdrawRequest)
				if err := _Incmode.contract.UnpackLog(event, "WithdrawRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawRequest is a log parse operation binding the contract event 0x392a40e1ff76f04543dc851cc0c7ad40bb9db5d3f672f27d1aa3e5c089533af5.
//
// Solidity: event WithdrawRequest(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) ParseWithdrawRequest(log types.Log) (*IncmodeWithdrawRequest, error) {
	event := new(IncmodeWithdrawRequest)
	if err := _Incmode.contract.UnpackLog(event, "WithdrawRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}
