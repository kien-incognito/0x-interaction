// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package incmode

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IncmodeABI is the input ABI used to generate the binding from.
const IncmodeABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incognitoProxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prevVault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ndays\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"MoveAssets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"UpdateIncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incognito\",\"outputs\":[{\"internalType\":\"contractIncognito\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newVault\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevVault\",\"outputs\":[{\"internalType\":\"contractWithdrawable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_successor\",\"type\":\"address\"}],\"name\":\"retire\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sigDataUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"successor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDepositedToSCAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"}],\"name\":\"depositERC20\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"heights\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"instPaths\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bool[][2]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[][2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"instRoots\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"blkData\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256[][2]\",\"name\":\"sigIdxs\",\"type\":\"uint256[][2]\"},{\"internalType\":\"uint8[][2]\",\"name\":\"sigVs\",\"type\":\"uint8[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigRs\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigSs\",\"type\":\"bytes32[][2]\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"heights\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"instPaths\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bool[][2]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[][2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"instRoots\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"blkData\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256[][2]\",\"name\":\"sigIdxs\",\"type\":\"uint256[][2]\"},{\"internalType\":\"uint8[][2]\",\"name\":\"sigVs\",\"type\":\"uint8[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigRs\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigSs\",\"type\":\"bytes32[][2]\"}],\"name\":\"submitBurnProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"sigToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isSigDataUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getDepositedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_newVault\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"moveAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"updateIncognitoProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// IncmodeBin is the compiled bytecode used for deploying new contracts.
const IncmodeBin = `0x60806040523480156200001157600080fd5b506040516200527338038062005273833981810160405262000037919081019062000185565b82806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083151502179055506301e1338042016002819055505081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000229565b6000815190506200017f816200020f565b92915050565b6000806000606084860312156200019b57600080fd5b6000620001ab868287016200016e565b9350506020620001be868287016200016e565b9250506040620001d1868287016200016e565b9150509250925092565b6000620001e882620001ef565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200021a81620001db565b81146200022657600080fd5b50565b61503a80620002396000396000f3fe60806040526004361061020b576000357c01000000000000000000000000000000000000000000000000000000009004806379599f961161012a578063a26e1186116100bd578063e4bd70741161008c578063e4bd7074146106f0578063f75b98ce1461072d578063f851a4401461076a578063f8b3974514610795578063fa84702e146107be5761020b565b8063a26e118614610631578063ce5494bb1461064d578063cf54aaa014610676578063dca40d9e146106b35761020b565b80638a984538116100f95780638a984538146105985780639714378c146105c35780639e6371ba146105ec578063a0c0f9b8146106155761020b565b806379599f96146104ea5780637e16e6e1146105155780638456cb591461055657806388aaf0c81461056d5761020b565b806358bc8337116101a257806365b5a00f1161017157806365b5a00f146104085780636ff968c31461044557806370a0823114610470578063749c5f86146104ad5761020b565b806358bc8337146103595780635a67cb87146103845780635c975abb146103a05780636304541c146103cb5761020b565b80633f4ba83a116101de5780633f4ba83a146102c55780633fec6b40146102dc5780634e71d92d146103195780635654b6c8146103305761020b565b80630c4f50391461020d5780631ea1940e146102365780633a51913d146102735780633cb4b58a1461029c575b005b34801561021957600080fd5b50610234600480360361022f9190810190613d32565b6107e9565b005b34801561024257600080fd5b5061025d60048036036102589190810190613d9c565b610bff565b60405161026a91906147ea565b60405180910390f35b34801561027f57600080fd5b5061029a60048036036102959190810190613b33565b610c1f565b005b3480156102a857600080fd5b506102c360048036036102be9190810190613e06565b610db2565b005b3480156102d157600080fd5b506102da6110f1565b005b3480156102e857600080fd5b5061030360048036036102fe9190810190613f8b565b611223565b6040516103109190614679565b60405180910390f35b34801561032557600080fd5b5061032e611310565b005b34801561033c57600080fd5b5061035760048036036103529190810190614020565b6114a0565b005b34801561036557600080fd5b5061036e611690565b60405161037b9190614679565b60405180910390f35b61039e60048036036103999190810190613ccb565b611695565b005b3480156103ac57600080fd5b506103b561191c565b6040516103c291906147ea565b60405180910390f35b3480156103d757600080fd5b506103f260048036036103ed9190810190613b33565b61192f565b6040516103ff9190614a30565b60405180910390f35b34801561041457600080fd5b5061042f600480360361042a9190810190613bc1565b611947565b60405161043c9190614a30565b60405180910390f35b34801561045157600080fd5b5061045a61196c565b6040516104679190614679565b60405180910390f35b34801561047c57600080fd5b5061049760048036036104929190810190613b33565b611992565b6040516104a49190614a30565b60405180910390f35b3480156104b957600080fd5b506104d460048036036104cf9190810190613d9c565b611a94565b6040516104e191906147ea565b60405180910390f35b3480156104f657600080fd5b506104ff611bf4565b60405161050c9190614a30565b60405180910390f35b34801561052157600080fd5b5061053c60048036036105379190810190613dc5565b611bfa565b60405161054d959493929190614a66565b60405180910390f35b34801561056257600080fd5b5061056b611d34565b005b34801561057957600080fd5b50610582611eaa565b60405161058f91906146af565b60405180910390f35b3480156105a457600080fd5b506105ad611ed0565b6040516105ba919061493a565b60405180910390f35b3480156105cf57600080fd5b506105ea60048036036105e591908101906140c7565b611ef6565b005b3480156105f857600080fd5b50610613600480360361060e9190810190613b33565b612057565b005b61062f600480360361062a9190810190613bfd565b61216e565b005b61064b60048036036106469190810190613fdf565b6125ef565b005b34801561065957600080fd5b50610674600480360361066f9190810190613b5c565b6126ae565b005b34801561068257600080fd5b5061069d60048036036106989190810190613b33565b612841565b6040516106aa9190614a4b565b60405180910390f35b3480156106bf57600080fd5b506106da60048036036106d59190810190613d9c565b612921565b6040516106e791906147ea565b60405180910390f35b3480156106fc57600080fd5b5061071760048036036107129190810190613d9c565b612941565b60405161072491906147ea565b60405180910390f35b34801561073957600080fd5b50610754600480360361074f9190810190613bc1565b612aa1565b6040516107619190614a30565b60405180910390f35b34801561077657600080fd5b5061077f612b28565b60405161078c9190614679565b60405180910390f35b3480156107a157600080fd5b506107bc60048036036107b79190810190613e06565b612b4d565b005b3480156107ca57600080fd5b506107d3612f2d565b6040516107e09190614955565b60405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610878576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086f90614a10565b60405180910390fd5b600160149054906101000a900460ff166108c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108be90614970565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561092357600080fd5b60008090505b8151811015610bc457600073ffffffffffffffffffffffffffffffffffffffff1682828151811061095657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156109ff57600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156109f9573d6000803e3d6000fd5b50610bb7565b6000828281518110610a0d57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610a699190614694565b60206040518083038186803b158015610a8157600080fd5b505afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ab991908101906140f0565b90506000811115610bb557828281518110610ad057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610b50929190614701565b602060405180830381600087803b158015610b6a57600080fd5b505af1158015610b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610ba29190810190613d73565b50610bab612f53565b610bb457600080fd5b5b505b8080600101915050610929565b507f492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce65881604051610bf491906147c8565b60405180910390a150565b60046020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca590614a10565b60405180910390fd5b600160149054906101000a900460ff16610cfd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf490614970565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d3757600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c344681604051610da79190614679565b60405180910390a150565b600160149054906101000a900460ff1615610e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df9906149f0565b60405180910390fd5b6000806000806000610e138f611bfa565b9450945094509450945060618560ff16148015610e33575060018460ff16145b610e3c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610edb57600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481013073ffffffffffffffffffffffffffffffffffffffff16311015610ed657600080fd5b610ff7565b6000610ee684612841565b905060098160ff161115610f035760098160ff1603600a0a820291505b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482018473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401610f9a9190614694565b60206040518083038186803b158015610fb257600080fd5b505afa158015610fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610fea91908101906140f0565b1015610ff557600080fd5b505b6110098f8f8f8f8f8f8f8f8f8f612f91565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555080600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505050505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611180576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117790614a10565b60405180910390fd5b600160149054906101000a900460ff166111cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c690614970565b60405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336040516112199190614694565b60405180910390a1565b6000806000806020860151915060408601519250601b8660408151811061124657fe5b60200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004019050600185828486604051600081526020016040526040516112d994939291906148f5565b6020604051602081039080840390855afa1580156112fb573d6000803e3d6000fd5b50505060206040510351935050505092915050565b6002544210611354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134b90614990565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113db906149d0565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516114969190614679565b60405180910390a1565b6114a981612941565b156114b357600080fd5b60006114bf8383611223565b905083600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561154a57600080fd5b60016004600084815260200190815260200160002060006101000a81548160ff02191690831515021790555083600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555083600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e85878660405161168093929190614761565b60405180910390a1505050505050565b600081565b600160149054906101000a900460ff16156116e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116dc906149f0565b60405180910390fd5b600083905060006116f585612841565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161174e9190614694565b60206040518083038186803b15801561176657600080fd5b505afa15801561177a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061179e91908101906140f0565b9050600085905060098360ff1611156117dc5760098360ff1603600a0a81816117c357fe5b04905060098360ff1603600a0a82816117d857fe5b0491505b670de0b6b3a764000081111580156117fc5750670de0b6b3a76400008211155b80156118125750670de0b6b3a764000082820111155b61181b57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611874939291906146ca565b602060405180830381600087803b15801561188e57600080fd5b505af11580156118a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506118c69190810190613d73565b506118cf612f53565b6118d857600080fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e87868360405161190b93929190614761565b60405180910390a150505050505050565b600160149054906101000a900460ff1681565b60066020528060005260406000206000915090505481565b6005602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119e7573073ffffffffffffffffffffffffffffffffffffffff16319050611a8f565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611a3c9190614694565b60206040518083038186803b158015611a5457600080fd5b505afa158015611a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a8c91908101906140f0565b90505b919050565b60006003600083815260200190815260200160002060009054906101000a900460ff1615611ac55760019050611bef565b600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611b255760009050611bef565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663749c5f86836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401611b9c91906148da565b60206040518083038186803b158015611bb457600080fd5b505afa158015611bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611bec9190810190613d73565b90505b919050565b60025481565b60008060008060008086600081518110611c1057fe5b60200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090049050600087600181518110611c8e57fe5b60200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090049050600080600060228b0151925060428b0151915060628b01519050848484848499509950995099509950505050505091939590929450565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611dc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dba90614a10565b60405180910390fd5b600160149054906101000a900460ff1615611e13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0a906149f0565b60405180910390fd5b6002544210611e57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4e90614990565b60405180910390fd5b60018060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051611ea09190614694565b60405180910390a1565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7c90614a10565b60405180910390fd5b6002544210611fc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc090614990565b60405180910390fd5b61016e811061200d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612004906149b0565b60405180910390fd5b620151808102600254016002819055507f02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e88160405161204c9190614a30565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120dd90614a10565b60405180910390fd5b600254421061212a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212190614990565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61217782612941565b1561218157600080fd5b600061218d8284611223565b905086600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561221857600080fd5b8573ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141561225157600080fd5b60016004600085815260200190815260200160002060006101000a81548160ff0219169083151502179055506000349050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614156122c1578781019050612425565b878973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123179190614694565b60206040518083038186803b15801561232f57600080fd5b505afa158015612343573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061236791908101906140f0565b101561237257600080fd5b8873ffffffffffffffffffffffffffffffffffffffff1663a9059cbb878a6040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016123c992919061479f565b602060405180830381600087803b1580156123e357600080fd5b505af11580156123f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061241b9190810190613d73565b61242457600080fd5b5b60006124338883888a613363565b905088600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555088600660008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555050505050505050505050565b600160149054906101000a900460ff161561263f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612636906149f0565b60405180910390fd5b6b033b2e3c9fd0803ce80000003073ffffffffffffffffffffffffffffffffffffffff1631111561266f57600080fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e600082346040516126a393929190614761565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461273d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273490614a10565b60405180910390fd5b600160149054906101000a900460ff1661278c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161278390614970565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156127c657600080fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a816040516128369190614694565b60405180910390a150565b60008082905060008090508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156128ae57600080fd5b505afa1580156128c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506128e691908101906140f0565b503d60008114612901576020811461290a5760009150612916565b60009150612916565b60206000803e60005191505b508092505050919050565b60036020528060005260406000206000915054906101000a900460ff1681565b60006004600083815260200190815260200160002060009054906101000a900460ff16156129725760019050612a9c565b600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156129d25760009050612a9c565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e4bd7074836040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612a4991906148da565b60206040518083038186803b158015612a6157600080fd5b505afa158015612a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a999190810190613d73565b90505b919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160149054906101000a900460ff1615612b9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b94906149f0565b60405180910390fd5b6000806000806000612bae8f611bfa565b9450945094509450945060488560ff16148015612bce575060018460ff16145b612bd757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612c7657600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481013073ffffffffffffffffffffffffffffffffffffffff16311015612c7157600080fd5b612d92565b6000612c8184612841565b905060098160ff161115612c9e5760098160ff1603600a0a820291505b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482018473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d359190614694565b60206040518083038186803b158015612d4d57600080fd5b505afa158015612d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612d8591908101906140f0565b1015612d9057600080fd5b505b612da48f8f8f8f8f8f8f8f8f8f612f91565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612e25578173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612e1f573d6000803e3d6000fd5b50612ee1565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612e7c929190614701565b602060405180830381600087803b158015612e9657600080fd5b505af1158015612eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612ece9190810190613d73565b50612ed7612f53565b612ee057600080fd5b5b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb838383604051612f149392919061472a565b60405180910390a1505050505050505050505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090503d60008114612f705760208114612f7957612f85565b60019150612f85565b60206000803e60005191505b50600081141591505090565b60008a80519060200120905060008b8b600060028110612fad57fe5b6020020151604051602001612fc3929190614651565b60405160208183030381529060405280519060200120905060008c8c600160028110612feb57fe5b6020020151604051602001613001929190614651565b60405160208183030381529060405280519060200120905061302283611a94565b1561302c57600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166001848f60006002811061307a57fe5b60200201518f60006002811061308c57fe5b60200201518f60006002811061309e57fe5b60200201518f6000600281106130b057fe5b60200201518f6000600281106130c257fe5b60200201518f6000600281106130d457fe5b60200201518f6000600281106130e657fe5b60200201518f6000600281106130f857fe5b60200201518f60006002811061310a57fe5b60200201516040518c63ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016131519b9a99989796959493929190614805565b60206040518083038186803b15801561316957600080fd5b505afa15801561317d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506131a19190810190613d73565b6131aa57600080fd5b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166000838f6001600281106131f857fe5b60200201518f60016002811061320a57fe5b60200201518f60016002811061321c57fe5b60200201518f60016002811061322e57fe5b60200201518f60016002811061324057fe5b60200201518f60016002811061325257fe5b60200201518f60016002811061326457fe5b60200201518f60016002811061327657fe5b60200201518f60016002811061328857fe5b60200201516040518c63ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016132cf9b9a99989796959493929190614805565b60206040518083038186803b1580156132e757600080fd5b505afa1580156132fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061331f9190810190613d73565b61332857600080fd5b60016003600085815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050505050505050505050565b60008061336f86611992565b9050600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156133ac5734810390505b843073ffffffffffffffffffffffffffffffffffffffff163110156133d057600080fd5b600060608473ffffffffffffffffffffffffffffffffffffffff1687876040516133fa919061463a565b60006040518083038185875af1925050503d8060008114613437576040519150601f19603f3d011682016040523d82523d6000602084013e61343c565b606091505b50915091508161344b57600080fd5b600080828060200190516134629190810190613b85565b915091508973ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161480156134aa575080856134a78c611992565b03145b6134b357600080fd5b8095505050505050949350505050565b6000813590506134d281614f6d565b92915050565b6000813590506134e781614f84565b92915050565b6000815190506134fc81614f84565b92915050565b600082601f83011261351357600080fd5b813561352661352182614ae6565b614ab9565b9150818183526020840193506020810190508385602084028201111561354b57600080fd5b60005b8381101561357b578161356188826134c3565b84526020840193506020830192505060018101905061354e565b5050505092915050565b600082601f83011261359657600080fd5b60026135a96135a482614b0e565b614ab9565b9150818360005b838110156135e057813586016135c68882613719565b8452602084019350602083019250506001810190506135b0565b5050505092915050565b600082601f8301126135fb57600080fd5b600261360e61360982614b30565b614ab9565b9150818360005b83811015613645578135860161362b8882613810565b845260208401935060208301925050600181019050613615565b5050505092915050565b600082601f83011261366057600080fd5b600261367361366e82614b52565b614ab9565b9150818360005b838110156136aa57813586016136908882613907565b84526020840193506020830192505060018101905061367a565b5050505092915050565b600082601f8301126136c557600080fd5b60026136d86136d382614b74565b614ab9565b9150818360005b8381101561370f57813586016136f5888261398a565b8452602084019350602083019250506001810190506136df565b5050505092915050565b600082601f83011261372a57600080fd5b813561373d61373882614b96565b614ab9565b9150818183526020840193506020810190508385602084028201111561376257600080fd5b60005b8381101561379257816137788882613a0d565b845260208401935060208301925050600181019050613765565b5050505092915050565b600082601f8301126137ad57600080fd5b60026137c06137bb82614bbe565b614ab9565b915081838560208402820111156137d657600080fd5b60005b8381101561380657816137ec8882613a37565b8452602084019350602083019250506001810190506137d9565b5050505092915050565b600082601f83011261382157600080fd5b813561383461382f82614be0565b614ab9565b9150818183526020840193506020810190508385602084028201111561385957600080fd5b60005b83811015613889578161386f8882613a37565b84526020840193506020830192505060018101905061385c565b5050505092915050565b600082601f8301126138a457600080fd5b60026138b76138b282614c08565b614ab9565b915081838560208402820111156138cd57600080fd5b60005b838110156138fd57816138e38882613af4565b8452602084019350602083019250506001810190506138d0565b5050505092915050565b600082601f83011261391857600080fd5b813561392b61392682614c2a565b614ab9565b9150818183526020840193506020810190508385602084028201111561395057600080fd5b60005b8381101561398057816139668882613af4565b845260208401935060208301925050600181019050613953565b5050505092915050565b600082601f83011261399b57600080fd5b81356139ae6139a982614c52565b614ab9565b915081818352602084019350602081019050838560208402820111156139d357600080fd5b60005b83811015613a0357816139e98882613b1e565b8452602084019350602083019250506001810190506139d6565b5050505092915050565b600081359050613a1c81614f9b565b92915050565b600081519050613a3181614f9b565b92915050565b600081359050613a4681614fb2565b92915050565b600082601f830112613a5d57600080fd5b8135613a70613a6b82614c7a565b614ab9565b91508082526020830160208301858383011115613a8c57600080fd5b613a97838284614f10565b50505092915050565b600082601f830112613ab157600080fd5b8135613ac4613abf82614ca6565b614ab9565b91508082526020830160208301858383011115613ae057600080fd5b613aeb838284614f10565b50505092915050565b600081359050613b0381614fc9565b92915050565b600081519050613b1881614fc9565b92915050565b600081359050613b2d81614fe0565b92915050565b600060208284031215613b4557600080fd5b6000613b53848285016134c3565b91505092915050565b600060208284031215613b6e57600080fd5b6000613b7c848285016134d8565b91505092915050565b60008060408385031215613b9857600080fd5b6000613ba6858286016134ed565b9250506020613bb785828601613b09565b9150509250929050565b60008060408385031215613bd457600080fd5b6000613be2858286016134c3565b9250506020613bf3858286016134c3565b9150509250929050565b600080600080600080600060e0888a031215613c1857600080fd5b6000613c268a828b016134c3565b9750506020613c378a828b01613af4565b9650506040613c488a828b016134c3565b9550506060613c598a828b016134c3565b945050608088013567ffffffffffffffff811115613c7657600080fd5b613c828a828b01613a4c565b93505060a0613c938a828b01613a37565b92505060c088013567ffffffffffffffff811115613cb057600080fd5b613cbc8a828b01613a4c565b91505092959891949750929550565b600080600060608486031215613ce057600080fd5b6000613cee868287016134c3565b9350506020613cff86828701613af4565b925050604084013567ffffffffffffffff811115613d1c57600080fd5b613d2886828701613aa0565b9150509250925092565b600060208284031215613d4457600080fd5b600082013567ffffffffffffffff811115613d5e57600080fd5b613d6a84828501613502565b91505092915050565b600060208284031215613d8557600080fd5b6000613d9384828501613a22565b91505092915050565b600060208284031215613dae57600080fd5b6000613dbc84828501613a37565b91505092915050565b600060208284031215613dd757600080fd5b600082013567ffffffffffffffff811115613df157600080fd5b613dfd84828501613a4c565b91505092915050565b6000806000806000806000806000806101a08b8d031215613e2657600080fd5b60008b013567ffffffffffffffff811115613e4057600080fd5b613e4c8d828e01613a4c565b9a50506020613e5d8d828e01613893565b99505060608b013567ffffffffffffffff811115613e7a57600080fd5b613e868d828e016135ea565b98505060808b013567ffffffffffffffff811115613ea357600080fd5b613eaf8d828e01613585565b97505060a0613ec08d828e0161379c565b96505060e0613ed18d828e0161379c565b9550506101208b013567ffffffffffffffff811115613eef57600080fd5b613efb8d828e0161364f565b9450506101408b013567ffffffffffffffff811115613f1957600080fd5b613f258d828e016136b4565b9350506101608b013567ffffffffffffffff811115613f4357600080fd5b613f4f8d828e016135ea565b9250506101808b013567ffffffffffffffff811115613f6d57600080fd5b613f798d828e016135ea565b9150509295989b9194979a5092959850565b60008060408385031215613f9e57600080fd5b600083013567ffffffffffffffff811115613fb857600080fd5b613fc485828601613a4c565b9250506020613fd585828601613a37565b9150509250929050565b600060208284031215613ff157600080fd5b600082013567ffffffffffffffff81111561400b57600080fd5b61401784828501613aa0565b91505092915050565b600080600080600060a0868803121561403857600080fd5b600086013567ffffffffffffffff81111561405257600080fd5b61405e88828901613aa0565b955050602061406f888289016134c3565b945050604061408088828901613af4565b935050606086013567ffffffffffffffff81111561409d57600080fd5b6140a988828901613a4c565b92505060806140ba88828901613a37565b9150509295509295909350565b6000602082840312156140d957600080fd5b60006140e784828501613af4565b91505092915050565b60006020828403121561410257600080fd5b600061411084828501613b09565b91505092915050565b600061412583836141af565b60208301905092915050565b600061413d83836143a3565b60208301905092915050565b600061415583836143c1565b60208301905092915050565b600061416d83836145e7565b60208301905092915050565b6000614185838361461c565b60208301905092915050565b61419a81614e92565b82525050565b6141a981614e33565b82525050565b6141b881614e21565b82525050565b6141c781614e21565b82525050565b60006141d882614d22565b6141e28185614db0565b93506141ed83614cd2565b8060005b8381101561421e5781516142058882614119565b975061421083614d6f565b9250506001810190506141f1565b5085935050505092915050565b600061423682614d2d565b6142408185614dc1565b935061424b83614ce2565b8060005b8381101561427c5781516142638882614131565b975061426e83614d7c565b92505060018101905061424f565b5085935050505092915050565b600061429482614d38565b61429e8185614dd2565b93506142a983614cf2565b8060005b838110156142da5781516142c18882614149565b97506142cc83614d89565b9250506001810190506142ad565b5085935050505092915050565b60006142f282614d43565b6142fc8185614de3565b935061430783614d02565b8060005b8381101561433857815161431f8882614161565b975061432a83614d96565b92505060018101905061430b565b5085935050505092915050565b600061435082614d4e565b61435a8185614df4565b935061436583614d12565b8060005b8381101561439657815161437d8882614179565b975061438883614da3565b925050600181019050614369565b5085935050505092915050565b6143ac81614e45565b82525050565b6143bb81614e45565b82525050565b6143ca81614e51565b82525050565b6143d981614e51565b82525050565b60006143ea82614d59565b6143f48185614e05565b9350614404818560208601614f1f565b80840191505092915050565b61441981614ea4565b82525050565b61442881614ec8565b82525050565b600061443982614d64565b6144438185614e10565b9350614453818560208601614f1f565b61445c81614f5c565b840191505092915050565b6000614474601483614e10565b91507f6e6f7420706175736564207269676874206e6f770000000000000000000000006000830152602082019050919050565b60006144b4600783614e10565b91507f65787069726564000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006144f4601a83614e10565b91507f63616e6e6f7420657874656e6420666f7220746f6f206c6f6e670000000000006000830152602082019050919050565b6000614534600c83614e10565b91507f756e617574686f72697a656400000000000000000000000000000000000000006000830152602082019050919050565b6000614574601083614e10565b91507f706175736564207269676874206e6f77000000000000000000000000000000006000830152602082019050919050565b60006145b4600983614e10565b91507f6e6f742061646d696e00000000000000000000000000000000000000000000006000830152602082019050919050565b6145f081614e7b565b82525050565b6145ff81614e7b565b82525050565b61461661461182614e7b565b614f52565b82525050565b61462581614e85565b82525050565b61463481614e85565b82525050565b600061464682846143df565b915081905092915050565b600061465d82856143df565b91506146698284614605565b6020820191508190509392505050565b600060208201905061468e60008301846141be565b92915050565b60006020820190506146a96000830184614191565b92915050565b60006020820190506146c460008301846141a0565b92915050565b60006060820190506146df6000830186614191565b6146ec6020830185614191565b6146f960408301846145f6565b949350505050565b60006040820190506147166000830185614191565b61472360208301846145f6565b9392505050565b600060608201905061473f60008301866141be565b61474c6020830185614191565b61475960408301846145f6565b949350505050565b600060608201905061477660008301866141be565b8181036020830152614788818561442e565b905061479760408301846145f6565b949350505050565b60006040820190506147b460008301856141be565b6147c160208301846145f6565b9392505050565b600060208201905081810360008301526147e281846141cd565b905092915050565b60006020820190506147ff60008301846143b2565b92915050565b60006101608201905061481b600083018e6143b2565b614828602083018d6143d0565b614835604083018c6145f6565b8181036060830152614847818b614289565b9050818103608083015261485b818a61422b565b905061486a60a08301896143d0565b61487760c08301886143d0565b81810360e083015261488981876142e7565b905081810361010083015261489e8186614345565b90508181036101208301526148b38185614289565b90508181036101408301526148c88184614289565b90509c9b505050505050505050505050565b60006020820190506148ef60008301846143d0565b92915050565b600060808201905061490a60008301876143d0565b614917602083018661462b565b61492460408301856143d0565b61493160608301846143d0565b95945050505050565b600060208201905061494f6000830184614410565b92915050565b600060208201905061496a600083018461441f565b92915050565b6000602082019050818103600083015261498981614467565b9050919050565b600060208201905081810360008301526149a9816144a7565b9050919050565b600060208201905081810360008301526149c9816144e7565b9050919050565b600060208201905081810360008301526149e981614527565b9050919050565b60006020820190508181036000830152614a0981614567565b9050919050565b60006020820190508181036000830152614a29816145a7565b9050919050565b6000602082019050614a4560008301846145f6565b92915050565b6000602082019050614a60600083018461462b565b92915050565b600060a082019050614a7b600083018861462b565b614a88602083018761462b565b614a9560408301866141be565b614aa260608301856141a0565b614aaf60808301846145f6565b9695505050505050565b6000604051905081810181811067ffffffffffffffff82111715614adc57600080fd5b8060405250919050565b600067ffffffffffffffff821115614afd57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115614b2557600080fd5b602082029050919050565b600067ffffffffffffffff821115614b4757600080fd5b602082029050919050565b600067ffffffffffffffff821115614b6957600080fd5b602082029050919050565b600067ffffffffffffffff821115614b8b57600080fd5b602082029050919050565b600067ffffffffffffffff821115614bad57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115614bd557600080fd5b602082029050919050565b600067ffffffffffffffff821115614bf757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115614c1f57600080fd5b602082029050919050565b600067ffffffffffffffff821115614c4157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115614c6957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115614c9157600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff821115614cbd57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000614e2c82614e5b565b9050919050565b6000614e3e82614e5b565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614e9d82614eec565b9050919050565b6000614eaf82614eb6565b9050919050565b6000614ec182614e5b565b9050919050565b6000614ed382614eda565b9050919050565b6000614ee582614e5b565b9050919050565b6000614ef782614efe565b9050919050565b6000614f0982614e5b565b9050919050565b82818337600083830152505050565b60005b83811015614f3d578082015181840152602081019050614f22565b83811115614f4c576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b614f7681614e21565b8114614f8157600080fd5b50565b614f8d81614e33565b8114614f9857600080fd5b50565b614fa481614e45565b8114614faf57600080fd5b50565b614fbb81614e51565b8114614fc657600080fd5b50565b614fd281614e7b565b8114614fdd57600080fd5b50565b614fe981614e85565b8114614ff457600080fd5b5056fea365627a7a723158204372422fe4de2a56f2a6f0a368a0fbf01154cc0552fb7afba64edbe18f2c4f156c6578706572696d656e74616cf564736f6c634300050c0040`

// DeployIncmode deploys a new Ethereum contract, binding an instance of Incmode to it.
func DeployIncmode(auth *bind.TransactOpts, backend bind.ContractBackend, admin common.Address, incognitoProxyAddress common.Address, _prevVault common.Address) (common.Address, *types.Transaction, *Incmode, error) {
	parsed, err := abi.JSON(strings.NewReader(IncmodeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IncmodeBin), backend, admin, incognitoProxyAddress, _prevVault)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Incmode{IncmodeCaller: IncmodeCaller{contract: contract}, IncmodeTransactor: IncmodeTransactor{contract: contract}, IncmodeFilterer: IncmodeFilterer{contract: contract}}, nil
}

// Incmode is an auto generated Go binding around an Ethereum contract.
type Incmode struct {
	IncmodeCaller     // Read-only binding to the contract
	IncmodeTransactor // Write-only binding to the contract
	IncmodeFilterer   // Log filterer for contract events
}

// IncmodeCaller is an auto generated read-only Go binding around an Ethereum contract.
type IncmodeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IncmodeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IncmodeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IncmodeSession struct {
	Contract     *Incmode          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IncmodeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IncmodeCallerSession struct {
	Contract *IncmodeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IncmodeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IncmodeTransactorSession struct {
	Contract     *IncmodeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IncmodeRaw is an auto generated low-level Go binding around an Ethereum contract.
type IncmodeRaw struct {
	Contract *Incmode // Generic contract binding to access the raw methods on
}

// IncmodeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IncmodeCallerRaw struct {
	Contract *IncmodeCaller // Generic read-only contract binding to access the raw methods on
}

// IncmodeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IncmodeTransactorRaw struct {
	Contract *IncmodeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIncmode creates a new instance of Incmode, bound to a specific deployed contract.
func NewIncmode(address common.Address, backend bind.ContractBackend) (*Incmode, error) {
	contract, err := bindIncmode(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Incmode{IncmodeCaller: IncmodeCaller{contract: contract}, IncmodeTransactor: IncmodeTransactor{contract: contract}, IncmodeFilterer: IncmodeFilterer{contract: contract}}, nil
}

// NewIncmodeCaller creates a new read-only instance of Incmode, bound to a specific deployed contract.
func NewIncmodeCaller(address common.Address, caller bind.ContractCaller) (*IncmodeCaller, error) {
	contract, err := bindIncmode(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IncmodeCaller{contract: contract}, nil
}

// NewIncmodeTransactor creates a new write-only instance of Incmode, bound to a specific deployed contract.
func NewIncmodeTransactor(address common.Address, transactor bind.ContractTransactor) (*IncmodeTransactor, error) {
	contract, err := bindIncmode(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IncmodeTransactor{contract: contract}, nil
}

// NewIncmodeFilterer creates a new log filterer instance of Incmode, bound to a specific deployed contract.
func NewIncmodeFilterer(address common.Address, filterer bind.ContractFilterer) (*IncmodeFilterer, error) {
	contract, err := bindIncmode(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IncmodeFilterer{contract: contract}, nil
}

// bindIncmode binds a generic wrapper to an already deployed contract.
func bindIncmode(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IncmodeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incmode *IncmodeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Incmode.Contract.IncmodeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incmode *IncmodeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.Contract.IncmodeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incmode *IncmodeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incmode.Contract.IncmodeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incmode *IncmodeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Incmode.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incmode *IncmodeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incmode *IncmodeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incmode.Contract.contract.Transact(opts, method, params...)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeCaller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "ETH_TOKEN")
	return *ret0, err
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeSession) ETHTOKEN() (common.Address, error) {
	return _Incmode.Contract.ETHTOKEN(&_Incmode.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeCallerSession) ETHTOKEN() (common.Address, error) {
	return _Incmode.Contract.ETHTOKEN(&_Incmode.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "admin")
	return *ret0, err
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeSession) Admin() (common.Address, error) {
	return _Incmode.Contract.Admin(&_Incmode.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeCallerSession) Admin() (common.Address, error) {
	return _Incmode.Contract.Admin(&_Incmode.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) constant returns(uint256)
func (_Incmode *IncmodeCaller) BalanceOf(opts *bind.CallOpts, token common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "balanceOf", token)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) constant returns(uint256)
func (_Incmode *IncmodeSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Incmode.Contract.BalanceOf(&_Incmode.CallOpts, token)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) constant returns(uint256)
func (_Incmode *IncmodeCallerSession) BalanceOf(token common.Address) (*big.Int, error) {
	return _Incmode.Contract.BalanceOf(&_Incmode.CallOpts, token)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeCaller) Expire(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "expire")
	return *ret0, err
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeSession) Expire() (*big.Int, error) {
	return _Incmode.Contract.Expire(&_Incmode.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeCallerSession) Expire() (*big.Int, error) {
	return _Incmode.Contract.Expire(&_Incmode.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeCaller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "getDecimals", token)
	return *ret0, err
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeSession) GetDecimals(token common.Address) (uint8, error) {
	return _Incmode.Contract.GetDecimals(&_Incmode.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeCallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _Incmode.Contract.GetDecimals(&_Incmode.CallOpts, token)
}

// GetDepositedBalance is a free data retrieval call binding the contract method 0xf75b98ce.
//
// Solidity: function getDepositedBalance(address token, address owner) constant returns(uint256)
func (_Incmode *IncmodeCaller) GetDepositedBalance(opts *bind.CallOpts, token common.Address, owner common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "getDepositedBalance", token, owner)
	return *ret0, err
}

// GetDepositedBalance is a free data retrieval call binding the contract method 0xf75b98ce.
//
// Solidity: function getDepositedBalance(address token, address owner) constant returns(uint256)
func (_Incmode *IncmodeSession) GetDepositedBalance(token common.Address, owner common.Address) (*big.Int, error) {
	return _Incmode.Contract.GetDepositedBalance(&_Incmode.CallOpts, token, owner)
}

// GetDepositedBalance is a free data retrieval call binding the contract method 0xf75b98ce.
//
// Solidity: function getDepositedBalance(address token, address owner) constant returns(uint256)
func (_Incmode *IncmodeCallerSession) GetDepositedBalance(token common.Address, owner common.Address) (*big.Int, error) {
	return _Incmode.Contract.GetDepositedBalance(&_Incmode.CallOpts, token, owner)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeCaller) Incognito(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "incognito")
	return *ret0, err
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeSession) Incognito() (common.Address, error) {
	return _Incmode.Contract.Incognito(&_Incmode.CallOpts)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeCallerSession) Incognito() (common.Address, error) {
	return _Incmode.Contract.Incognito(&_Incmode.CallOpts)
}

// IsSigDataUsed is a free data retrieval call binding the contract method 0xe4bd7074.
//
// Solidity: function isSigDataUsed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeCaller) IsSigDataUsed(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "isSigDataUsed", hash)
	return *ret0, err
}

// IsSigDataUsed is a free data retrieval call binding the contract method 0xe4bd7074.
//
// Solidity: function isSigDataUsed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeSession) IsSigDataUsed(hash [32]byte) (bool, error) {
	return _Incmode.Contract.IsSigDataUsed(&_Incmode.CallOpts, hash)
}

// IsSigDataUsed is a free data retrieval call binding the contract method 0xe4bd7074.
//
// Solidity: function isSigDataUsed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeCallerSession) IsSigDataUsed(hash [32]byte) (bool, error) {
	return _Incmode.Contract.IsSigDataUsed(&_Incmode.CallOpts, hash)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeCaller) IsWithdrawed(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "isWithdrawed", hash)
	return *ret0, err
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Incmode.Contract.IsWithdrawed(&_Incmode.CallOpts, hash)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeCallerSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Incmode.Contract.IsWithdrawed(&_Incmode.CallOpts, hash)
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeCaller) NewVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "newVault")
	return *ret0, err
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeSession) NewVault() (common.Address, error) {
	return _Incmode.Contract.NewVault(&_Incmode.CallOpts)
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeCallerSession) NewVault() (common.Address, error) {
	return _Incmode.Contract.NewVault(&_Incmode.CallOpts)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeCaller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (uint8, uint8, common.Address, common.Address, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(common.Address)
		ret3 = new(common.Address)
		ret4 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
	}
	err := _Incmode.contract.Call(opts, out, "parseBurnInst", inst)
	return *ret0, *ret1, *ret2, *ret3, *ret4, err
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeSession) ParseBurnInst(inst []byte) (uint8, uint8, common.Address, common.Address, *big.Int, error) {
	return _Incmode.Contract.ParseBurnInst(&_Incmode.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeCallerSession) ParseBurnInst(inst []byte) (uint8, uint8, common.Address, common.Address, *big.Int, error) {
	return _Incmode.Contract.ParseBurnInst(&_Incmode.CallOpts, inst)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeSession) Paused() (bool, error) {
	return _Incmode.Contract.Paused(&_Incmode.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeCallerSession) Paused() (bool, error) {
	return _Incmode.Contract.Paused(&_Incmode.CallOpts)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeCaller) PrevVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "prevVault")
	return *ret0, err
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeSession) PrevVault() (common.Address, error) {
	return _Incmode.Contract.PrevVault(&_Incmode.CallOpts)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeCallerSession) PrevVault() (common.Address, error) {
	return _Incmode.Contract.PrevVault(&_Incmode.CallOpts)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeCaller) SigDataUsed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "sigDataUsed", arg0)
	return *ret0, err
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _Incmode.Contract.SigDataUsed(&_Incmode.CallOpts, arg0)
}

// SigDataUsed is a free data retrieval call binding the contract method 0x1ea1940e.
//
// Solidity: function sigDataUsed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeCallerSession) SigDataUsed(arg0 [32]byte) (bool, error) {
	return _Incmode.Contract.SigDataUsed(&_Incmode.CallOpts, arg0)
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) constant returns(address)
func (_Incmode *IncmodeCaller) SigToAddress(opts *bind.CallOpts, signData []byte, hash [32]byte) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "sigToAddress", signData, hash)
	return *ret0, err
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) constant returns(address)
func (_Incmode *IncmodeSession) SigToAddress(signData []byte, hash [32]byte) (common.Address, error) {
	return _Incmode.Contract.SigToAddress(&_Incmode.CallOpts, signData, hash)
}

// SigToAddress is a free data retrieval call binding the contract method 0x3fec6b40.
//
// Solidity: function sigToAddress(bytes signData, bytes32 hash) constant returns(address)
func (_Incmode *IncmodeCallerSession) SigToAddress(signData []byte, hash [32]byte) (common.Address, error) {
	return _Incmode.Contract.SigToAddress(&_Incmode.CallOpts, signData, hash)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeCaller) Successor(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "successor")
	return *ret0, err
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeSession) Successor() (common.Address, error) {
	return _Incmode.Contract.Successor(&_Incmode.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeCallerSession) Successor() (common.Address, error) {
	return _Incmode.Contract.Successor(&_Incmode.CallOpts)
}

// TotalDepositedToSCAmount is a free data retrieval call binding the contract method 0x6304541c.
//
// Solidity: function totalDepositedToSCAmount(address ) constant returns(uint256)
func (_Incmode *IncmodeCaller) TotalDepositedToSCAmount(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "totalDepositedToSCAmount", arg0)
	return *ret0, err
}

// TotalDepositedToSCAmount is a free data retrieval call binding the contract method 0x6304541c.
//
// Solidity: function totalDepositedToSCAmount(address ) constant returns(uint256)
func (_Incmode *IncmodeSession) TotalDepositedToSCAmount(arg0 common.Address) (*big.Int, error) {
	return _Incmode.Contract.TotalDepositedToSCAmount(&_Incmode.CallOpts, arg0)
}

// TotalDepositedToSCAmount is a free data retrieval call binding the contract method 0x6304541c.
//
// Solidity: function totalDepositedToSCAmount(address ) constant returns(uint256)
func (_Incmode *IncmodeCallerSession) TotalDepositedToSCAmount(arg0 common.Address) (*big.Int, error) {
	return _Incmode.Contract.TotalDepositedToSCAmount(&_Incmode.CallOpts, arg0)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeCaller) WithdrawRequests(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "withdrawRequests", arg0, arg1)
	return *ret0, err
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Incmode.Contract.WithdrawRequests(&_Incmode.CallOpts, arg0, arg1)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeCallerSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Incmode.Contract.WithdrawRequests(&_Incmode.CallOpts, arg0, arg1)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeCaller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "withdrawed", arg0)
	return *ret0, err
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Incmode.Contract.Withdrawed(&_Incmode.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeCallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Incmode.Contract.Withdrawed(&_Incmode.CallOpts, arg0)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeTransactor) Claim(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "claim")
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeSession) Claim() (*types.Transaction, error) {
	return _Incmode.Contract.Claim(&_Incmode.TransactOpts)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeTransactorSession) Claim() (*types.Transaction, error) {
	return _Incmode.Contract.Claim(&_Incmode.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeTransactor) Deposit(opts *bind.TransactOpts, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "deposit", incognitoAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeSession) Deposit(incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.Deposit(&_Incmode.TransactOpts, incognitoAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeTransactorSession) Deposit(incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.Deposit(&_Incmode.TransactOpts, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeTransactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "depositERC20", token, amount, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.DepositERC20(&_Incmode.TransactOpts, token, amount, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeTransactorSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.DepositERC20(&_Incmode.TransactOpts, token, amount, incognitoAddress)
}

// Execute is a paid mutator transaction binding the contract method 0xa0c0f9b8.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes32 hash, bytes signData) returns()
func (_Incmode *IncmodeTransactor) Execute(opts *bind.TransactOpts, token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, hash [32]byte, signData []byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "execute", token, amount, recipientToken, exchangeAddress, callData, hash, signData)
}

// Execute is a paid mutator transaction binding the contract method 0xa0c0f9b8.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes32 hash, bytes signData) returns()
func (_Incmode *IncmodeSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, hash [32]byte, signData []byte) (*types.Transaction, error) {
	return _Incmode.Contract.Execute(&_Incmode.TransactOpts, token, amount, recipientToken, exchangeAddress, callData, hash, signData)
}

// Execute is a paid mutator transaction binding the contract method 0xa0c0f9b8.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData, bytes32 hash, bytes signData) returns()
func (_Incmode *IncmodeTransactorSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte, hash [32]byte, signData []byte) (*types.Transaction, error) {
	return _Incmode.Contract.Execute(&_Incmode.TransactOpts, token, amount, recipientToken, exchangeAddress, callData, hash, signData)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeTransactor) Extend(opts *bind.TransactOpts, n *big.Int) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "extend", n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.Extend(&_Incmode.TransactOpts, n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeTransactorSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.Extend(&_Incmode.TransactOpts, n)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeTransactor) Migrate(opts *bind.TransactOpts, _newVault common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "migrate", _newVault)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeSession) Migrate(_newVault common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Migrate(&_Incmode.TransactOpts, _newVault)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeTransactorSession) Migrate(_newVault common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Migrate(&_Incmode.TransactOpts, _newVault)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeTransactor) MoveAssets(opts *bind.TransactOpts, assets []common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "moveAssets", assets)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeSession) MoveAssets(assets []common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.MoveAssets(&_Incmode.TransactOpts, assets)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeTransactorSession) MoveAssets(assets []common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.MoveAssets(&_Incmode.TransactOpts, assets)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeSession) Pause() (*types.Transaction, error) {
	return _Incmode.Contract.Pause(&_Incmode.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeTransactorSession) Pause() (*types.Transaction, error) {
	return _Incmode.Contract.Pause(&_Incmode.TransactOpts)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x5654b6c8.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes32 hash) returns()
func (_Incmode *IncmodeTransactor) RequestWithdraw(opts *bind.TransactOpts, incognitoAddress string, token common.Address, amount *big.Int, signData []byte, hash [32]byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "requestWithdraw", incognitoAddress, token, amount, signData, hash)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x5654b6c8.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes32 hash) returns()
func (_Incmode *IncmodeSession) RequestWithdraw(incognitoAddress string, token common.Address, amount *big.Int, signData []byte, hash [32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.RequestWithdraw(&_Incmode.TransactOpts, incognitoAddress, token, amount, signData, hash)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0x5654b6c8.
//
// Solidity: function requestWithdraw(string incognitoAddress, address token, uint256 amount, bytes signData, bytes32 hash) returns()
func (_Incmode *IncmodeTransactorSession) RequestWithdraw(incognitoAddress string, token common.Address, amount *big.Int, signData []byte, hash [32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.RequestWithdraw(&_Incmode.TransactOpts, incognitoAddress, token, amount, signData, hash)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeTransactor) Retire(opts *bind.TransactOpts, _successor common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "retire", _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeSession) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Retire(&_Incmode.TransactOpts, _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeTransactorSession) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Retire(&_Incmode.TransactOpts, _successor)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactor) SubmitBurnProof(opts *bind.TransactOpts, inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "submitBurnProof", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeSession) SubmitBurnProof(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.SubmitBurnProof(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactorSession) SubmitBurnProof(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.SubmitBurnProof(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeSession) Unpause() (*types.Transaction, error) {
	return _Incmode.Contract.Unpause(&_Incmode.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeTransactorSession) Unpause() (*types.Transaction, error) {
	return _Incmode.Contract.Unpause(&_Incmode.TransactOpts)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeTransactor) UpdateIncognitoProxy(opts *bind.TransactOpts, newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "updateIncognitoProxy", newIncognitoProxy)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeSession) UpdateIncognitoProxy(newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.UpdateIncognitoProxy(&_Incmode.TransactOpts, newIncognitoProxy)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeTransactorSession) UpdateIncognitoProxy(newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.UpdateIncognitoProxy(&_Incmode.TransactOpts, newIncognitoProxy)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactor) Withdraw(opts *bind.TransactOpts, inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "withdraw", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeSession) Withdraw(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.Withdraw(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactorSession) Withdraw(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.Withdraw(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// IncmodeClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the Incmode contract.
type IncmodeClaimIterator struct {
	Event *IncmodeClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeClaim represents a Claim event raised by the Incmode contract.
type IncmodeClaim struct {
	Claimer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Incmode *IncmodeFilterer) FilterClaim(opts *bind.FilterOpts) (*IncmodeClaimIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return &IncmodeClaimIterator{contract: _Incmode.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Incmode *IncmodeFilterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *IncmodeClaim) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeClaim)
				if err := _Incmode.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Incmode contract.
type IncmodeDepositIterator struct {
	Event *IncmodeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeDeposit represents a Deposit event raised by the Incmode contract.
type IncmodeDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterDeposit(opts *bind.FilterOpts) (*IncmodeDepositIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &IncmodeDepositIterator{contract: _Incmode.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *IncmodeDeposit) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeDeposit)
				if err := _Incmode.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeExtendIterator is returned from FilterExtend and is used to iterate over the raw logs and unpacked data for Extend events raised by the Incmode contract.
type IncmodeExtendIterator struct {
	Event *IncmodeExtend // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeExtendIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeExtend)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeExtend)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeExtendIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeExtendIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeExtend represents a Extend event raised by the Incmode contract.
type IncmodeExtend struct {
	Ndays *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterExtend is a free log retrieval operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Incmode *IncmodeFilterer) FilterExtend(opts *bind.FilterOpts) (*IncmodeExtendIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return &IncmodeExtendIterator{contract: _Incmode.contract, event: "Extend", logs: logs, sub: sub}, nil
}

// WatchExtend is a free log subscription operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Incmode *IncmodeFilterer) WatchExtend(opts *bind.WatchOpts, sink chan<- *IncmodeExtend) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeExtend)
				if err := _Incmode.contract.UnpackLog(event, "Extend", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeMigrateIterator is returned from FilterMigrate and is used to iterate over the raw logs and unpacked data for Migrate events raised by the Incmode contract.
type IncmodeMigrateIterator struct {
	Event *IncmodeMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeMigrate represents a Migrate event raised by the Incmode contract.
type IncmodeMigrate struct {
	NewVault common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMigrate is a free log retrieval operation binding the contract event 0xd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a.
//
// Solidity: event Migrate(address newVault)
func (_Incmode *IncmodeFilterer) FilterMigrate(opts *bind.FilterOpts) (*IncmodeMigrateIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return &IncmodeMigrateIterator{contract: _Incmode.contract, event: "Migrate", logs: logs, sub: sub}, nil
}

// WatchMigrate is a free log subscription operation binding the contract event 0xd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a.
//
// Solidity: event Migrate(address newVault)
func (_Incmode *IncmodeFilterer) WatchMigrate(opts *bind.WatchOpts, sink chan<- *IncmodeMigrate) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeMigrate)
				if err := _Incmode.contract.UnpackLog(event, "Migrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeMoveAssetsIterator is returned from FilterMoveAssets and is used to iterate over the raw logs and unpacked data for MoveAssets events raised by the Incmode contract.
type IncmodeMoveAssetsIterator struct {
	Event *IncmodeMoveAssets // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeMoveAssetsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeMoveAssets)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeMoveAssets)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeMoveAssetsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeMoveAssetsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeMoveAssets represents a MoveAssets event raised by the Incmode contract.
type IncmodeMoveAssets struct {
	Assets []common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMoveAssets is a free log retrieval operation binding the contract event 0x492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce658.
//
// Solidity: event MoveAssets(address[] assets)
func (_Incmode *IncmodeFilterer) FilterMoveAssets(opts *bind.FilterOpts) (*IncmodeMoveAssetsIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "MoveAssets")
	if err != nil {
		return nil, err
	}
	return &IncmodeMoveAssetsIterator{contract: _Incmode.contract, event: "MoveAssets", logs: logs, sub: sub}, nil
}

// WatchMoveAssets is a free log subscription operation binding the contract event 0x492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce658.
//
// Solidity: event MoveAssets(address[] assets)
func (_Incmode *IncmodeFilterer) WatchMoveAssets(opts *bind.WatchOpts, sink chan<- *IncmodeMoveAssets) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "MoveAssets")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeMoveAssets)
				if err := _Incmode.contract.UnpackLog(event, "MoveAssets", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Incmode contract.
type IncmodePausedIterator struct {
	Event *IncmodePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodePaused represents a Paused event raised by the Incmode contract.
type IncmodePaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Incmode *IncmodeFilterer) FilterPaused(opts *bind.FilterOpts) (*IncmodePausedIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &IncmodePausedIterator{contract: _Incmode.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Incmode *IncmodeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *IncmodePaused) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodePaused)
				if err := _Incmode.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeTradeIterator is returned from FilterTrade and is used to iterate over the raw logs and unpacked data for Trade events raised by the Incmode contract.
type IncmodeTradeIterator struct {
	Event *IncmodeTrade // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeTradeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeTrade)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeTrade)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeTradeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeTradeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeTrade represents a Trade event raised by the Incmode contract.
type IncmodeTrade struct {
	IncognitoAddress string
	Token            common.Address
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterTrade is a free log retrieval operation binding the contract event 0x68ae6030d8e5a42e79b7dd481f18c425a779d1b6816487681116ffca8356ac49.
//
// Solidity: event Trade(string incognitoAddress, address token, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterTrade(opts *bind.FilterOpts) (*IncmodeTradeIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Trade")
	if err != nil {
		return nil, err
	}
	return &IncmodeTradeIterator{contract: _Incmode.contract, event: "Trade", logs: logs, sub: sub}, nil
}

// WatchTrade is a free log subscription operation binding the contract event 0x68ae6030d8e5a42e79b7dd481f18c425a779d1b6816487681116ffca8356ac49.
//
// Solidity: event Trade(string incognitoAddress, address token, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchTrade(opts *bind.WatchOpts, sink chan<- *IncmodeTrade) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Trade")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeTrade)
				if err := _Incmode.contract.UnpackLog(event, "Trade", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Incmode contract.
type IncmodeUnpausedIterator struct {
	Event *IncmodeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeUnpaused represents a Unpaused event raised by the Incmode contract.
type IncmodeUnpaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Incmode *IncmodeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*IncmodeUnpausedIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &IncmodeUnpausedIterator{contract: _Incmode.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Incmode *IncmodeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *IncmodeUnpaused) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeUnpaused)
				if err := _Incmode.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeUpdateIncognitoProxyIterator is returned from FilterUpdateIncognitoProxy and is used to iterate over the raw logs and unpacked data for UpdateIncognitoProxy events raised by the Incmode contract.
type IncmodeUpdateIncognitoProxyIterator struct {
	Event *IncmodeUpdateIncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeUpdateIncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeUpdateIncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeUpdateIncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeUpdateIncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeUpdateIncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeUpdateIncognitoProxy represents a UpdateIncognitoProxy event raised by the Incmode contract.
type IncmodeUpdateIncognitoProxy struct {
	NewIncognitoProxy common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUpdateIncognitoProxy is a free log retrieval operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Incmode *IncmodeFilterer) FilterUpdateIncognitoProxy(opts *bind.FilterOpts) (*IncmodeUpdateIncognitoProxyIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &IncmodeUpdateIncognitoProxyIterator{contract: _Incmode.contract, event: "UpdateIncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchUpdateIncognitoProxy is a free log subscription operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Incmode *IncmodeFilterer) WatchUpdateIncognitoProxy(opts *bind.WatchOpts, sink chan<- *IncmodeUpdateIncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeUpdateIncognitoProxy)
				if err := _Incmode.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Incmode contract.
type IncmodeWithdrawIterator struct {
	Event *IncmodeWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeWithdraw represents a Withdraw event raised by the Incmode contract.
type IncmodeWithdraw struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterWithdraw(opts *bind.FilterOpts) (*IncmodeWithdrawIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &IncmodeWithdrawIterator{contract: _Incmode.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *IncmodeWithdraw) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeWithdraw)
				if err := _Incmode.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// IncmodeWithdrawRequestIterator is returned from FilterWithdrawRequest and is used to iterate over the raw logs and unpacked data for WithdrawRequest events raised by the Incmode contract.
type IncmodeWithdrawRequestIterator struct {
	Event *IncmodeWithdrawRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeWithdrawRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeWithdrawRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeWithdrawRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeWithdrawRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeWithdrawRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeWithdrawRequest represents a WithdrawRequest event raised by the Incmode contract.
type IncmodeWithdrawRequest struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterWithdrawRequest is a free log retrieval operation binding the contract event 0x392a40e1ff76f04543dc851cc0c7ad40bb9db5d3f672f27d1aa3e5c089533af5.
//
// Solidity: event WithdrawRequest(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterWithdrawRequest(opts *bind.FilterOpts) (*IncmodeWithdrawRequestIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "WithdrawRequest")
	if err != nil {
		return nil, err
	}
	return &IncmodeWithdrawRequestIterator{contract: _Incmode.contract, event: "WithdrawRequest", logs: logs, sub: sub}, nil
}

// WatchWithdrawRequest is a free log subscription operation binding the contract event 0x392a40e1ff76f04543dc851cc0c7ad40bb9db5d3f672f27d1aa3e5c089533af5.
//
// Solidity: event WithdrawRequest(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchWithdrawRequest(opts *bind.WatchOpts, sink chan<- *IncmodeWithdrawRequest) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "WithdrawRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeWithdrawRequest)
				if err := _Incmode.contract.UnpackLog(event, "WithdrawRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
