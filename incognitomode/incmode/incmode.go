// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package incmode

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IncmodeABI is the input ABI used to generate the binding from.
const IncmodeABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incognitoProxyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prevVault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ndays\",\"type\":\"uint256\"}],\"name\":\"Extend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"Migrate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"MoveAssets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"UpdateIncognitoProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequest\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expire\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"extend\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"incognito\",\"outputs\":[{\"internalType\":\"contractIncognito\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newVault\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"prevVault\",\"outputs\":[{\"internalType\":\"contractWithdrawable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_successor\",\"type\":\"address\"}],\"name\":\"retire\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"successor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"withdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"}],\"name\":\"depositERC20\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isWithdrawed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"}],\"name\":\"parseBurnInst\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"heights\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"instPaths\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bool[][2]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[][2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"instRoots\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"blkData\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256[][2]\",\"name\":\"sigIdxs\",\"type\":\"uint256[][2]\"},{\"internalType\":\"uint8[][2]\",\"name\":\"sigVs\",\"type\":\"uint8[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigRs\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigSs\",\"type\":\"bytes32[][2]\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inst\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"heights\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"instPaths\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bool[][2]\",\"name\":\"instPathIsLefts\",\"type\":\"bool[][2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"instRoots\",\"type\":\"bytes32[2]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"blkData\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256[][2]\",\"name\":\"sigIdxs\",\"type\":\"uint256[][2]\"},{\"internalType\":\"uint8[][2]\",\"name\":\"sigVs\",\"type\":\"uint8[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigRs\",\"type\":\"bytes32[][2]\"},{\"internalType\":\"bytes32[][2]\",\"name\":\"sigSs\",\"type\":\"bytes32[][2]\"}],\"name\":\"submitBurnProof\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"incognitoAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipientToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_newVault\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"moveAssets\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newIncognitoProxy\",\"type\":\"address\"}],\"name\":\"updateIncognitoProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IncmodeBin is the compiled bytecode used for deploying new contracts.
var IncmodeBin = "0x60806040523480156200001157600080fd5b506040516200489138038062004891833981810160405262000037919081019062000185565b82806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083151502179055506301e1338042016002819055505081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505062000229565b6000815190506200017f816200020f565b92915050565b6000806000606084860312156200019b57600080fd5b6000620001ab868287016200016e565b9350506020620001be868287016200016e565b9250506040620001d1868287016200016e565b9150509250925092565b6000620001e882620001ef565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200021a81620001db565b81146200022657600080fd5b50565b61465880620002396000396000f3fe6080604052600436106101c25760003560e01c80638456cb59116100f7578063cf54aaa011610095578063ef074bd511610064578063ef074bd5146105f0578063f851a44014610619578063f8b3974514610644578063fa84702e1461066d576101c2565b8063cf54aaa014610531578063d2fafb191461056e578063dca40d9e14610597578063e7edbc02146105d4576101c2565b80639714378c116100d15780639714378c1461049a5780639e6371ba146104c3578063a26e1186146104ec578063ce5494bb14610508576101c2565b80638456cb591461042d57806388aaf0c8146104445780638a9845381461046f576101c2565b80635c975abb1161016457806370a082311161013e57806370a0823114610347578063749c5f861461038457806379599f96146103c15780637e16e6e1146103ec576101c2565b80635c975abb146102b457806365b5a00f146102df5780636ff968c31461031c576101c2565b80633f4ba83a116101a05780633f4ba83a1461023f5780634e71d92d1461025657806358bc83371461026d5780635a67cb8714610298576101c2565b80630c4f5039146101c45780633a51913d146101ed5780633cb4b58a14610216575b005b3480156101d057600080fd5b506101eb60048036036101e69190810190613490565b610698565b005b3480156101f957600080fd5b50610214600480360361020f919081019061322d565b610a76565b005b34801561022257600080fd5b5061023d60048036036102389190810190613564565b610c09565b005b34801561024b57600080fd5b50610254610e5d565b005b34801561026257600080fd5b5061026b610f8f565b005b34801561027957600080fd5b5061028261111f565b60405161028f9190613cdc565b60405180910390f35b6102b260048036036102ad9190810190613429565b611124565b005b3480156102c057600080fd5b506102c9611373565b6040516102d69190613e4d565b60405180910390f35b3480156102eb57600080fd5b50610306600480360361030191908101906132bb565b611386565b604051610313919061404e565b60405180910390f35b34801561032857600080fd5b506103316113ab565b60405161033e9190613cdc565b60405180910390f35b34801561035357600080fd5b5061036e6004803603610369919081019061322d565b6113d1565b60405161037b919061404e565b60405180910390f35b34801561039057600080fd5b506103ab60048036036103a691908101906134fa565b6114b7565b6040516103b89190613e4d565b60405180910390f35b3480156103cd57600080fd5b506103d66115fb565b6040516103e3919061404e565b60405180910390f35b3480156103f857600080fd5b50610413600480360361040e9190810190613523565b611601565b604051610424959493929190614084565b60405180910390f35b34801561043957600080fd5b5061044261167d565b005b34801561045057600080fd5b506104596117f3565b6040516104669190613d12565b60405180910390f35b34801561047b57600080fd5b50610484611819565b6040516104919190613f58565b60405180910390f35b3480156104a657600080fd5b506104c160048036036104bc919081019061372a565b61183f565b005b3480156104cf57600080fd5b506104ea60048036036104e5919081019061322d565b6119a0565b005b610506600480360361050191908101906136e9565b611ab7565b005b34801561051457600080fd5b5061052f600480360361052a9190810190613256565b611b76565b005b34801561053d57600080fd5b506105586004803603610553919081019061322d565b611d09565b6040516105659190614069565b60405180910390f35b34801561057a57600080fd5b506105956004803603610590919081019061335e565b611dcd565b005b3480156105a357600080fd5b506105be60048036036105b991908101906134fa565b611e52565b6040516105cb9190613e4d565b60405180910390f35b6105ee60048036036105e9919081019061339a565b611e72565b005b3480156105fc57600080fd5b50610617600480360361061291908101906132f7565b612321565b005b34801561062557600080fd5b5061062e612474565b60405161063b9190613cdc565b60405180910390f35b34801561065057600080fd5b5061066b60048036036106669190810190613564565b612499565b005b34801561067957600080fd5b506106826127bf565b60405161068f9190613f73565b60405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071e9061402e565b60405180910390fd5b600160149054906101000a900460ff16610776576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076d90613f8e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156107d257600080fd5b60008090505b8151811015610a3b57600073ffffffffffffffffffffffffffffffffffffffff1682828151811061080557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156108ae57600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501580156108a8573d6000803e3d6000fd5b50610a2e565b60008282815181106108bc57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108fc9190613cf7565b60206040518083038186803b15801561091457600080fd5b505afa158015610928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061094c9190810190613753565b90506000811115610a2c5782828151811061096357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016109c7929190613d64565b602060405180830381600087803b1580156109e157600080fd5b505af11580156109f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610a1991908101906134d1565b50610a226127e5565b610a2b57600080fd5b5b505b80806001019150506107d8565b507f492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce65881604051610a6b9190613e2b565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afc9061402e565b60405180910390fd5b600160149054906101000a900460ff16610b54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4b90613f8e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b8e57600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c344681604051610bfe9190613cdc565b60405180910390a150565b600160149054906101000a900460ff1615610c59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c509061400e565b60405180910390fd5b6000806000806000610c6a8f611601565b9450945094509450945060488560ff16148015610c8a575060018460ff16145b610c9357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610cf157803073ffffffffffffffffffffffffffffffffffffffff16311015610cec57600080fd5b610db0565b6000610cfc84611d09565b905060098160ff161115610d195760098160ff1603600a0a820291505b818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d539190613cf7565b60206040518083038186803b158015610d6b57600080fd5b505afa158015610d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610da39190810190613753565b1015610dae57600080fd5b505b610dc28f8f8f8f8f8f8f8f8f8f612823565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550505050505050505050505050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610eec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee39061402e565b60405180910390fd5b600160149054906101000a900460ff16610f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3290613f8e565b60405180910390fd5b6000600160146101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051610f859190613cf7565b60405180910390a1565b6002544210610fd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fca90613fae565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105a90613fee565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516111159190613cdc565b60405180910390a1565b600081565b600160149054906101000a900460ff1615611174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116b9061400e565b60405180910390fd5b6000839050600061118485611d09565b905060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111c19190613cf7565b60206040518083038186803b1580156111d957600080fd5b505afa1580156111ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506112119190810190613753565b9050600085905060098360ff16111561124f5760098360ff1603600a0a818161123657fe5b04905060098360ff1603600a0a828161124b57fe5b0491505b670de0b6b3a7640000811115801561126f5750670de0b6b3a76400008211155b80156112855750670de0b6b3a764000082820111155b61128e57600080fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b81526004016112cb93929190613d2d565b602060405180830381600087803b1580156112e557600080fd5b505af11580156112f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061131d91908101906134d1565b506113266127e5565b61132f57600080fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e87868360405161136293929190613dc4565b60405180910390a150505050505050565b600160149054906101000a900460ff1681565b6004602052816000526040600020602052806000526040600020600091509150505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611426573073ffffffffffffffffffffffffffffffffffffffff163190506114b2565b8173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161145f9190613cf7565b60206040518083038186803b15801561147757600080fd5b505afa15801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506114af9190810190613753565b90505b919050565b60006003600083815260200190815260200160002060009054906101000a900460ff16156114e857600190506115f6565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561154857600090506115f6565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663749c5f86836040518263ffffffff1660e01b81526004016115a39190613f3d565b60206040518083038186803b1580156115bb57600080fd5b505afa1580156115cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506115f391908101906134d1565b90505b919050565b60025481565b6000806000806000808660008151811061161757fe5b602001015160f81c60f81b60f81c905060008760018151811061163657fe5b602001015160f81c60f81b60f81c9050600080600060228b0151925060428b0151915060628b01519050848484848499509950995099509950505050505091939590929450565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461170c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117039061402e565b60405180910390fd5b600160149054906101000a900460ff161561175c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117539061400e565b60405180910390fd5b60025442106117a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179790613fae565b60405180910390fd5b60018060146101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336040516117e99190613cf7565b60405180910390a1565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c59061402e565b60405180910390fd5b6002544210611912576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190990613fae565b60405180910390fd5b61016e8110611956576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194d90613fce565b60405180910390fd5b620151808102600254016002819055507f02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e881604051611995919061404e565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a269061402e565b60405180910390fd5b6002544210611a73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6a90613fae565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160149054906101000a900460ff1615611b07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afe9061400e565b60405180910390fd5b6b033b2e3c9fd0803ce80000003073ffffffffffffffffffffffffffffffffffffffff16311115611b3757600080fd5b7f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e60008234604051611b6b93929190613dc4565b60405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfc9061402e565b60405180910390fd5b600160149054906101000a900460ff16611c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4b90613f8e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c8e57600080fd5b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a81604051611cfe9190613cf7565b60405180910390a150565b60008082905060008090508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d5a57600080fd5b505afa158015611d6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611d929190810190613753565b503d60008114611dad5760208114611db65760009150611dc2565b60009150611dc2565b60206000803e60005191505b508092505050919050565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60036020528060005260406000206000915054906101000a900460ff1681565b83600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611efb57600080fd5b8273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415611f3457600080fd5b6000611f3f846113d1565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611f7c5734810390505b6000349050600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415611fc05785810190506120ec565b858773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611ffa9190613cf7565b60206040518083038186803b15801561201257600080fd5b505afa158015612026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061204a9190810190613753565b101561205557600080fd5b8673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85886040518363ffffffff1660e01b8152600401612090929190613e02565b602060405180830381600087803b1580156120aa57600080fd5b505af11580156120be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506120e291908101906134d1565b6120eb57600080fd5b5b803073ffffffffffffffffffffffffffffffffffffffff1631101561211057600080fd5b600060608573ffffffffffffffffffffffffffffffffffffffff16838660405161213a9190613c9d565b60006040518083038185875af1925050503d8060008114612177576040519150601f19603f3d011682016040523d82523d6000602084013e61217c565b606091505b50915091508161218b57600080fd5b600080828060200190516121a2919081019061327f565b915091508873ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146121de57600080fd5b60006121e98a6113d1565b9050600087820390508281146121fe57600080fd5b8b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555050505050505050505050505050565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156123aa57600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507f2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e83838360405161246793929190613dc4565b60405180910390a1505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160149054906101000a900460ff16156124e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e09061400e565b60405180910390fd5b60008060008060006124fa8f611601565b9450945094509450945060488560ff1614801561251a575060018460ff16145b61252357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561258157803073ffffffffffffffffffffffffffffffffffffffff1631101561257c57600080fd5b612640565b600061258c84611d09565b905060098160ff1611156125a95760098160ff1603600a0a820291505b818473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016125e39190613cf7565b60206040518083038186803b1580156125fb57600080fd5b505afa15801561260f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506126339190810190613753565b101561263e57600080fd5b505b6126528f8f8f8f8f8f8f8f8f8f612823565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156126d3578173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156126cd573d6000803e3d6000fd5b50612773565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161270e929190613d64565b602060405180830381600087803b15801561272857600080fd5b505af115801561273c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061276091908101906134d1565b506127696127e5565b61277257600080fd5b5b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8383836040516127a693929190613d8d565b60405180910390a1505050505050505050505050505050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090503d60008114612802576020811461280b57612817565b60019150612817565b60206000803e60005191505b50600081141591505090565b60008a80519060200120905060008b8b60006002811061283f57fe5b6020020151604051602001612855929190613cb4565b60405160208183030381529060405280519060200120905060008c8c60016002811061287d57fe5b6020020151604051602001612893929190613cb4565b6040516020818303038152906040528051906020012090506128b4836114b7565b156128be57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166001848f60006002811061290c57fe5b60200201518f60006002811061291e57fe5b60200201518f60006002811061293057fe5b60200201518f60006002811061294257fe5b60200201518f60006002811061295457fe5b60200201518f60006002811061296657fe5b60200201518f60006002811061297857fe5b60200201518f60006002811061298a57fe5b60200201518f60006002811061299c57fe5b60200201516040518c63ffffffff1660e01b81526004016129c79b9a99989796959493929190613e68565b60206040518083038186803b1580156129df57600080fd5b505afa1580156129f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612a1791908101906134d1565b612a2057600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f65d21166000838f600160028110612a6e57fe5b60200201518f600160028110612a8057fe5b60200201518f600160028110612a9257fe5b60200201518f600160028110612aa457fe5b60200201518f600160028110612ab657fe5b60200201518f600160028110612ac857fe5b60200201518f600160028110612ada57fe5b60200201518f600160028110612aec57fe5b60200201518f600160028110612afe57fe5b60200201516040518c63ffffffff1660e01b8152600401612b299b9a99989796959493929190613e68565b60206040518083038186803b158015612b4157600080fd5b505afa158015612b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612b7991908101906134d1565b612b8257600080fd5b60016003600085815260200190815260200160002060006101000a81548160ff02191690831515021790555050505050505050505050505050565b600081359050612bcc8161458b565b92915050565b600081359050612be1816145a2565b92915050565b600081519050612bf6816145a2565b92915050565b600082601f830112612c0d57600080fd5b8135612c20612c1b82614104565b6140d7565b91508181835260208401935060208101905083856020840282011115612c4557600080fd5b60005b83811015612c755781612c5b8882612bbd565b845260208401935060208301925050600181019050612c48565b5050505092915050565b600082601f830112612c9057600080fd5b6002612ca3612c9e8261412c565b6140d7565b9150818360005b83811015612cda5781358601612cc08882612e13565b845260208401935060208301925050600181019050612caa565b5050505092915050565b600082601f830112612cf557600080fd5b6002612d08612d038261414e565b6140d7565b9150818360005b83811015612d3f5781358601612d258882612f0a565b845260208401935060208301925050600181019050612d0f565b5050505092915050565b600082601f830112612d5a57600080fd5b6002612d6d612d6882614170565b6140d7565b9150818360005b83811015612da45781358601612d8a8882613001565b845260208401935060208301925050600181019050612d74565b5050505092915050565b600082601f830112612dbf57600080fd5b6002612dd2612dcd82614192565b6140d7565b9150818360005b83811015612e095781358601612def8882613084565b845260208401935060208301925050600181019050612dd9565b5050505092915050565b600082601f830112612e2457600080fd5b8135612e37612e32826141b4565b6140d7565b91508181835260208401935060208101905083856020840282011115612e5c57600080fd5b60005b83811015612e8c5781612e728882613107565b845260208401935060208301925050600181019050612e5f565b5050505092915050565b600082601f830112612ea757600080fd5b6002612eba612eb5826141dc565b6140d7565b91508183856020840282011115612ed057600080fd5b60005b83811015612f005781612ee68882613131565b845260208401935060208301925050600181019050612ed3565b5050505092915050565b600082601f830112612f1b57600080fd5b8135612f2e612f29826141fe565b6140d7565b91508181835260208401935060208101905083856020840282011115612f5357600080fd5b60005b83811015612f835781612f698882613131565b845260208401935060208301925050600181019050612f56565b5050505092915050565b600082601f830112612f9e57600080fd5b6002612fb1612fac82614226565b6140d7565b91508183856020840282011115612fc757600080fd5b60005b83811015612ff75781612fdd88826131ee565b845260208401935060208301925050600181019050612fca565b5050505092915050565b600082601f83011261301257600080fd5b813561302561302082614248565b6140d7565b9150818183526020840193506020810190508385602084028201111561304a57600080fd5b60005b8381101561307a578161306088826131ee565b84526020840193506020830192505060018101905061304d565b5050505092915050565b600082601f83011261309557600080fd5b81356130a86130a382614270565b6140d7565b915081818352602084019350602081019050838560208402820111156130cd57600080fd5b60005b838110156130fd57816130e38882613218565b8452602084019350602083019250506001810190506130d0565b5050505092915050565b600081359050613116816145b9565b92915050565b60008151905061312b816145b9565b92915050565b600081359050613140816145d0565b92915050565b600082601f83011261315757600080fd5b813561316a61316582614298565b6140d7565b9150808252602083016020830185838301111561318657600080fd5b61319183828461452e565b50505092915050565b600082601f8301126131ab57600080fd5b81356131be6131b9826142c4565b6140d7565b915080825260208301602083018583830111156131da57600080fd5b6131e583828461452e565b50505092915050565b6000813590506131fd816145e7565b92915050565b600081519050613212816145e7565b92915050565b600081359050613227816145fe565b92915050565b60006020828403121561323f57600080fd5b600061324d84828501612bbd565b91505092915050565b60006020828403121561326857600080fd5b600061327684828501612bd2565b91505092915050565b6000806040838503121561329257600080fd5b60006132a085828601612be7565b92505060206132b185828601613203565b9150509250929050565b600080604083850312156132ce57600080fd5b60006132dc85828601612bbd565b92505060206132ed85828601612bbd565b9150509250929050565b60008060006060848603121561330c57600080fd5b600061331a86828701612bbd565b935050602084013567ffffffffffffffff81111561333757600080fd5b6133438682870161319a565b9250506040613354868287016131ee565b9150509250925092565b6000806040838503121561337157600080fd5b600061337f85828601612bbd565b9250506020613390858286016131ee565b9150509250929050565b600080600080600060a086880312156133b257600080fd5b60006133c088828901612bbd565b95505060206133d1888289016131ee565b94505060406133e288828901612bbd565b93505060606133f388828901612bbd565b925050608086013567ffffffffffffffff81111561341057600080fd5b61341c88828901613146565b9150509295509295909350565b60008060006060848603121561343e57600080fd5b600061344c86828701612bbd565b935050602061345d868287016131ee565b925050604084013567ffffffffffffffff81111561347a57600080fd5b6134868682870161319a565b9150509250925092565b6000602082840312156134a257600080fd5b600082013567ffffffffffffffff8111156134bc57600080fd5b6134c884828501612bfc565b91505092915050565b6000602082840312156134e357600080fd5b60006134f18482850161311c565b91505092915050565b60006020828403121561350c57600080fd5b600061351a84828501613131565b91505092915050565b60006020828403121561353557600080fd5b600082013567ffffffffffffffff81111561354f57600080fd5b61355b84828501613146565b91505092915050565b6000806000806000806000806000806101a08b8d03121561358457600080fd5b60008b013567ffffffffffffffff81111561359e57600080fd5b6135aa8d828e01613146565b9a505060206135bb8d828e01612f8d565b99505060608b013567ffffffffffffffff8111156135d857600080fd5b6135e48d828e01612ce4565b98505060808b013567ffffffffffffffff81111561360157600080fd5b61360d8d828e01612c7f565b97505060a061361e8d828e01612e96565b96505060e061362f8d828e01612e96565b9550506101208b013567ffffffffffffffff81111561364d57600080fd5b6136598d828e01612d49565b9450506101408b013567ffffffffffffffff81111561367757600080fd5b6136838d828e01612dae565b9350506101608b013567ffffffffffffffff8111156136a157600080fd5b6136ad8d828e01612ce4565b9250506101808b013567ffffffffffffffff8111156136cb57600080fd5b6136d78d828e01612ce4565b9150509295989b9194979a5092959850565b6000602082840312156136fb57600080fd5b600082013567ffffffffffffffff81111561371557600080fd5b6137218482850161319a565b91505092915050565b60006020828403121561373c57600080fd5b600061374a848285016131ee565b91505092915050565b60006020828403121561376557600080fd5b600061377384828501613203565b91505092915050565b60006137888383613812565b60208301905092915050565b60006137a08383613a06565b60208301905092915050565b60006137b88383613a24565b60208301905092915050565b60006137d08383613c4a565b60208301905092915050565b60006137e88383613c7f565b60208301905092915050565b6137fd816144b0565b82525050565b61380c81614451565b82525050565b61381b8161443f565b82525050565b61382a8161443f565b82525050565b600061383b82614340565b61384581856143ce565b9350613850836142f0565b8060005b83811015613881578151613868888261377c565b97506138738361438d565b925050600181019050613854565b5085935050505092915050565b60006138998261434b565b6138a381856143df565b93506138ae83614300565b8060005b838110156138df5781516138c68882613794565b97506138d18361439a565b9250506001810190506138b2565b5085935050505092915050565b60006138f782614356565b61390181856143f0565b935061390c83614310565b8060005b8381101561393d57815161392488826137ac565b975061392f836143a7565b925050600181019050613910565b5085935050505092915050565b600061395582614361565b61395f8185614401565b935061396a83614320565b8060005b8381101561399b57815161398288826137c4565b975061398d836143b4565b92505060018101905061396e565b5085935050505092915050565b60006139b38261436c565b6139bd8185614412565b93506139c883614330565b8060005b838110156139f95781516139e088826137dc565b97506139eb836143c1565b9250506001810190506139cc565b5085935050505092915050565b613a0f81614463565b82525050565b613a1e81614463565b82525050565b613a2d8161446f565b82525050565b613a3c8161446f565b82525050565b6000613a4d82614377565b613a578185614423565b9350613a6781856020860161453d565b80840191505092915050565b613a7c816144c2565b82525050565b613a8b816144e6565b82525050565b6000613a9c82614382565b613aa6818561442e565b9350613ab681856020860161453d565b613abf8161457a565b840191505092915050565b6000613ad760148361442e565b91507f6e6f7420706175736564207269676874206e6f770000000000000000000000006000830152602082019050919050565b6000613b1760078361442e565b91507f65787069726564000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000613b57601a8361442e565b91507f63616e6e6f7420657874656e6420666f7220746f6f206c6f6e670000000000006000830152602082019050919050565b6000613b97600c8361442e565b91507f756e617574686f72697a656400000000000000000000000000000000000000006000830152602082019050919050565b6000613bd760108361442e565b91507f706175736564207269676874206e6f77000000000000000000000000000000006000830152602082019050919050565b6000613c1760098361442e565b91507f6e6f742061646d696e00000000000000000000000000000000000000000000006000830152602082019050919050565b613c5381614499565b82525050565b613c6281614499565b82525050565b613c79613c7482614499565b614570565b82525050565b613c88816144a3565b82525050565b613c97816144a3565b82525050565b6000613ca98284613a42565b915081905092915050565b6000613cc08285613a42565b9150613ccc8284613c68565b6020820191508190509392505050565b6000602082019050613cf16000830184613821565b92915050565b6000602082019050613d0c60008301846137f4565b92915050565b6000602082019050613d276000830184613803565b92915050565b6000606082019050613d4260008301866137f4565b613d4f60208301856137f4565b613d5c6040830184613c59565b949350505050565b6000604082019050613d7960008301856137f4565b613d866020830184613c59565b9392505050565b6000606082019050613da26000830186613821565b613daf60208301856137f4565b613dbc6040830184613c59565b949350505050565b6000606082019050613dd96000830186613821565b8181036020830152613deb8185613a91565b9050613dfa6040830184613c59565b949350505050565b6000604082019050613e176000830185613821565b613e246020830184613c59565b9392505050565b60006020820190508181036000830152613e458184613830565b905092915050565b6000602082019050613e626000830184613a15565b92915050565b600061016082019050613e7e600083018e613a15565b613e8b602083018d613a33565b613e98604083018c613c59565b8181036060830152613eaa818b6138ec565b90508181036080830152613ebe818a61388e565b9050613ecd60a0830189613a33565b613eda60c0830188613a33565b81810360e0830152613eec818761394a565b9050818103610100830152613f0181866139a8565b9050818103610120830152613f1681856138ec565b9050818103610140830152613f2b81846138ec565b90509c9b505050505050505050505050565b6000602082019050613f526000830184613a33565b92915050565b6000602082019050613f6d6000830184613a73565b92915050565b6000602082019050613f886000830184613a82565b92915050565b60006020820190508181036000830152613fa781613aca565b9050919050565b60006020820190508181036000830152613fc781613b0a565b9050919050565b60006020820190508181036000830152613fe781613b4a565b9050919050565b6000602082019050818103600083015261400781613b8a565b9050919050565b6000602082019050818103600083015261402781613bca565b9050919050565b6000602082019050818103600083015261404781613c0a565b9050919050565b60006020820190506140636000830184613c59565b92915050565b600060208201905061407e6000830184613c8e565b92915050565b600060a0820190506140996000830188613c8e565b6140a66020830187613c8e565b6140b36040830186613821565b6140c06060830185613803565b6140cd6080830184613c59565b9695505050505050565b6000604051905081810181811067ffffffffffffffff821117156140fa57600080fd5b8060405250919050565b600067ffffffffffffffff82111561411b57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561414357600080fd5b602082029050919050565b600067ffffffffffffffff82111561416557600080fd5b602082029050919050565b600067ffffffffffffffff82111561418757600080fd5b602082029050919050565b600067ffffffffffffffff8211156141a957600080fd5b602082029050919050565b600067ffffffffffffffff8211156141cb57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156141f357600080fd5b602082029050919050565b600067ffffffffffffffff82111561421557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561423d57600080fd5b602082029050919050565b600067ffffffffffffffff82111561425f57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561428757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156142af57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156142db57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600061444a82614479565b9050919050565b600061445c82614479565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006144bb8261450a565b9050919050565b60006144cd826144d4565b9050919050565b60006144df82614479565b9050919050565b60006144f1826144f8565b9050919050565b600061450382614479565b9050919050565b60006145158261451c565b9050919050565b600061452782614479565b9050919050565b82818337600083830152505050565b60005b8381101561455b578082015181840152602081019050614540565b8381111561456a576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b6145948161443f565b811461459f57600080fd5b50565b6145ab81614451565b81146145b657600080fd5b50565b6145c281614463565b81146145cd57600080fd5b50565b6145d98161446f565b81146145e457600080fd5b50565b6145f081614499565b81146145fb57600080fd5b50565b614607816144a3565b811461461257600080fd5b5056fea365627a7a72315820e5a98e2c9042daa3fe9b63b6991dc6b52b4e997abf61bd8e05b96085b7ea37986c6578706572696d656e74616cf564736f6c634300050c0040"

// DeployIncmode deploys a new Ethereum contract, binding an instance of Incmode to it.
func DeployIncmode(auth *bind.TransactOpts, backend bind.ContractBackend, admin common.Address, incognitoProxyAddress common.Address, _prevVault common.Address) (common.Address, *types.Transaction, *Incmode, error) {
	parsed, err := abi.JSON(strings.NewReader(IncmodeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IncmodeBin), backend, admin, incognitoProxyAddress, _prevVault)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Incmode{IncmodeCaller: IncmodeCaller{contract: contract}, IncmodeTransactor: IncmodeTransactor{contract: contract}, IncmodeFilterer: IncmodeFilterer{contract: contract}}, nil
}

// Incmode is an auto generated Go binding around an Ethereum contract.
type Incmode struct {
	IncmodeCaller     // Read-only binding to the contract
	IncmodeTransactor // Write-only binding to the contract
	IncmodeFilterer   // Log filterer for contract events
}

// IncmodeCaller is an auto generated read-only Go binding around an Ethereum contract.
type IncmodeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IncmodeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IncmodeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncmodeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IncmodeSession struct {
	Contract     *Incmode          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IncmodeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IncmodeCallerSession struct {
	Contract *IncmodeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IncmodeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IncmodeTransactorSession struct {
	Contract     *IncmodeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IncmodeRaw is an auto generated low-level Go binding around an Ethereum contract.
type IncmodeRaw struct {
	Contract *Incmode // Generic contract binding to access the raw methods on
}

// IncmodeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IncmodeCallerRaw struct {
	Contract *IncmodeCaller // Generic read-only contract binding to access the raw methods on
}

// IncmodeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IncmodeTransactorRaw struct {
	Contract *IncmodeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIncmode creates a new instance of Incmode, bound to a specific deployed contract.
func NewIncmode(address common.Address, backend bind.ContractBackend) (*Incmode, error) {
	contract, err := bindIncmode(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Incmode{IncmodeCaller: IncmodeCaller{contract: contract}, IncmodeTransactor: IncmodeTransactor{contract: contract}, IncmodeFilterer: IncmodeFilterer{contract: contract}}, nil
}

// NewIncmodeCaller creates a new read-only instance of Incmode, bound to a specific deployed contract.
func NewIncmodeCaller(address common.Address, caller bind.ContractCaller) (*IncmodeCaller, error) {
	contract, err := bindIncmode(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IncmodeCaller{contract: contract}, nil
}

// NewIncmodeTransactor creates a new write-only instance of Incmode, bound to a specific deployed contract.
func NewIncmodeTransactor(address common.Address, transactor bind.ContractTransactor) (*IncmodeTransactor, error) {
	contract, err := bindIncmode(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IncmodeTransactor{contract: contract}, nil
}

// NewIncmodeFilterer creates a new log filterer instance of Incmode, bound to a specific deployed contract.
func NewIncmodeFilterer(address common.Address, filterer bind.ContractFilterer) (*IncmodeFilterer, error) {
	contract, err := bindIncmode(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IncmodeFilterer{contract: contract}, nil
}

// bindIncmode binds a generic wrapper to an already deployed contract.
func bindIncmode(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IncmodeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incmode *IncmodeRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Incmode.Contract.IncmodeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incmode *IncmodeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.Contract.IncmodeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incmode *IncmodeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incmode.Contract.IncmodeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incmode *IncmodeCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Incmode.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incmode *IncmodeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incmode *IncmodeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incmode.Contract.contract.Transact(opts, method, params...)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeCaller) ETHTOKEN(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "ETH_TOKEN")
	return *ret0, err
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeSession) ETHTOKEN() (common.Address, error) {
	return _Incmode.Contract.ETHTOKEN(&_Incmode.CallOpts)
}

// ETHTOKEN is a free data retrieval call binding the contract method 0x58bc8337.
//
// Solidity: function ETH_TOKEN() constant returns(address)
func (_Incmode *IncmodeCallerSession) ETHTOKEN() (common.Address, error) {
	return _Incmode.Contract.ETHTOKEN(&_Incmode.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeCaller) Admin(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "admin")
	return *ret0, err
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeSession) Admin() (common.Address, error) {
	return _Incmode.Contract.Admin(&_Incmode.CallOpts)
}

// Admin is a free data retrieval call binding the contract method 0xf851a440.
//
// Solidity: function admin() constant returns(address)
func (_Incmode *IncmodeCallerSession) Admin() (common.Address, error) {
	return _Incmode.Contract.Admin(&_Incmode.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeCaller) Expire(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "expire")
	return *ret0, err
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeSession) Expire() (*big.Int, error) {
	return _Incmode.Contract.Expire(&_Incmode.CallOpts)
}

// Expire is a free data retrieval call binding the contract method 0x79599f96.
//
// Solidity: function expire() constant returns(uint256)
func (_Incmode *IncmodeCallerSession) Expire() (*big.Int, error) {
	return _Incmode.Contract.Expire(&_Incmode.CallOpts)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeCaller) GetDecimals(opts *bind.CallOpts, token common.Address) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "getDecimals", token)
	return *ret0, err
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeSession) GetDecimals(token common.Address) (uint8, error) {
	return _Incmode.Contract.GetDecimals(&_Incmode.CallOpts, token)
}

// GetDecimals is a free data retrieval call binding the contract method 0xcf54aaa0.
//
// Solidity: function getDecimals(address token) constant returns(uint8)
func (_Incmode *IncmodeCallerSession) GetDecimals(token common.Address) (uint8, error) {
	return _Incmode.Contract.GetDecimals(&_Incmode.CallOpts, token)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeCaller) Incognito(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "incognito")
	return *ret0, err
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeSession) Incognito() (common.Address, error) {
	return _Incmode.Contract.Incognito(&_Incmode.CallOpts)
}

// Incognito is a free data retrieval call binding the contract method 0x8a984538.
//
// Solidity: function incognito() constant returns(address)
func (_Incmode *IncmodeCallerSession) Incognito() (common.Address, error) {
	return _Incmode.Contract.Incognito(&_Incmode.CallOpts)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeCaller) IsWithdrawed(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "isWithdrawed", hash)
	return *ret0, err
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Incmode.Contract.IsWithdrawed(&_Incmode.CallOpts, hash)
}

// IsWithdrawed is a free data retrieval call binding the contract method 0x749c5f86.
//
// Solidity: function isWithdrawed(bytes32 hash) constant returns(bool)
func (_Incmode *IncmodeCallerSession) IsWithdrawed(hash [32]byte) (bool, error) {
	return _Incmode.Contract.IsWithdrawed(&_Incmode.CallOpts, hash)
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeCaller) NewVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "newVault")
	return *ret0, err
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeSession) NewVault() (common.Address, error) {
	return _Incmode.Contract.NewVault(&_Incmode.CallOpts)
}

// NewVault is a free data retrieval call binding the contract method 0x88aaf0c8.
//
// Solidity: function newVault() constant returns(address)
func (_Incmode *IncmodeCallerSession) NewVault() (common.Address, error) {
	return _Incmode.Contract.NewVault(&_Incmode.CallOpts)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeCaller) ParseBurnInst(opts *bind.CallOpts, inst []byte) (uint8, uint8, common.Address, common.Address, *big.Int, error) {
	var (
		ret0 = new(uint8)
		ret1 = new(uint8)
		ret2 = new(common.Address)
		ret3 = new(common.Address)
		ret4 = new(*big.Int)
	)
	out := &[]interface{}{
		ret0,
		ret1,
		ret2,
		ret3,
		ret4,
	}
	err := _Incmode.contract.Call(opts, out, "parseBurnInst", inst)
	return *ret0, *ret1, *ret2, *ret3, *ret4, err
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeSession) ParseBurnInst(inst []byte) (uint8, uint8, common.Address, common.Address, *big.Int, error) {
	return _Incmode.Contract.ParseBurnInst(&_Incmode.CallOpts, inst)
}

// ParseBurnInst is a free data retrieval call binding the contract method 0x7e16e6e1.
//
// Solidity: function parseBurnInst(bytes inst) constant returns(uint8, uint8, address, address, uint256)
func (_Incmode *IncmodeCallerSession) ParseBurnInst(inst []byte) (uint8, uint8, common.Address, common.Address, *big.Int, error) {
	return _Incmode.Contract.ParseBurnInst(&_Incmode.CallOpts, inst)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "paused")
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeSession) Paused() (bool, error) {
	return _Incmode.Contract.Paused(&_Incmode.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() constant returns(bool)
func (_Incmode *IncmodeCallerSession) Paused() (bool, error) {
	return _Incmode.Contract.Paused(&_Incmode.CallOpts)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeCaller) PrevVault(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "prevVault")
	return *ret0, err
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeSession) PrevVault() (common.Address, error) {
	return _Incmode.Contract.PrevVault(&_Incmode.CallOpts)
}

// PrevVault is a free data retrieval call binding the contract method 0xfa84702e.
//
// Solidity: function prevVault() constant returns(address)
func (_Incmode *IncmodeCallerSession) PrevVault() (common.Address, error) {
	return _Incmode.Contract.PrevVault(&_Incmode.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeCaller) Successor(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "successor")
	return *ret0, err
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeSession) Successor() (common.Address, error) {
	return _Incmode.Contract.Successor(&_Incmode.CallOpts)
}

// Successor is a free data retrieval call binding the contract method 0x6ff968c3.
//
// Solidity: function successor() constant returns(address)
func (_Incmode *IncmodeCallerSession) Successor() (common.Address, error) {
	return _Incmode.Contract.Successor(&_Incmode.CallOpts)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeCaller) WithdrawRequests(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "withdrawRequests", arg0, arg1)
	return *ret0, err
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Incmode.Contract.WithdrawRequests(&_Incmode.CallOpts, arg0, arg1)
}

// WithdrawRequests is a free data retrieval call binding the contract method 0x65b5a00f.
//
// Solidity: function withdrawRequests(address , address ) constant returns(uint256)
func (_Incmode *IncmodeCallerSession) WithdrawRequests(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Incmode.Contract.WithdrawRequests(&_Incmode.CallOpts, arg0, arg1)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeCaller) Withdrawed(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Incmode.contract.Call(opts, out, "withdrawed", arg0)
	return *ret0, err
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Incmode.Contract.Withdrawed(&_Incmode.CallOpts, arg0)
}

// Withdrawed is a free data retrieval call binding the contract method 0xdca40d9e.
//
// Solidity: function withdrawed(bytes32 ) constant returns(bool)
func (_Incmode *IncmodeCallerSession) Withdrawed(arg0 [32]byte) (bool, error) {
	return _Incmode.Contract.Withdrawed(&_Incmode.CallOpts, arg0)
}

// BalanceOf is a paid mutator transaction binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) returns(uint256)
func (_Incmode *IncmodeTransactor) BalanceOf(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "balanceOf", token)
}

// BalanceOf is a paid mutator transaction binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) returns(uint256)
func (_Incmode *IncmodeSession) BalanceOf(token common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.BalanceOf(&_Incmode.TransactOpts, token)
}

// BalanceOf is a paid mutator transaction binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address token) returns(uint256)
func (_Incmode *IncmodeTransactorSession) BalanceOf(token common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.BalanceOf(&_Incmode.TransactOpts, token)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeTransactor) Claim(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "claim")
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeSession) Claim() (*types.Transaction, error) {
	return _Incmode.Contract.Claim(&_Incmode.TransactOpts)
}

// Claim is a paid mutator transaction binding the contract method 0x4e71d92d.
//
// Solidity: function claim() returns()
func (_Incmode *IncmodeTransactorSession) Claim() (*types.Transaction, error) {
	return _Incmode.Contract.Claim(&_Incmode.TransactOpts)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeTransactor) Deposit(opts *bind.TransactOpts, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "deposit", incognitoAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeSession) Deposit(incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.Deposit(&_Incmode.TransactOpts, incognitoAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0xa26e1186.
//
// Solidity: function deposit(string incognitoAddress) returns()
func (_Incmode *IncmodeTransactorSession) Deposit(incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.Deposit(&_Incmode.TransactOpts, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeTransactor) DepositERC20(opts *bind.TransactOpts, token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "depositERC20", token, amount, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.DepositERC20(&_Incmode.TransactOpts, token, amount, incognitoAddress)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x5a67cb87.
//
// Solidity: function depositERC20(address token, uint256 amount, string incognitoAddress) returns()
func (_Incmode *IncmodeTransactorSession) DepositERC20(token common.Address, amount *big.Int, incognitoAddress string) (*types.Transaction, error) {
	return _Incmode.Contract.DepositERC20(&_Incmode.TransactOpts, token, amount, incognitoAddress)
}

// Execute is a paid mutator transaction binding the contract method 0xe7edbc02.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData) returns()
func (_Incmode *IncmodeTransactor) Execute(opts *bind.TransactOpts, token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "execute", token, amount, recipientToken, exchangeAddress, callData)
}

// Execute is a paid mutator transaction binding the contract method 0xe7edbc02.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData) returns()
func (_Incmode *IncmodeSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte) (*types.Transaction, error) {
	return _Incmode.Contract.Execute(&_Incmode.TransactOpts, token, amount, recipientToken, exchangeAddress, callData)
}

// Execute is a paid mutator transaction binding the contract method 0xe7edbc02.
//
// Solidity: function execute(address token, uint256 amount, address recipientToken, address exchangeAddress, bytes callData) returns()
func (_Incmode *IncmodeTransactorSession) Execute(token common.Address, amount *big.Int, recipientToken common.Address, exchangeAddress common.Address, callData []byte) (*types.Transaction, error) {
	return _Incmode.Contract.Execute(&_Incmode.TransactOpts, token, amount, recipientToken, exchangeAddress, callData)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeTransactor) Extend(opts *bind.TransactOpts, n *big.Int) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "extend", n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.Extend(&_Incmode.TransactOpts, n)
}

// Extend is a paid mutator transaction binding the contract method 0x9714378c.
//
// Solidity: function extend(uint256 n) returns()
func (_Incmode *IncmodeTransactorSession) Extend(n *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.Extend(&_Incmode.TransactOpts, n)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeTransactor) Migrate(opts *bind.TransactOpts, _newVault common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "migrate", _newVault)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeSession) Migrate(_newVault common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Migrate(&_Incmode.TransactOpts, _newVault)
}

// Migrate is a paid mutator transaction binding the contract method 0xce5494bb.
//
// Solidity: function migrate(address _newVault) returns()
func (_Incmode *IncmodeTransactorSession) Migrate(_newVault common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Migrate(&_Incmode.TransactOpts, _newVault)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeTransactor) MoveAssets(opts *bind.TransactOpts, assets []common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "moveAssets", assets)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeSession) MoveAssets(assets []common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.MoveAssets(&_Incmode.TransactOpts, assets)
}

// MoveAssets is a paid mutator transaction binding the contract method 0x0c4f5039.
//
// Solidity: function moveAssets(address[] assets) returns()
func (_Incmode *IncmodeTransactorSession) MoveAssets(assets []common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.MoveAssets(&_Incmode.TransactOpts, assets)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeSession) Pause() (*types.Transaction, error) {
	return _Incmode.Contract.Pause(&_Incmode.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Incmode *IncmodeTransactorSession) Pause() (*types.Transaction, error) {
	return _Incmode.Contract.Pause(&_Incmode.TransactOpts)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0xef074bd5.
//
// Solidity: function requestWithdraw(address token, string incognitoAddress, uint256 amount) returns()
func (_Incmode *IncmodeTransactor) RequestWithdraw(opts *bind.TransactOpts, token common.Address, incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "requestWithdraw", token, incognitoAddress, amount)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0xef074bd5.
//
// Solidity: function requestWithdraw(address token, string incognitoAddress, uint256 amount) returns()
func (_Incmode *IncmodeSession) RequestWithdraw(token common.Address, incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.RequestWithdraw(&_Incmode.TransactOpts, token, incognitoAddress, amount)
}

// RequestWithdraw is a paid mutator transaction binding the contract method 0xef074bd5.
//
// Solidity: function requestWithdraw(address token, string incognitoAddress, uint256 amount) returns()
func (_Incmode *IncmodeTransactorSession) RequestWithdraw(token common.Address, incognitoAddress string, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.RequestWithdraw(&_Incmode.TransactOpts, token, incognitoAddress, amount)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeTransactor) Retire(opts *bind.TransactOpts, _successor common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "retire", _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeSession) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Retire(&_Incmode.TransactOpts, _successor)
}

// Retire is a paid mutator transaction binding the contract method 0x9e6371ba.
//
// Solidity: function retire(address _successor) returns()
func (_Incmode *IncmodeTransactorSession) Retire(_successor common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.Retire(&_Incmode.TransactOpts, _successor)
}

// SetAmount is a paid mutator transaction binding the contract method 0xd2fafb19.
//
// Solidity: function setAmount(address sellToken, uint256 amount) returns()
func (_Incmode *IncmodeTransactor) SetAmount(opts *bind.TransactOpts, sellToken common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "setAmount", sellToken, amount)
}

// SetAmount is a paid mutator transaction binding the contract method 0xd2fafb19.
//
// Solidity: function setAmount(address sellToken, uint256 amount) returns()
func (_Incmode *IncmodeSession) SetAmount(sellToken common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.SetAmount(&_Incmode.TransactOpts, sellToken, amount)
}

// SetAmount is a paid mutator transaction binding the contract method 0xd2fafb19.
//
// Solidity: function setAmount(address sellToken, uint256 amount) returns()
func (_Incmode *IncmodeTransactorSession) SetAmount(sellToken common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Incmode.Contract.SetAmount(&_Incmode.TransactOpts, sellToken, amount)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactor) SubmitBurnProof(opts *bind.TransactOpts, inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "submitBurnProof", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeSession) SubmitBurnProof(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.SubmitBurnProof(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// SubmitBurnProof is a paid mutator transaction binding the contract method 0x3cb4b58a.
//
// Solidity: function submitBurnProof(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactorSession) SubmitBurnProof(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.SubmitBurnProof(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeSession) Unpause() (*types.Transaction, error) {
	return _Incmode.Contract.Unpause(&_Incmode.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Incmode *IncmodeTransactorSession) Unpause() (*types.Transaction, error) {
	return _Incmode.Contract.Unpause(&_Incmode.TransactOpts)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeTransactor) UpdateIncognitoProxy(opts *bind.TransactOpts, newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "updateIncognitoProxy", newIncognitoProxy)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeSession) UpdateIncognitoProxy(newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.UpdateIncognitoProxy(&_Incmode.TransactOpts, newIncognitoProxy)
}

// UpdateIncognitoProxy is a paid mutator transaction binding the contract method 0x3a51913d.
//
// Solidity: function updateIncognitoProxy(address newIncognitoProxy) returns()
func (_Incmode *IncmodeTransactorSession) UpdateIncognitoProxy(newIncognitoProxy common.Address) (*types.Transaction, error) {
	return _Incmode.Contract.UpdateIncognitoProxy(&_Incmode.TransactOpts, newIncognitoProxy)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactor) Withdraw(opts *bind.TransactOpts, inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.contract.Transact(opts, "withdraw", inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeSession) Withdraw(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.Withdraw(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf8b39745.
//
// Solidity: function withdraw(bytes inst, uint256[2] heights, bytes32[][2] instPaths, bool[][2] instPathIsLefts, bytes32[2] instRoots, bytes32[2] blkData, uint256[][2] sigIdxs, uint8[][2] sigVs, bytes32[][2] sigRs, bytes32[][2] sigSs) returns()
func (_Incmode *IncmodeTransactorSession) Withdraw(inst []byte, heights [2]*big.Int, instPaths [2][][32]byte, instPathIsLefts [2][]bool, instRoots [2][32]byte, blkData [2][32]byte, sigIdxs [2][]*big.Int, sigVs [2][]uint8, sigRs [2][][32]byte, sigSs [2][][32]byte) (*types.Transaction, error) {
	return _Incmode.Contract.Withdraw(&_Incmode.TransactOpts, inst, heights, instPaths, instPathIsLefts, instRoots, blkData, sigIdxs, sigVs, sigRs, sigSs)
}

// IncmodeClaimIterator is returned from FilterClaim and is used to iterate over the raw logs and unpacked data for Claim events raised by the Incmode contract.
type IncmodeClaimIterator struct {
	Event *IncmodeClaim // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeClaimIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeClaim)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeClaim)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeClaimIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeClaimIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeClaim represents a Claim event raised by the Incmode contract.
type IncmodeClaim struct {
	Claimer common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterClaim is a free log retrieval operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Incmode *IncmodeFilterer) FilterClaim(opts *bind.FilterOpts) (*IncmodeClaimIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return &IncmodeClaimIterator{contract: _Incmode.contract, event: "Claim", logs: logs, sub: sub}, nil
}

// WatchClaim is a free log subscription operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Incmode *IncmodeFilterer) WatchClaim(opts *bind.WatchOpts, sink chan<- *IncmodeClaim) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Claim")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeClaim)
				if err := _Incmode.contract.UnpackLog(event, "Claim", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaim is a log parse operation binding the contract event 0x0c7ef932d3b91976772937f18d5ef9b39a9930bef486b576c374f047c4b512dc.
//
// Solidity: event Claim(address claimer)
func (_Incmode *IncmodeFilterer) ParseClaim(log types.Log) (*IncmodeClaim, error) {
	event := new(IncmodeClaim)
	if err := _Incmode.contract.UnpackLog(event, "Claim", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeDepositIterator is returned from FilterDeposit and is used to iterate over the raw logs and unpacked data for Deposit events raised by the Incmode contract.
type IncmodeDepositIterator struct {
	Event *IncmodeDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeDeposit represents a Deposit event raised by the Incmode contract.
type IncmodeDeposit struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterDeposit is a free log retrieval operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterDeposit(opts *bind.FilterOpts) (*IncmodeDepositIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return &IncmodeDepositIterator{contract: _Incmode.contract, event: "Deposit", logs: logs, sub: sub}, nil
}

// WatchDeposit is a free log subscription operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchDeposit(opts *bind.WatchOpts, sink chan<- *IncmodeDeposit) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Deposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeDeposit)
				if err := _Incmode.contract.UnpackLog(event, "Deposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposit is a log parse operation binding the contract event 0x2d4b597935f3cd67fb2eebf1db4debc934cee5c7baa7153f980fdbeb2e74084e.
//
// Solidity: event Deposit(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) ParseDeposit(log types.Log) (*IncmodeDeposit, error) {
	event := new(IncmodeDeposit)
	if err := _Incmode.contract.UnpackLog(event, "Deposit", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeExtendIterator is returned from FilterExtend and is used to iterate over the raw logs and unpacked data for Extend events raised by the Incmode contract.
type IncmodeExtendIterator struct {
	Event *IncmodeExtend // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeExtendIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeExtend)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeExtend)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeExtendIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeExtendIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeExtend represents a Extend event raised by the Incmode contract.
type IncmodeExtend struct {
	Ndays *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterExtend is a free log retrieval operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Incmode *IncmodeFilterer) FilterExtend(opts *bind.FilterOpts) (*IncmodeExtendIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return &IncmodeExtendIterator{contract: _Incmode.contract, event: "Extend", logs: logs, sub: sub}, nil
}

// WatchExtend is a free log subscription operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Incmode *IncmodeFilterer) WatchExtend(opts *bind.WatchOpts, sink chan<- *IncmodeExtend) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Extend")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeExtend)
				if err := _Incmode.contract.UnpackLog(event, "Extend", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExtend is a log parse operation binding the contract event 0x02ef6561d311451dadc920679eb21192a61d96ee8ead94241b8ff073029ca6e8.
//
// Solidity: event Extend(uint256 ndays)
func (_Incmode *IncmodeFilterer) ParseExtend(log types.Log) (*IncmodeExtend, error) {
	event := new(IncmodeExtend)
	if err := _Incmode.contract.UnpackLog(event, "Extend", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeMigrateIterator is returned from FilterMigrate and is used to iterate over the raw logs and unpacked data for Migrate events raised by the Incmode contract.
type IncmodeMigrateIterator struct {
	Event *IncmodeMigrate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeMigrateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeMigrate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeMigrate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeMigrateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeMigrateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeMigrate represents a Migrate event raised by the Incmode contract.
type IncmodeMigrate struct {
	NewVault common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMigrate is a free log retrieval operation binding the contract event 0xd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a.
//
// Solidity: event Migrate(address newVault)
func (_Incmode *IncmodeFilterer) FilterMigrate(opts *bind.FilterOpts) (*IncmodeMigrateIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return &IncmodeMigrateIterator{contract: _Incmode.contract, event: "Migrate", logs: logs, sub: sub}, nil
}

// WatchMigrate is a free log subscription operation binding the contract event 0xd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a.
//
// Solidity: event Migrate(address newVault)
func (_Incmode *IncmodeFilterer) WatchMigrate(opts *bind.WatchOpts, sink chan<- *IncmodeMigrate) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Migrate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeMigrate)
				if err := _Incmode.contract.UnpackLog(event, "Migrate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMigrate is a log parse operation binding the contract event 0xd58a618a39de682696ea37dd9a6bf9c793afa426fa1438e75c3966e3b541e45a.
//
// Solidity: event Migrate(address newVault)
func (_Incmode *IncmodeFilterer) ParseMigrate(log types.Log) (*IncmodeMigrate, error) {
	event := new(IncmodeMigrate)
	if err := _Incmode.contract.UnpackLog(event, "Migrate", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeMoveAssetsIterator is returned from FilterMoveAssets and is used to iterate over the raw logs and unpacked data for MoveAssets events raised by the Incmode contract.
type IncmodeMoveAssetsIterator struct {
	Event *IncmodeMoveAssets // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeMoveAssetsIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeMoveAssets)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeMoveAssets)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeMoveAssetsIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeMoveAssetsIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeMoveAssets represents a MoveAssets event raised by the Incmode contract.
type IncmodeMoveAssets struct {
	Assets []common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMoveAssets is a free log retrieval operation binding the contract event 0x492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce658.
//
// Solidity: event MoveAssets(address[] assets)
func (_Incmode *IncmodeFilterer) FilterMoveAssets(opts *bind.FilterOpts) (*IncmodeMoveAssetsIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "MoveAssets")
	if err != nil {
		return nil, err
	}
	return &IncmodeMoveAssetsIterator{contract: _Incmode.contract, event: "MoveAssets", logs: logs, sub: sub}, nil
}

// WatchMoveAssets is a free log subscription operation binding the contract event 0x492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce658.
//
// Solidity: event MoveAssets(address[] assets)
func (_Incmode *IncmodeFilterer) WatchMoveAssets(opts *bind.WatchOpts, sink chan<- *IncmodeMoveAssets) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "MoveAssets")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeMoveAssets)
				if err := _Incmode.contract.UnpackLog(event, "MoveAssets", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMoveAssets is a log parse operation binding the contract event 0x492fc8b292f2a2a9b328a366b83745f30c024056d12aa118a15966d26a8ce658.
//
// Solidity: event MoveAssets(address[] assets)
func (_Incmode *IncmodeFilterer) ParseMoveAssets(log types.Log) (*IncmodeMoveAssets, error) {
	event := new(IncmodeMoveAssets)
	if err := _Incmode.contract.UnpackLog(event, "MoveAssets", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodePausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Incmode contract.
type IncmodePausedIterator struct {
	Event *IncmodePaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodePausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodePaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodePaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodePausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodePausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodePaused represents a Paused event raised by the Incmode contract.
type IncmodePaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Incmode *IncmodeFilterer) FilterPaused(opts *bind.FilterOpts) (*IncmodePausedIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &IncmodePausedIterator{contract: _Incmode.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Incmode *IncmodeFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *IncmodePaused) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodePaused)
				if err := _Incmode.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address pauser)
func (_Incmode *IncmodeFilterer) ParsePaused(log types.Log) (*IncmodePaused, error) {
	event := new(IncmodePaused)
	if err := _Incmode.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeTradeIterator is returned from FilterTrade and is used to iterate over the raw logs and unpacked data for Trade events raised by the Incmode contract.
type IncmodeTradeIterator struct {
	Event *IncmodeTrade // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeTradeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeTrade)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeTrade)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeTradeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeTradeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeTrade represents a Trade event raised by the Incmode contract.
type IncmodeTrade struct {
	IncognitoAddress string
	Token            common.Address
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterTrade is a free log retrieval operation binding the contract event 0x68ae6030d8e5a42e79b7dd481f18c425a779d1b6816487681116ffca8356ac49.
//
// Solidity: event Trade(string incognitoAddress, address token, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterTrade(opts *bind.FilterOpts) (*IncmodeTradeIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Trade")
	if err != nil {
		return nil, err
	}
	return &IncmodeTradeIterator{contract: _Incmode.contract, event: "Trade", logs: logs, sub: sub}, nil
}

// WatchTrade is a free log subscription operation binding the contract event 0x68ae6030d8e5a42e79b7dd481f18c425a779d1b6816487681116ffca8356ac49.
//
// Solidity: event Trade(string incognitoAddress, address token, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchTrade(opts *bind.WatchOpts, sink chan<- *IncmodeTrade) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Trade")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeTrade)
				if err := _Incmode.contract.UnpackLog(event, "Trade", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTrade is a log parse operation binding the contract event 0x68ae6030d8e5a42e79b7dd481f18c425a779d1b6816487681116ffca8356ac49.
//
// Solidity: event Trade(string incognitoAddress, address token, uint256 amount)
func (_Incmode *IncmodeFilterer) ParseTrade(log types.Log) (*IncmodeTrade, error) {
	event := new(IncmodeTrade)
	if err := _Incmode.contract.UnpackLog(event, "Trade", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Incmode contract.
type IncmodeUnpausedIterator struct {
	Event *IncmodeUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeUnpaused represents a Unpaused event raised by the Incmode contract.
type IncmodeUnpaused struct {
	Pauser common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Incmode *IncmodeFilterer) FilterUnpaused(opts *bind.FilterOpts) (*IncmodeUnpausedIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &IncmodeUnpausedIterator{contract: _Incmode.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Incmode *IncmodeFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *IncmodeUnpaused) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeUnpaused)
				if err := _Incmode.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address pauser)
func (_Incmode *IncmodeFilterer) ParseUnpaused(log types.Log) (*IncmodeUnpaused, error) {
	event := new(IncmodeUnpaused)
	if err := _Incmode.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeUpdateIncognitoProxyIterator is returned from FilterUpdateIncognitoProxy and is used to iterate over the raw logs and unpacked data for UpdateIncognitoProxy events raised by the Incmode contract.
type IncmodeUpdateIncognitoProxyIterator struct {
	Event *IncmodeUpdateIncognitoProxy // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeUpdateIncognitoProxyIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeUpdateIncognitoProxy)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeUpdateIncognitoProxy)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeUpdateIncognitoProxyIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeUpdateIncognitoProxyIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeUpdateIncognitoProxy represents a UpdateIncognitoProxy event raised by the Incmode contract.
type IncmodeUpdateIncognitoProxy struct {
	NewIncognitoProxy common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterUpdateIncognitoProxy is a free log retrieval operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Incmode *IncmodeFilterer) FilterUpdateIncognitoProxy(opts *bind.FilterOpts) (*IncmodeUpdateIncognitoProxyIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return &IncmodeUpdateIncognitoProxyIterator{contract: _Incmode.contract, event: "UpdateIncognitoProxy", logs: logs, sub: sub}, nil
}

// WatchUpdateIncognitoProxy is a free log subscription operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Incmode *IncmodeFilterer) WatchUpdateIncognitoProxy(opts *bind.WatchOpts, sink chan<- *IncmodeUpdateIncognitoProxy) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "UpdateIncognitoProxy")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeUpdateIncognitoProxy)
				if err := _Incmode.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateIncognitoProxy is a log parse operation binding the contract event 0x204252dfe190ad6ef63db40a490f048b39f661de74628408f13cd0bb2d4c3446.
//
// Solidity: event UpdateIncognitoProxy(address newIncognitoProxy)
func (_Incmode *IncmodeFilterer) ParseUpdateIncognitoProxy(log types.Log) (*IncmodeUpdateIncognitoProxy, error) {
	event := new(IncmodeUpdateIncognitoProxy)
	if err := _Incmode.contract.UnpackLog(event, "UpdateIncognitoProxy", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the Incmode contract.
type IncmodeWithdrawIterator struct {
	Event *IncmodeWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeWithdraw represents a Withdraw event raised by the Incmode contract.
type IncmodeWithdraw struct {
	Token  common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterWithdraw(opts *bind.FilterOpts) (*IncmodeWithdrawIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &IncmodeWithdrawIterator{contract: _Incmode.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *IncmodeWithdraw) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeWithdraw)
				if err := _Incmode.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb.
//
// Solidity: event Withdraw(address token, address to, uint256 amount)
func (_Incmode *IncmodeFilterer) ParseWithdraw(log types.Log) (*IncmodeWithdraw, error) {
	event := new(IncmodeWithdraw)
	if err := _Incmode.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	return event, nil
}

// IncmodeWithdrawRequestIterator is returned from FilterWithdrawRequest and is used to iterate over the raw logs and unpacked data for WithdrawRequest events raised by the Incmode contract.
type IncmodeWithdrawRequestIterator struct {
	Event *IncmodeWithdrawRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncmodeWithdrawRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncmodeWithdrawRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncmodeWithdrawRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncmodeWithdrawRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncmodeWithdrawRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncmodeWithdrawRequest represents a WithdrawRequest event raised by the Incmode contract.
type IncmodeWithdrawRequest struct {
	Token            common.Address
	IncognitoAddress string
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterWithdrawRequest is a free log retrieval operation binding the contract event 0x392a40e1ff76f04543dc851cc0c7ad40bb9db5d3f672f27d1aa3e5c089533af5.
//
// Solidity: event WithdrawRequest(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) FilterWithdrawRequest(opts *bind.FilterOpts) (*IncmodeWithdrawRequestIterator, error) {

	logs, sub, err := _Incmode.contract.FilterLogs(opts, "WithdrawRequest")
	if err != nil {
		return nil, err
	}
	return &IncmodeWithdrawRequestIterator{contract: _Incmode.contract, event: "WithdrawRequest", logs: logs, sub: sub}, nil
}

// WatchWithdrawRequest is a free log subscription operation binding the contract event 0x392a40e1ff76f04543dc851cc0c7ad40bb9db5d3f672f27d1aa3e5c089533af5.
//
// Solidity: event WithdrawRequest(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) WatchWithdrawRequest(opts *bind.WatchOpts, sink chan<- *IncmodeWithdrawRequest) (event.Subscription, error) {

	logs, sub, err := _Incmode.contract.WatchLogs(opts, "WithdrawRequest")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncmodeWithdrawRequest)
				if err := _Incmode.contract.UnpackLog(event, "WithdrawRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawRequest is a log parse operation binding the contract event 0x392a40e1ff76f04543dc851cc0c7ad40bb9db5d3f672f27d1aa3e5c089533af5.
//
// Solidity: event WithdrawRequest(address token, string incognitoAddress, uint256 amount)
func (_Incmode *IncmodeFilterer) ParseWithdrawRequest(log types.Log) (*IncmodeWithdrawRequest, error) {
	event := new(IncmodeWithdrawRequest)
	if err := _Incmode.contract.UnpackLog(event, "WithdrawRequest", log); err != nil {
		return nil, err
	}
	return event, nil
}
